{"version":3,"file":"index.js","sources":["../src/aiagentcontext.ts","../src/const.ts","../src/aiagentui.ts","../src/aiagentcommand.ts","../src/util/prompt.ts","../src/util/htmlparser.ts","../src/aiagentservice.ts","../src/aiagentediting.ts","../src/aiagent.ts","../src/index.ts"],"sourcesContent":["/**\n * The AiAgentContext class provides a context for the AI Agent plugin,\n * allowing access to shared resources and state across different components.\n */\nexport class AiAgentContext {\n\tprivate static instance: AiAgentContext;\n\tprivate _uiComponent: any;\n\n\tprivate constructor() {}\n\n\tpublic static getInstance(): AiAgentContext {\n\t\tif ( !AiAgentContext.instance ) {\n\t\t\tAiAgentContext.instance = new AiAgentContext();\n\t\t}\n\t\treturn AiAgentContext.instance;\n\t}\n\n\tpublic set uiComponent( component: any ) {\n\t\tthis._uiComponent = component;\n\t}\n\n\tpublic showError( message: string ): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tconsole.log( 'Showing error message...', message );\n\t\t\tthis._uiComponent.showGptErrorToolTip( message );\n\t\t}\n\t}\n\n\tpublic showLoader( rect: DOMRect ): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tthis._uiComponent.showLoader( rect );\n\t\t}\n\t}\n\n\tpublic hideLoader(): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tthis._uiComponent.hideLoader();\n\t\t}\n\t}\n}\n\nexport const aiAgentContext = AiAgentContext.getInstance();\n","import type { AiModel } from './type-identifiers.js';\n\n// const\nexport const TOKEN_LIMITS: Record<AiModel, { min: number; max: number; context: number }> = {\n\t'gpt-3': { min: 1, max: 4096, context: 16385 },\n\t'gpt-3.5-turbo': { min: 1, max: 4096, context: 16385 },\n\t'gpt-4': { min: 1, max: 4096, context: 128000 },\n\t'gpt-4o': { min: 0, max: 4096, context: 128000 },\n\t'gpt-4-turbo': { min: 1, max: 16384, context: 128000 },\n\t'gpt-4o-mini': { min: 1, max: 16384, context: 128000 },\n\t'kavya-m1': { min: 0, max: 16384, context: 128000 }\n};\n\nexport const SUPPORTED_LANGUAGES = [ 'en', 'es', 'hi', 'nl' ];\n","import { Plugin } from 'ckeditor5/src/core.js';\n// import { ButtonView, createDropdown, SplitButtonView } from 'ckeditor5/src/ui.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport aiAgentIcon from '../theme/icons/ai-agent.svg';\nimport { aiAgentContext } from './aiagentcontext.js';\nimport { SUPPORTED_LANGUAGES } from './const.js';\nimport { Widget, toWidget } from 'ckeditor5/src/widget.js';\n\nexport default class AiAgentUI extends Plugin {\n\tpublic PLACEHOLDER_TEXT_ID = 'slash-placeholder';\n\tpublic GPT_RESPONSE_LOADER_ID = 'gpt-response-loader';\n\tpublic GPT_RESPONSE_ERROR_ID = 'gpt-error';\n\n\tpublic static get pluginName() {\n\t\treturn 'AiAgentUI' as const;\n\t}\n\n\tpublic static get requires() {\n\t\treturn [ Widget ] as const;\n\t}\n\n\t/**\n\t * Initializes the AI Agent UI plugin, setting up UI components and event listeners.\n\t * This method is called when the plugin is loaded.\n\t */\n\tpublic init(): void {\n\t\ttry {\n\t\t\taiAgentContext.uiComponent = this;\n\t\t\t// Initialize UI components like buttons, placeholders, loaders, etc.\n\t\t\tthis.initializeUIComponents();\n\n\t\t\t// Set displays content in the appropriate language.\n\t\t\tthis.initializeUILanguage();\n\n\t\t\t// Attach event listeners for handling editor events and user interactions\n\t\t\tthis.attachListener();\n\t\t} catch ( error: any ) {\n\t\t\tconsole.error( error.message );\n\t\t}\n\t}\n\n\t/**\n\t * Initializes UI components such as placeholders, loaders, and buttons for the editor.\n\t */\n\tprivate initializeUIComponents(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\t// Register the inline-slash schema\n\t\teditor.model.schema.register( 'inline-slash', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tisInline: true,\n\t\t\tisObject: true,\n\t\t\tallowWhere: '$text',\n\t\t\tallowAttributes: [ 'class' ]\n\t\t} );\n\n\t\t// Allow the inline-slash element to have text inside it\n\t\teditor.model.schema.extend( '$text', {\n\t\t\tallowIn: 'inline-slash'\n\t\t} );\n\n\t\t// Set up upcast conversion for inline-slash\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: {\n\t\t\t\tname: 'inline-slash',\n\t\t\t\tattributes: [ 'class' ]\n\t\t\t},\n\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\treturn writer.createElement( 'inline-slash', {\n\t\t\t\t\tclass: viewElement.getAttribute( 'class' )\n\t\t\t\t} );\n\t\t\t},\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: {\n\t\t\t\tname: 'inline-slash',\n\t\t\t\tattributes: [ 'class' ]\n\t\t\t},\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\treturn writer.createContainerElement( 'inline-slash', {\n\t\t\t\t\tclass: modelElement.getAttribute( 'class' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tthis.addPlaceholder();\n\t\tthis.addLoader();\n\t\tthis.addGptErrorToolTip();\n\n\t\teditor.ui.componentFactory.add( 'aiAgentButton', locale => {\n\t\t\t// const dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst view = new ButtonView( locale );\n\t\t\t// const view =  dropdownView.buttonView;\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Ai agent' ),\n\t\t\t\ticon: aiAgentIcon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\t\t\tview.on( 'execute', () => {\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tconst position = this.editor.model.document.selection.getLastPosition();\n\t\t\t\t\tif ( position ) {\n\t\t\t\t\t\tconst inlineSlashContainer = writer.createElement( 'inline-slash', { class: 'ck-slash' } );\n\t\t\t\t\t\twriter.insertText( '/', inlineSlashContainer );\n\t\t\t\t\t\twriter.insert( inlineSlashContainer, position );\n\t\t\t\t\t\tconst newPosition = writer.createPositionAt( inlineSlashContainer, 'end' );\n\t\t\t\t\t\twriter.setSelection( newPosition );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\t\t\treturn view;\n\t\t} );\n\n\t\teditor.model.schema.register( 'ai-tag', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tisInline: true,\n\t\t\tisObject: true,\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'id' ]\n\t\t} );\n\n\t\teditor.model.schema.extend( '$block', { allowIn: 'ai-tag' } );\n\n\t\tthis.addCustomTagConversions();\n\t}\n\n\tprivate addCustomTagConversions(): void {\n\t\tconst editor = this.editor;\n\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: {\n\t\t\t\tname: 'ai-tag',\n\t\t\t\tattributes: [ 'id' ]\n\t\t\t},\n\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\treturn writer.createElement( 'ai-tag', {\n\t\t\t\t\tid: viewElement.getAttribute( 'id' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'ai-tag',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\treturn writer.createContainerElement( 'ai-tag', {\n\t\t\t\t\tid: modelElement.getAttribute( 'id' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'ai-tag',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tconst customTag = writer.createContainerElement( 'ai-tag', {\n\t\t\t\t\tid: modelElement.getAttribute( 'id' )\n\t\t\t\t} );\n\n\t\t\t\treturn toWidget( customTag, writer );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Initializes the UI language settings based on the editor's locale.\n\t * Displays an error tooltip if the current language is unsupported.\n\t */\n\tprivate initializeUILanguage(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst contentLanguageCode = editor.locale.contentLanguage;\n\t\tconst supportedLanguages = SUPPORTED_LANGUAGES;\n\t\tif ( !supportedLanguages.includes( contentLanguageCode ) ) {\n\t\t\tthis.showGptErrorToolTip( t( 'Unsupported language code' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Attaches event listeners to the editor for handling user interactions and content changes.\n\t */\n\tprivate attachListener(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.document.on( 'change:data', () => {\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.applyPlaceholderToCurrentLine();\n\t\t\t}, 10 );\n\t\t} );\n\n\t\tmodel.document.selection.on( 'change:range', () => {\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.applyPlaceholderToCurrentLine();\n\t\t\t}, 10 );\n\t\t\tconst modelRoot = editor.model.document.getRoot();\n\t\t\tif ( modelRoot ) {\n\t\t\t\tconst modelRange = editor.model.createRangeIn( modelRoot );\n\t\t\t\tconst itemsToRemove: Array<any> = [];\n\t\t\t\tfor ( const item of modelRange.getItems() ) {\n\t\t\t\t\tif ( item.is( 'element', 'inline-slash' ) && item.isEmpty ) {\n\t\t\t\t\t\titemsToRemove.push( item ); // Collect empty items\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove collected empty inline-slash elements\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\tfor ( const item of itemsToRemove ) {\n\t\t\t\t\t\twriter.remove( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\teditor.editing.view.document.on( 'scroll', () => {\n\t\t\tthis.hidePlaceHolder();\n\t\t} );\n\n\t\tdocument.addEventListener( 'scroll', () => {\n\t\t\tthis.hidePlaceHolder();\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the placeholder to the current line in the editor if it is empty.\n\t * Hides the placeholder if the line is not empty.\n\t */\n\tpublic applyPlaceholderToCurrentLine(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tconst block = modelSelection.getFirstPosition()?.parent;\n\t\tif ( block && block.isEmpty ) {\n\t\t\tthis.hidePlaceHolder();\n\n\t\t\tsetTimeout( async () => {\n\t\t\t\tif ( block.is( 'element' ) ) {\n\t\t\t\t\tconst rect = await this.getRectDomOfGivenModelElement(\n\t\t\t\t\t\tblock\n\t\t\t\t\t);\n\t\t\t\t\tif ( rect ) {\n\t\t\t\t\t\tthis.showPlaceHolder( rect );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 100 );\n\t\t} else {\n\t\t\tthis.hidePlaceHolder();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the DOM rectangle of a given model element.\n\t *\n\t * @param element - The model element for which to get the DOM rectangle.\n\t * @returns A promise that resolves to the DOMRect of the element, or null if not found.\n\t */\n\tprivate async getRectDomOfGivenModelElement(\n\t\telement: any\n\t): Promise<DOMRect | null | undefined> {\n\t\tconst editor = this.editor;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\n\t\tconst equivalentView = mapper.toViewElement( element );\n\n\t\tif ( equivalentView ) {\n\t\t\tconst domElement = view.domConverter.mapViewToDom( equivalentView );\n\t\t\tif ( domElement ) {\n\t\t\t\treturn domElement.getBoundingClientRect();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds a placeholder element to the document body for user interaction.\n\t */\n\tprivate addPlaceholder(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst placeholder = document.createElement( 'p' );\n\t\tplaceholder.id = this.PLACEHOLDER_TEXT_ID;\n\t\tplaceholder.onclick = () => {\n\t\t\teditor.focus();\n\t\t};\n\t\tplaceholder.classList.add( 'place-holder' );\n\t\tplaceholder.textContent = t( 'Type / to request AI content' );\n\t\tdocument.body.appendChild( placeholder );\n\t}\n\n\t/**\n\t * Shows the placeholder at the specified position.\n\t *\n\t * @param rect - The DOMRect object defining the position to show the placeholder.\n\t */\n\tprivate showPlaceHolder( rect?: DOMRect ): void {\n\t\tconst ele = document.getElementById( this.PLACEHOLDER_TEXT_ID );\n\t\tconst isReadOnlyMode = this.editor.isReadOnly;\n\t\tif ( ele && rect && !isReadOnlyMode ) {\n\t\t\tele.classList.add( 'show-place-holder' );\n\t\t\tele.style.left = `${ rect.left }px`;\n\t\t\tele.style.top = `${ rect.top }px`;\n\t\t} else if ( ele ) {\n\t\t\tele.classList.remove( 'show-place-holder' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the placeholder element from the document.\n\t */\n\tprivate hidePlaceHolder(): void {\n\t\tconst ele = document.getElementById( this.PLACEHOLDER_TEXT_ID );\n\t\tif ( ele ) {\n\t\t\tele.classList.remove( 'show-place-holder' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds a loader element to the document body for indicating processing.\n\t */\n\tprivate addLoader(): void {\n\t\tconst loaderElement = document.createElement( 'div' );\n\t\tloaderElement.id = this.GPT_RESPONSE_LOADER_ID;\n\t\tloaderElement.classList.add( 'gpt-loader' );\n\t\tdocument.body.appendChild( loaderElement );\n\t}\n\n\t/**\n\t * Shows the loader at the specified position.\n\t *\n\t * @param rect - The DOMRect object defining the position to show the loader.\n\t */\n\tpublic showLoader( rect?: DOMRect ): void {\n\t\tconst ele = document.getElementById( this.GPT_RESPONSE_LOADER_ID );\n\t\tif ( ele && rect ) {\n\t\t\tele.style.left = `${ rect.left + 10 }px`;\n\t\t\tele.style.top = `${ rect.top + 10 }px`;\n\t\t\tele.classList.add( 'show-gpt-loader' );\n\t\t} else if ( ele ) {\n\t\t\tele.classList.remove( 'show-gpt-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the loader element from the document.\n\t */\n\tpublic hideLoader(): void {\n\t\tconst ele = document.getElementById( this.GPT_RESPONSE_LOADER_ID );\n\t\tif ( ele ) {\n\t\t\tele.classList.remove( 'show-gpt-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds an error tooltip element to the document body for displaying error messages.\n\t */\n\tprivate addGptErrorToolTip(): void {\n\t\tconst tooltipElement = document.createElement( 'p' );\n\t\ttooltipElement.id = this.GPT_RESPONSE_ERROR_ID;\n\t\ttooltipElement.classList.add( 'response-error' );\n\t\tdocument.body.appendChild( tooltipElement );\n\t}\n\n\t/**\n\t * Displays an error tooltip with the specified message.\n\t *\n\t * @param message - The error message to display in the tooltip.\n\t */\n\tpublic showGptErrorToolTip( message: string ): void {\n\t\tconsole.log( 'Showing error message...', message );\n\t\tconst editor = this.editor;\n\t\tconst view = editor?.editing?.view?.domRoots?.get( 'main' );\n\t\tconst tooltipElement = document.getElementById(\n\t\t\tthis.GPT_RESPONSE_ERROR_ID\n\t\t);\n\n\t\tconst editorRect = view?.getBoundingClientRect();\n\t\tif ( tooltipElement && editorRect ) {\n\t\t\ttooltipElement.classList.add( 'show-response-error' );\n\t\t\ttooltipElement.textContent = message;\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.hideGptErrorToolTip();\n\t\t\t}, 2000 );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the error tooltip element from the document.\n\t */\n\tprivate hideGptErrorToolTip(): void {\n\t\tconst tooltipElement = document.getElementById(\n\t\t\tthis.GPT_RESPONSE_ERROR_ID\n\t\t);\n\t\tif ( tooltipElement ) {\n\t\t\ttooltipElement.classList.remove( 'show-response-error' );\n\t\t}\n\t}\n}\n","import { Command } from 'ckeditor5/src/core.js';\nimport type AiAgentService from './aiagentservice.js';\nimport type { Editor } from 'ckeditor5';\nexport default class AiAgentCommand extends Command {\n\tprivate aiAgentService: AiAgentService;\n\n\t/**\n\t * Creates an instance of the AiAgentCommand.\n\t *\n\t * @param editor - The editor instance to which this command belongs.\n\t * @param aiAgentService - The service instance that handles AI assist functionality.\n\t */\n\tconstructor( editor: Editor, aiAgentService: AiAgentService ) {\n\t\tsuper( editor );\n\t\tthis.aiAgentService = aiAgentService;\n\t}\n\n\t/**\n\t * Checks whether the command can be executed based on the current selection.\n\t *\n\t * @returns A boolean indicating if the command can be executed.\n\t */\n\tpublic override refresh(): void {\n\t\t// Enable the command when the selection is in an empty block or at the beginning of a block\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Executes the AI assist command, processing the user's input and interacting with the AI service.\n\t *\n\t * @param options - An optional parameter for additional execution options.\n\t */\n\tpublic override async execute(): Promise<void> {\n\t\tawait this.aiAgentService.handleSlashCommand();\n\t}\n}\n","import sbd from 'sbd';\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { MarkdownContent } from '../type-identifiers.js';\nimport { aiAgentContext } from '../aiagentcontext.js';\nexport class PromptHelper {\n\tprivate editor: Editor;\n\tprivate contextSize: number;\n\tprivate responseOutputFormat: Array<string>;\n\tprivate responseContextData: Array<any>;\n\tprivate responseFilters: Array<any>;\n\tprivate debugMode: boolean;\n\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tconst config = editor.config.get( 'aiAgent' )!;\n\n\t\tthis.contextSize = config.contextSize!;\n\t\tthis.responseOutputFormat = config.promptSettings?.outputFormat ?? [];\n\t\tthis.responseContextData = config.promptSettings?.contextData ?? [];\n\t\tthis.responseFilters = config.promptSettings?.filters ?? [];\n\t\tthis.debugMode = config.debugMode ?? false;\n\t}\n\n\t/**\n\t * Constructs the system prompt that guides the AI in generating responses.\n\t *\n\t * This method assembles a comprehensive set of instructions and context\n\t * that the AI will utilize to formulate responses based on user input\n\t * and the provided content, ensuring adherence to specified rules and formats.\n\t *\n\t * @param isInlineResponse - A boolean indicating whether the response should be inline.\n\t * @returns A string containing the formatted system prompt for the AI.\n\t*/\n\tpublic getSystemPrompt( isInlineResponse: boolean = false ): string {\n\t\tconst corpus: Array<string> = [];\n\t\tcorpus.push(\n\t\t\t`You will be provided with a partially written article with \"\"\"@@@cursor@@@\"\"\" somewhere \n\t\t\tunder a CONTEXT section, user input under a TASK section, and sometimes there will be articles \n\t\t\t(delimited with marked-up language) separated by Starting Markdown Content \\${ number } and \n\t\t\tEnding Markdown Content \\${ index } with certain instructions to follow while generating a response \n\t\t\tunder an INSTRUCTION section`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`If there is an article with \"\"\"Stating Markdown Content\"\"\", your task is to \n\t\t\tuse that provided information solely to respond to the user request in the TASK section.`\n\t\t);\n\t\tcorpus.push( 'Follow these step-by-step instructions to respond to user inputs:' );\n\t\tcorpus.push(\n\t\t\t`Step 1 - Summarize information under the CONTEXT section, set a tone for the article, and \n\t\t\tlater use that summarized information to generate a response`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`Step 2: If there is an article with \"\"\"Stating Markdown Content\"\"\", \n\t\t\tbreak it into derived sections and eliminate unnecessary information \n\t\t\tthat does not relate to the context and user prompt.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t'Final Step - use all summarized information to respond to user input under the TASK section'\n\t\t);\n\t\tcorpus.push( 'While generating the response, adhere to the following rules:' );\n\t\tcorpus.push(\n\t\t\t`1. Provide only the new text content that should replace \"@@@cursor@@@\" based on the context above, \n\t\t\tensuring that the response must primarily based on the request.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`2. Avoid including any part of the context in the output at any cost, \n\t\t\texcept for necessary glimpses that enhance the response.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`3. Ensure response adheres to the specified tone or style, such as \n\t\t\tformal, informal, or technical, as appropriate for the context.`\n\t\t);\n\t\tcorpus.push( '4. Do not use any markdown formatting in your response. (e.g., **, ##, ###, ---, ===, ____).' );\n\t\tcorpus.push(\n\t\t\t`5. Use a relaxed, formal or informal tone based on the summary of context with lots of personal touches. \n\t\t\tFeel free to include spontaneous thoughts, offhand comments, or quirky observations.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`6. Vary sentence lengths and styles—include fragments, casual interjections, \n\t\t\tand minor grammar slips, but avoid spelling mistakes.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t'7. Add in personal anecdotes or emotional reactions to make it sound like a genuine conversation.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'8. Avoid overly polished language or structured sentences, aim for a natural and solely human-like tone.'\n\t\t);\n\t\tif ( isInlineResponse ) {\n\t\t\tcorpus.push(\n\t\t\t\t`9: Determine from the context, task, and the position of the @@@cursor@@@ whether the request \n\t\t\t\tinvolves list items, table cells, or inline content.\n\t\t\t\t- List items: Format each item as <li> within an <ol> or <ul> as appropriate.\n\t\t\t\t- Table cells: Present each item in plain text, wrapping it within <p> tags.\n\t\t\t\t- Inline content: Wrap entire response in a single <p> tag, ensuring it fits seamlessly within the existing paragraph or \n\t\t\t\tsentence structure where the @@@cursor@@@ is located.\n\t\t\t\tStrictly adherence to these rules is mandatory to avoid errors, based on where the @@@cursor@@@ is placed within content.`\n\t\t\t);\n\t\t}\n\n\t\tcorpus.push( 'Above are the rules apply every time, but below will only be applied if markdown content is present' );\n\t\tcorpus.push(\n\t\t\t'1. Extract each content as plain text without any special formatting, emphasis, or markdown'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'2. The response should synthesize information from both the editor content ' +\n\t\t\t'and the fetched sources, maintaining a balance between them.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'3. Highlight key points from the fetched sources while ensuring that ' +\n\t\t\t'the context from the editor is acknowledged and integrated where relevant.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'4. Clearly differentiate between the information derived from the editor ' +\n\t\t\t'content and that from the fetched sources to avoid confusion.'\n\t\t);\n\n\t\tcorpus.push( 'When generating content, adhere to the following HTML-specific rules:' );\n\t\tcorpus.push( '1. Generate an HTML snippet, not a full HTML document.' );\n\t\tcorpus.push( '2. You are an HTML generator. When providing HTML code, ensure it follows standard HTML norms and best practices.' );\n\t\tcorpus.push( '4. Block-level elements (e.g., <p>, <div>, <section>) must not contain other block-level elements.' );\n\t\tcorpus.push( '5. Ensure valid nesting of elements.' );\n\t\tcorpus.push( '6. Use the following allowed HTML tags:' );\n\t\tcorpus.push( `${ this.getAllowedHtmlTags().join( ', ' ) }` );\n\t\tcorpus.push( '7. Do not include any HTML, HEAD, or BODY tags.' );\n\t\tcorpus.push( '8. Ensure all HTML tags are properly closed and nested.' );\n\t\tcorpus.push( '9. Do not include any HTML, HEAD, or BODY tags.' );\n\t\tcorpus.push( '10. Avoid using inline styles or class attributes unless specifically requested.' );\n\t\tcorpus.push( '11. Provide clean, valid HTML that adheres to best practices and is ready for use in web development.' );\n\t\tcorpus.push( '12. Beginning word of response must be a valid html tag' );\n\n\t\tif ( this.getAllowedHtmlTags().includes( 'img' ) ) {\n\t\t\tcorpus.push( '13. For image elements, follow these strict formatting rules:' );\n\t\t\tcorpus.push( '    a. Every <img> tag MUST include both src and alt attributes' );\n\t\t\tcorpus.push( '    b. Format the src URL exactly as: https://placehold.co/600x400?text=[alt_text]' );\n\t\t\tcorpus.push( '    c. The [alt_text] in the src URL must:' );\n\t\t\tcorpus.push( '       - Be identical to the alt attribute value' );\n\t\t\tcorpus.push( '       - Replace spaces with + characters' );\n\t\t\tcorpus.push( '       - Exclude any special characters' );\n\t\t\tcorpus.push( '    d. Example:' );\n\t\t\tcorpus.push( '       <img src=\"https://placehold.co/600x400?text=Beautiful+Sunset\" alt=\"Beautiful Sunset\">' );\n\t\t}\n\n\t\t// Join all instructions into a single formatted string.\n\t\tconst systemPrompt = corpus.join( '\\n' );\n\n\t\t// Log the system prompt if debug mode is enabled\n\t\tif ( this.debugMode ) {\n\t\t\tconsole.group( 'AiAgent System Prompt Debug' );\n\t\t\tconsole.log( 'System Prompt:' );\n\t\t\tconsole.log( systemPrompt );\n\t\t\tconsole.groupEnd();\n\t\t}\n\n\t\treturn systemPrompt;\n\t}\n\n\t/**\n\t * Formats the final prompt to be sent to the GPT model, including context and instructions.\n\t *\n\t * @param request - The user's request string.\n\t * @param context - The trimmed context string.\n\t * @param markDownContents - An array of MarkdownContent objects for additional context.\n\t * @param isEditorEmpty - A boolean indicating if the editor is empty.\n\t * @returns The formatted prompt string.\n\t */\n\tpublic formatFinalPrompt(\n\t\trequest: string,\n\t\tcontext: string,\n\t\tmarkDownContents: Array<MarkdownContent>,\n\t\tisEditorEmpty: boolean\n\t): string {\n\t\tconst editor = this.editor;\n\t\tconst contentLanguageCode = editor.locale.contentLanguage;\n\t\tconst corpus = [];\n\n\t\t// Context and Task\n\t\tcorpus.push( 'CONTEXT:' );\n\t\tcorpus.push( `\\n\"\"\"\\n${ context }\\n\"\"\"\\n` );\n\t\tcorpus.push( '\\n\\nTASK:\\n\\n' );\n\t\tcorpus.push( `\"\"\"\\n${ request }\\n\"\"\"\\n` );\n\n\t\t// Markdown Content\n\t\tif ( markDownContents.length ) {\n\t\t\tcorpus.push(\n\t\t\t\t'Refer to following markdown content as a source of information, but generate new text that fits the given context & task.'\n\t\t\t);\n\t\t\tmarkDownContents.forEach( ( markdown, index ) => {\n\t\t\t\tcorpus.push(\n\t\t\t\t\t`\\n\\n------------ Stating Markdown Content ${ index + 1 } ------------\\n\\n`\n\t\t\t\t);\n\t\t\t\tcorpus.push( markdown.content );\n\t\t\t\tcorpus.push(\n\t\t\t\t\t`\\n\\n------------ Ending Markdown Content ${ index + 1 } ------------\\n\\n`\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\t// Instructions\n\t\tcorpus.push( '\\n\\nINSTRUCTIONS:\\n\\n' );\n\t\tcorpus.push( `The response must follow the language code - ${ contentLanguageCode }.` );\n\n\t\t// Response Output Format\n\t\tif ( this.responseOutputFormat.length ) {\n\t\t\tcorpus.push( ...this.responseOutputFormat );\n\t\t}\n\n\t\t// Markdown Content Usage\n\t\tif ( markDownContents.length ) {\n\t\t\tcorpus.push(\n\t\t\t\t'Use information from provided markdown content to generate new text, but do not copy it verbatim.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'Ensure the new text flows naturally with the existing context and integrates smoothly.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'Do not use any markdown formatting in your response. ' +\n\t\t\t\t'specially for title and list item like \"\"\"**Performance**\"\"\" is not acceptable where as \"\"\"performance\"\"\" is.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'consider whole markdown of single source as content and then generate % content requested'\n\t\t\t);\n\t\t}\n\n\t\t// Response Filters\n\t\tif ( this.responseFilters.length ) {\n\t\t\tcorpus.push( ...this.responseFilters );\n\t\t} else {\n\t\t\tconst defaultFilterInstructions = [\n\t\t\t\t'The response should directly follow the context, avoiding any awkward transitions or noticeable gaps.'\n\t\t\t];\n\t\t\tcorpus.push( ...defaultFilterInstructions );\n\t\t}\n\n\t\t// Context-Specific Instructions\n\t\tif ( !isEditorEmpty ) {\n\t\t\tconst defaultContextInstructions = [\n\t\t\t\t'Ensure the inserted content maintains a seamless connection with the surrounding text,',\n\t\t\t\t'making the transition smooth and natural.',\n\t\t\t\t'Do not modify the original text except to replace the \"@@@cursor@@@\" placeholder with the generated content.'\n\t\t\t];\n\t\t\tcorpus.push( ...defaultContextInstructions );\n\t\t}\n\t\tif ( this.responseContextData.length ) {\n\t\t\tcorpus.push( ...this.responseContextData );\n\t\t}\n\n\t\t// Debugging Information\n\t\tif ( this.debugMode ) {\n\t\t\tconsole.group( 'AiAgent Prompt Debug' );\n\t\t\tconsole.log( 'User Prompt:', request );\n\t\t\tconsole.log( 'Generated GPT Prompt:' );\n\t\t\tconsole.log( corpus.join( '\\n' ) );\n\t\t\tconsole.groupEnd();\n\t\t}\n\n\t\t// Join all instructions into a single formatted string.\n\t\treturn corpus.join( '\\n' );\n\t}\n\n\t/**\n\t * Trims the context around the user's prompt to create a suitable context for the AI model.\n\t * This method identifies the position of the user's prompt within the provided text and extracts\n\t * the surrounding context, placing a cursor placeholder where the prompt is located.\n\t *\n\t * @param prompt - The user's prompt string to locate within the context.\n\t * @param promptContainerText - The text container in which the prompt is located (optional).\n\t * @returns The trimmed context string with a cursor placeholder indicating the prompt's position.\n\t*/\n\tpublic trimContext( prompt: string, promptContainerText: string = '' ): string {\n\t\tlet contentBeforePrompt = '';\n\t\tlet contentAfterPrompt = '';\n\t\tconst splitText = promptContainerText ?? prompt;\n\t\tconst editor = this.editor;\n\t\tconst view = editor?.editing?.view?.domRoots?.get( 'main' );\n\t\tconst context = view?.innerText ?? '';\n\n\t\tconst matchIndex = context.indexOf( splitText );\n\t\tconst nextEnterIndex = context.indexOf( '\\n', matchIndex );\n\t\tconst firstNewlineIndex = nextEnterIndex !== -1 ? nextEnterIndex : matchIndex + splitText.length;\n\t\tconst beforeNewline = context.substring( 0, firstNewlineIndex );\n\t\tconst afterNewline = context.substring( firstNewlineIndex + 1 );\n\t\tconst contextParts = [ beforeNewline, afterNewline ];\n\n\t\tconst allocatedEditorContextToken = Math.floor( this.contextSize * 0.3 );\n\t\tif ( contextParts.length > 1 ) {\n\t\t\tif ( contextParts[ 0 ].length < contextParts[ 1 ].length ) {\n\t\t\t\tcontentBeforePrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 0 ],\n\t\t\t\t\tallocatedEditorContextToken / 2,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tcontentAfterPrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 1 ],\n\t\t\t\t\tallocatedEditorContextToken - contentBeforePrompt.length / 4\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcontentAfterPrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 1 ],\n\t\t\t\t\tallocatedEditorContextToken / 2\n\t\t\t\t);\n\t\t\t\tcontentBeforePrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 0 ],\n\t\t\t\t\tallocatedEditorContextToken - contentAfterPrompt.length / 4,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Combine the trimmed context with the cursor placeholder\n\t\tconst escapedPrompt = prompt.replace( /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&' ); // Escapes special characters\n\t\tcontentBeforePrompt = contentBeforePrompt.trim().replace( new RegExp( escapedPrompt.slice( 1 ) ), '@@@cursor@@@' );\n\t\tconst trimmedContext = `${ contentBeforePrompt }\\n${ contentAfterPrompt }`;\n\t\treturn trimmedContext.trim();\n\t}\n\n\t/**\n\t * Allocates tokens to the fetched content based on the available limit and the user's prompt.\n\t *\n\t * @param prompt - The user's prompt string.\n\t * @param fetchedContent - An array of MarkdownContent objects containing fetched content.\n\t * @returns An array of MarkdownContent objects with calculated tokenToRequest values.\n\t */\n\tpublic allocateTokensToFetchedContent(\n\t\tprompt: string,\n\t\tfetchedContent: Array<MarkdownContent>\n\t): Array<MarkdownContent> {\n\t\tconst editorContent =\n\t\t\tthis.editor?.editing?.view?.domRoots?.get( 'main' )?.innerText ?? '';\n\t\tconst editorToken = Math.min( Math.floor( this.contextSize * 0.3 ), this.countTokens( editorContent ) );\n\t\tlet availableLimit = this.contextSize - editorToken;\n\n\t\tfetchedContent = fetchedContent\n\t\t\t.map( content => ( {\n\t\t\t\t...content,\n\t\t\t\tavailableToken: this.countTokens( content.content )\n\t\t\t} ) )\n\t\t\t.sort( ( a, b ) => ( a.availableToken ?? 0 ) - ( b.availableToken ?? 0 ) );\n\n\t\tlet maxTokenFromEachURL = availableLimit / fetchedContent.length;\n\n\t\treturn fetchedContent.map( ( content, index ) => {\n\t\t\tif (\n\t\t\t\tcontent.availableToken &&\n\t\t\t\tcontent.availableToken <= maxTokenFromEachURL\n\t\t\t) {\n\t\t\t\tcontent.tokenToRequest = content.availableToken;\n\t\t\t\tavailableLimit -= content.availableToken;\n\t\t\t} else if ( content.availableToken ) {\n\t\t\t\tcontent.tokenToRequest = maxTokenFromEachURL;\n\t\t\t\tavailableLimit -= maxTokenFromEachURL;\n\t\t\t}\n\t\t\tmaxTokenFromEachURL =\n\t\t\t\tavailableLimit / ( fetchedContent.length - ( index + 1 ) );\n\t\t\tif ( content.tokenToRequest ) {\n\t\t\t\tcontent.content = this.trimLLMContentByTokens( content.content, content.tokenToRequest );\n\t\t\t}\n\t\t\treturn content;\n\t\t} );\n\t}\n\n\t/**\n\t * Generates Markdown content for an array of URLs by fetching their content.\n\t *\n\t * @param urls - An array of URLs to fetch content from.\n\t * @returns A promise that resolves to an array of MarkdownContent objects.\n\t */\n\tpublic async generateMarkDownForUrls(\n\t\turls: Array<string>\n\t): Promise<Array<MarkdownContent>> {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tlet errorMsg: string | undefined;\n\t\tconst markDownContents = await Promise.all(\n\t\t\turls.map( async url => {\n\t\t\t\tconst content = await this.fetchUrlContent( url );\n\t\t\t\treturn { content, url };\n\t\t\t} )\n\t\t);\n\n\t\tconst emptyContent = markDownContents.filter(\n\t\t\t( content ): content is MarkdownContent => !content?.content\n\t\t);\n\t\tif ( emptyContent.length ) {\n\t\t\tconst urlStr = emptyContent?.map( content => content?.url ).join( ',' );\n\t\t\terrorMsg = t( 'Failed to fetch content of : %0', urlStr );\n\t\t\tif ( errorMsg ) {\n\t\t\t\taiAgentContext.showError( errorMsg );\n\t\t\t}\n\t\t\tthrow new Error( 'Unable to fetch content for few urls' );\n\t\t}\n\t\treturn markDownContents.filter(\n\t\t\t( content ): content is MarkdownContent => content !== null\n\t\t);\n\t}\n\n\t/**\n\t * Fetches the content of a given URL and returns it as a string.\n\t *\n\t * @param url - The URL to fetch content from.\n\t * @returns A promise that resolves to the fetched content as a string.\n\t * @throws Will throw an error if the URL is invalid or if the fetch fails.\n\t */\n\tpublic async fetchUrlContent( url: string ): Promise<string> {\n\t\tconst urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n\t\tconst trimmedUrl = url.trim();\n\n\t\tif ( !urlRegex.test( trimmedUrl ) ) {\n\t\t\tthrow new Error( 'Invalid URL' );\n\t\t}\n\n\t\ttry {\n\t\t\t// Use a regular expression to remove hidden characters\n\t\t\tconst cleanedUrl = trimmedUrl.replace( /[^\\x20-\\x7E]/g, '' );\n\t\t\tconst requestURL = `https://r.jina.ai/${ cleanedUrl.trim() }`;\n\t\t\tconst response = await fetch( requestURL.trim(), {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-With-Generated-Alt': 'true'\n\t\t\t\t}\n\t\t\t} );\n\t\t\tif ( !response.ok ) {\n\t\t\t\tthrow new Error( `HTTP error! status: ${ response.status }` );\n\t\t\t}\n\t\t\tconst content = await response.text();\n\n\t\t\t// Updated error matching\n\t\t\tif ( content.includes( 'Warning: Target URL returned error' ) ) {\n\t\t\t\tthrow new Error( `Target URL (${ trimmedUrl }) returned an error` );\n\t\t\t}\n\n\t\t\tif ( content.trim().length === 0 ) {\n\t\t\t\tthrow new Error( 'Empty content received' );\n\t\t\t}\n\n\t\t\treturn content.replace( /\\(https?:\\/\\/[^\\s]+\\)/g, '' ).replace( /^\\s*$/gm, '' ).trim();\n\t\t} catch ( error ) {\n\t\t\tconsole.error( `Failed to fetch content: ${ url }`, error );\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Counts the number of tokens in the provided content string.\n\t *\n\t * @param content - The content string to count tokens in.\n\t * @returns The number of tokens in the content.\n\t */\n\tpublic countTokens( content: string ): number {\n\t\tif ( !content || typeof content !== 'string' ) {\n\t\t\treturn 0;\n\t\t}\n\t\t// Normalize the content by trimming and reducing multiple whitespaces.\n\t\tconst normalizedContent = content\n\t\t\t.trim()\n\t\t\t.replace( /\\s+/g, ' ' );\n\t\t// Approximate tokens by breaking words, contractions, and common punctuation marks.\n\t\tconst tokens = normalizedContent.match( /\\b\\w+('\\w+)?\\b|[.,!?;:\"(){}[\\]]/g ) || [];\n\n\t\t// Heuristic: Long words (over 10 characters) are likely to be split into multiple tokens.\n\t\t// GPT often breaks down long words into smaller subword chunks.\n\t\tlet approxTokenCount = 0;\n\t\ttokens.forEach( token => {\n\t\t\t// Break long words into chunks to approximate GPT subword tokenization.\n\t\t\tif ( token.length > 10 ) {\n\t\t\t\tapproxTokenCount += Math.ceil( token.length / 4 ); // Approximation: 4 characters per token.\n\t\t\t} else {\n\t\t\t\tapproxTokenCount += 1;\n\t\t\t}\n\t\t} );\n\n\t\treturn approxTokenCount;\n\t}\n\n\t/**\n\t * Trims the LLM content by tokens while ensuring that sentences or other structures (e.g., bullet points, paragraphs)\n\t * are not clipped mid-way.\n\t *\n\t * @param content - The LLM-generated content string to trim.\n\t * @param maxTokens - The maximum number of tokens allowed.\n\t * @returns The trimmed content string.\n\t */\n\tpublic trimLLMContentByTokens( content: string, maxTokens: number ): string {\n\t\tconst elements = content.split( '\\n' );\n\t\tlet accumulatedTokens = 0;\n\t\tlet trimmedContent = '';\n\n\t\tfor ( const element of elements ) {\n\t\t\tconst elementTokenCount = this.countTokens( element );\n\t\t\tif ( accumulatedTokens + elementTokenCount > maxTokens ) {\n\t\t\t\tbreak; // Stop if adding this element would exceed the token limit.\n\t\t\t}\n\t\t\taccumulatedTokens += elementTokenCount;\n\t\t\ttrimmedContent += element + '\\n'; // Add the whole structural element.\n\t\t}\n\n\t\treturn trimmedContent;\n\t}\n\n\t/**\n\t * Retrieves the allowed HTML tags based on the CKEditor schema.\n\t *\n\t * @returns An array of allowed HTML tags.\n\t */\n\tpublic getAllowedHtmlTags(): Array<string> {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst definitions = schema.getDefinitions();\n\t\tconst schemaNodes = Object.keys( definitions ).sort();\n\n\t\t// Map of CKEditor nodes to HTML tags\n\t\tconst nodeToHtmlMap: Record<string, string> = {\n\t\t\tblockQuote: 'blockquote',\n\t\t\tcaption: 'figcaption',\n\t\t\tcodeBlock: 'pre',\n\t\t\theading1: 'h1',\n\t\t\theading2: 'h2',\n\t\t\theading3: 'h3',\n\t\t\timageBlock: 'img',\n\t\t\timageInline: 'img',\n\t\t\tparagraph: 'p',\n\t\t\ttable: 'table',\n\t\t\ttableCell: 'td',\n\t\t\ttableRow: 'tr',\n\t\t\t$listItem: 'li',\n\t\t\thorizontalLine: 'hr'\n\t\t};\n\n\t\t// Map text attributes to HTML tags\n\t\tconst textAttributeToHtmlMap: Record<string, string> = {\n\t\t\tbold: 'strong',\n\t\t\titalic: 'em',\n\t\t\tcode: 'code',\n\t\t\tstrikethrough: 's',\n\t\t\tsubscript: 'sub',\n\t\t\tsuperscript: 'sup',\n\t\t\tunderline: 'u',\n\t\t\tlinkHref: 'a'\n\t\t};\n\n\t\t// Collect allowed tags\n\t\tconst allowedTags = new Set<string>();\n\n\t\t// Add tags from node mappings\n\t\tschemaNodes.forEach( node => {\n\t\t\tif ( node in nodeToHtmlMap ) {\n\t\t\t\tallowedTags.add( nodeToHtmlMap[ node ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Add tags from text attributes\n\t\tconst textDefinition = definitions.$text;\n\t\tif ( textDefinition && textDefinition.allowAttributes ) {\n\t\t\ttextDefinition.allowAttributes.forEach( ( attr: string ) => {\n\t\t\t\tif ( attr in textAttributeToHtmlMap ) {\n\t\t\t\t\tallowedTags.add( textAttributeToHtmlMap[ attr ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// If listItem is present, add ul and ol\n\t\tif ( allowedTags.has( 'li' ) ) {\n\t\t\tallowedTags.add( 'ul' );\n\t\t\tallowedTags.add( 'ol' );\n\t\t}\n\n\t\t// Sort and return the unique allowed tags\n\t\treturn Array.from( allowedTags ).sort();\n\t}\n\n\t/**\n\t * Extracts a portion of content based on the specified context size and direction.\n\t *\n\t * @param contentAfterPrompt - The content string to extract from.\n\t * @param contextSize - The maximum size of the context to extract.\n\t * @param reverse - A boolean indicating whether to extract in reverse order (default is false).\n\t * @returns The extracted content string.\n\t */\n\tpublic extractEditorContent(\n\t\tcontentAfterPrompt: string,\n\t\tcontextSize: number,\n\t\treverse: boolean = false\n\t): string {\n\t\tlet trimmedContent = '';\n\t\tlet charCount = 0;\n\t\t// Tokenize the content into sentences using the sbd library\n\t\tconst sentences = sbd.sentences( contentAfterPrompt, {\n\t\t\tpreserve_whitespace: true,\n\t\t\thtml_boundaries: true,\n\t\t\tallowed_tags: [ 'blockquote', 'figcaption', 'pre', 'h2', 'h1', 'h3', 'img', 'p', 'table', 'td', 'tr', 'li', 'hr', 'br' ]\n\t\t} );\n\n\t\t// Iterate over the sentences based on the direction\n\t\tconst iterator = reverse ? sentences.reverse() : sentences;\n\n\t\tfor ( const sentence of iterator ) {\n\t\t\tconst sentenceLength = sentence.length;\n\t\t\t// Check if adding this sentence would exceed the context size\n\t\t\tif ( ( charCount + sentenceLength ) / 4 <= contextSize ) {\n\t\t\t\ttrimmedContent = reverse ?\n\t\t\t\t\tsentence + trimmedContent :\n\t\t\t\t\ttrimmedContent + sentence;\n\t\t\t\tcharCount += sentenceLength;\n\t\t\t} else {\n\t\t\t\tbreak; // Stop if adding the next sentence would exceed the context size\n\t\t\t}\n\t\t}\n\n\t\t// Trim to remove any trailing whitespace and return the final trimmed content\n\t\treturn trimmedContent.trim();\n\t}\n}\n","import type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element, Model, Position } from 'ckeditor5/src/engine.js';\n\nexport class HtmlParser {\n\tprivate editor: Editor;\n\tprivate model: Model;\n\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tthis.model = editor.model;\n\t}\n\n\t/**\n\t * Inserts simple HTML content into the editor.\n\t *\n\t * @param html - The HTML string to be inserted into the editor.\n\t * @returns A promise that resolves when the HTML has been inserted.\n\t */\n\tpublic async insertSimpleHtml( html: string ): Promise<void> {\n\t\tconsole.log( 'Attempting to insert simple HTML:', html );\n\t\tconst viewFragment = this.editor.data.processor.toView( html );\n\t\tconst modelFragment = this.editor.data.toModel( viewFragment, '$root' );\n\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\n\t\tlet insertionPosition = selection.getLastPosition();\n\t\tconst lastInsertedChild = modelFragment.getChild( modelFragment.childCount - 1 );\n\n\t\tconst currentChildIndex = selection.getLastPosition()?.path[ 0 ];\n\t\tconst lastUpdatedElementInRoot = root?.getChild( currentChildIndex ?? 0 );\n\n\t\tthis.model.change( writer => {\n\t\t\tif ( lastUpdatedElementInRoot?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElementInRoot.isEmpty ?\n\t\t\t\t\twriter.createPositionAt( lastUpdatedElementInRoot, 'end' ) :\n\t\t\t\t\twriter.createPositionAfter( lastUpdatedElementInRoot );\n\t\t\t}\n\n\t\t\tif ( insertionPosition && root ) {\n\t\t\t\t// Insert element to current selection\n\t\t\t\twriter.setSelection( insertionPosition );\n\t\t\t\tthis.model.insertContent( modelFragment, insertionPosition );\n\n\t\t\t\t// Check if it required to add break to current context of list etc.\n\t\t\t\t// More to will be added during testing any edge case\n\t\t\t\tlet isBreakElementReq = lastInsertedChild?.getAttribute( 'listItemId' );\n\t\t\t\tif ( lastInsertedChild?.is( 'element' ) ) {\n\t\t\t\t\tisBreakElementReq = isBreakElementReq || lastInsertedChild.name === 'table';\n\t\t\t\t}\n\t\t\t\tif ( isBreakElementReq && lastInsertedChild ) {\n\t\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t\t\t\t\twriter.insert( paragraph, writer.createPositionAfter( lastInsertedChild ) );\n\t\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t\t} else if ( lastInsertedChild ) {\n\t\t\t\t\twriter.setSelection( writer.createPositionAfter( lastInsertedChild ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Maintain a delay to simulate asynchronous behavior\n\t\tawait new Promise( resolve => setTimeout( resolve, 100 ) );\n\t}\n\n\t/**\n\t * Inserts HTML content as text into the editor.\n\t *\n\t * @param content - The HTML element containing the text to be inserted.\n\t * @param position - The position at which to insert the text (optional).\n\t * @param stream - Indicates whether to insert text in a streaming manner (default is false).\n\t * @param shouldAddBreakAtEnd - Indicates whether to add a paragraph break at the end of the inserted content (default is false).\n\t * @returns A promise that resolves when the text has been inserted.\n\t *\n\t * This method processes the provided HTML element, converting it to a model fragment,\n\t * and inserts it into the editor at the specified position. If streaming is enabled,\n\t * elements are inserted one at a time, allowing for a more dynamic insertion experience.\n\t * An optional paragraph break can be added at the end of the inserted content.\n\t*/\n\tpublic async insertAsText(\n\t\tcontent: HTMLElement,\n\t\tposition?: Position,\n\t\tstream: boolean = false,\n\t\tshouldAddBreakAtEnd: boolean = false\n\t): Promise<void> {\n\t\tconst viewFragment = this.editor.data.processor.toView( content.outerHTML );\n\t\tconst modelFragment = this.editor.data.toModel( viewFragment, '$root' );\n\t\tconst childrenToInsert = Array.from( modelFragment.getChildren() );\n\t\tconst root = this.model.document.getRoot();\n\n\t\tfor ( const [ index, element ] of childrenToInsert.entries() ) {\n\t\t\tif ( element.is( 'element' ) ) {\n\t\t\t\tconst insertPosition = index === 0 ? position : undefined; // Determine position for insertion\n\t\t\t\tif ( stream ) {\n\t\t\t\t\tawait this.insertElementAsStream( element, insertPosition );\n\t\t\t\t} else {\n\t\t\t\t\tawait this.batchInsertOfElement( element, insertPosition );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( shouldAddBreakAtEnd ) {\n\t\t\tthis.model.change( writer => {\n\t\t\t\tconst lastPosition = this.model.document.selection.getLastPosition();\n\t\t\t\tconst currentChildIndex = lastPosition?.path[ 0 ];\n\t\t\t\tif ( root && currentChildIndex != undefined ) {\n\t\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t\t\t\t\twriter.insert( paragraph, root, currentChildIndex + 1 );\n\t\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts a given element into the editor at the specified position.\n\t *\n\t * @param element - The element to be inserted into the editor.\n\t * @param position - The position at which to insert the element.\n\t * If not provided, the element will be inserted at the current selection position.\n\t * @returns A promise that resolves when the element has been inserted.\n\t */\n\tpublic async batchInsertOfElement( element: Element, position?: Position ): Promise<void> {\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\n\t\tlet insertionPosition: Position | undefined = position;\n\n\t\tif ( !position ) {\n\t\t\tconst currentChildIndex = selection.getFirstPosition()?.path[ 0 ];\n\t\t\tconst lastUpdatedElementInRoot = root?.getChild( currentChildIndex ?? 0 );\n\t\t\tif ( lastUpdatedElementInRoot?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElementInRoot.isEmpty ?\n\t\t\t\t\tthis.model.createPositionAt( lastUpdatedElementInRoot, 'end' ) :\n\t\t\t\t\tthis.model.createPositionAfter( lastUpdatedElementInRoot );\n\t\t\t}\n\t\t}\n\n\t\t// insert content at current identified position\n\t\tthis.model.change( writer => {\n\t\t\tthis.model.insertContent( element, insertionPosition );\n\t\t\twriter.setSelection( element, 'end' );\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts a given element into the editor at the specified position in a streaming manner.\n\t *\n\t * @param element - The element to be inserted into the editor.\n\t * @param position - The position at which to insert the element.\n\t * If not provided, the element will be inserted at the current selection position.\n\t * @returns A promise that resolves when the element has been inserted and all text has been streamed in.\n\t */\n\tprivate async insertElementAsStream( element: Element, position?: Position ): Promise<void> {\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\t\tconst lastRecognizedPosition = selection.getLastPosition();\n\n\t\tlet insertionPosition: Position | undefined = position;\n\t\tlet targetElement: Element;\n\n\t\t// Determine insertion position\n\t\tif ( !position ) {\n\t\t\tconst currentChildIndex = lastRecognizedPosition?.path[ 0 ];\n\t\t\tconst lastUpdatedElement = root?.getChild( currentChildIndex ?? 0 );\n\n\t\t\tif ( lastUpdatedElement?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElement.isEmpty ?\n\t\t\t\t\tthis.model.createPositionAt( lastUpdatedElement, 'end' ) :\n\t\t\t\t\tthis.model.createPositionAfter( lastUpdatedElement );\n\t\t\t}\n\n\t\t\tthis.model.change( writer => {\n\t\t\t\ttargetElement = writer.createElement( element.name );\n\t\t\t\t// Set attributes in a more concise way\n\t\t\t\tfor ( const [ key, value ] of element.getAttributes() ) {\n\t\t\t\t\ttargetElement._setAttribute( key, value );\n\t\t\t\t}\n\t\t\t\tthis.model.insertContent( targetElement, insertionPosition );\n\t\t\t\tif ( insertionPosition ) {\n\t\t\t\t\twriter.setSelection( targetElement, 'end' );\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// current element from the offset\n\t\t\tconst currentElement = lastRecognizedPosition?.parent;\n\t\t\tif ( currentElement?.is( 'element' ) ) {\n\t\t\t\ttargetElement = currentElement;\n\t\t\t}\n\t\t}\n\n\t\tconst textChildren = Array.from( element.getChildren() ).filter( child => child.is( '$text' ) );\n\n\t\tfor ( const textNode of textChildren ) {\n\t\t\tif ( !textNode.is( '$text' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst textAttributes = Array.from( textNode.getAttributes() );\n\t\t\tconst textContent = textNode._data;\n\n\t\t\tfor ( const char of textContent ) {\n\t\t\t\tawait new Promise( resolve => {\n\t\t\t\t\tthis.model.change( writer => {\n\t\t\t\t\t\tconst currentPosition = this.editor.model.document.selection.getLastPosition();\n\t\t\t\t\t\tconst newPosition = currentPosition!.getShiftedBy( 1 );\n\t\t\t\t\t\tconst shouldAppendAtEnd = newPosition.offset === currentPosition?.parent.maxOffset;\n\t\t\t\t\t\twriter.insertText( char, textAttributes, targetElement, shouldAppendAtEnd ? 'end' : currentPosition?.offset );\n\t\t\t\t\t\twriter.setSelection( this.editor.model.document.selection.getLastPosition() );\n\t\t\t\t\t} );\n\t\t\t\t\tsetTimeout( resolve, 5 ); // Maintain the streaming effect\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Set selection\n\t\tif ( !position ) {\n\t\t\tthis.model.change( writer => {\n\t\t\t\twriter.setSelection( targetElement, 'end' );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Validate given string as a HTML content\n\t * @param content string containing html content\n\t * @returns A boolean value as result of validation\n\t */\n\tpublic isCompleteHtmlChunk( html: string ): boolean {\n\t\tconst openingTags = ( html.match( /<[^/][^>]*>/g ) || [] ).length;\n\t\tconst closingTags = ( html.match( /<\\/[^>]+>/g ) || [] ).length;\n\n\t\t// Check if all opening tags have corresponding closing tags\n\t\tif ( openingTags !== closingTags ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for incomplete tags\n\t\tif ( html.includes( '<' ) && !html.includes( '>' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the HTML starts with an opening tag and ends with a closing tag\n\t\tconst trimmedHtml = html.trim();\n\t\tif ( !trimmedHtml.startsWith( '<' ) || !trimmedHtml.endsWith( '>' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","import type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type { AiModel, MarkdownContent } from './type-identifiers.js';\nimport { aiAgentContext } from './aiagentcontext.js';\nimport { PromptHelper } from './util/prompt.js';\nimport { HtmlParser } from './util/htmlparser.js';\n\nexport default class AiAgentService {\n\tprivate editor: Editor;\n\tprivate aiModel: AiModel;\n\tprivate apiKey: string | undefined;\n\tprivate endpointUrl: string;\n\tprivate temperature: number | undefined;\n\tprivate timeOutDuration: number;\n\tprivate maxTokens: number;\n\tprivate retryAttempts: number;\n\tprivate streamContent: boolean;\n\tprivate stopSequences: Array<string>;\n\tprivate aiAgentFeatureLockId = Symbol( 'ai-agent-feature' );\n\tprivate promptHelper: PromptHelper;\n\tprivate htmlParser: HtmlParser;\n\n\tprivate buffer = '';\n\tprivate openTags: Array<string> = [];\n\tprivate isInlineInsertion: boolean = false;\n\n\t/**\n\t * Initializes the AiAgentService with the provided editor and configuration settings.\n\t *\n\t * @param editor - The CKEditor instance to be used with the AI assist service.\n\t */\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tthis.promptHelper = new PromptHelper( editor );\n\t\tthis.htmlParser = new HtmlParser( editor );\n\t\tconst config = editor.config.get( 'aiAgent' )!;\n\n\t\tthis.aiModel = config.model!;\n\t\tthis.apiKey = config.apiKey;\n\t\tthis.endpointUrl = config.endpointUrl!;\n\t\tthis.temperature = config.temperature;\n\t\tthis.timeOutDuration = config.timeOutDuration ?? 45000;\n\t\tthis.maxTokens = config.maxTokens!;\n\t\tthis.retryAttempts = config.retryAttempts!;\n\t\tthis.stopSequences = config.stopSequences!;\n\t\tthis.streamContent = config.streamContent ?? true;\n\t}\n\n\t/**\n\t * Handles the slash command input from the user, processes it, and interacts with the AI model.\n\t *\n\t * @returns A promise that resolves when the command has been processed.\n\t */\n\tpublic async handleSlashCommand(): Promise<void> {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\t\tconst root = model.document.getRoot();\n\n\t\tlet content: string | undefined;\n\t\tlet parentEquivalentHTML: HTMLElement | undefined;\n\t\tlet parent: Element | undefined;\n\t\tconst position = model.document.selection.getLastPosition();\n\n\t\tif ( position && root ) {\n\t\t\tparent = position.parent as Element;\n\t\t\tconst inlineSlash = parent.name === 'inline-slash' ? parent : undefined;\n\t\t\tconst equivalentView = mapper.toViewElement( parent );\n\t\t\tparentEquivalentHTML = equivalentView ? view.domConverter.mapViewToDom( equivalentView ) : undefined;\n\n\t\t\tif ( inlineSlash ) {\n\t\t\t\tthis.isInlineInsertion = true;\n\t\t\t\tconst startingPath = inlineSlash.getPath();\n\t\t\t\tconst endingPath = position?.path;\n\t\t\t\tconst startPosition = model.createPositionFromPath( root, startingPath ); // Example path\n\t\t\t\tconst endPosition = model.createPositionFromPath( root, endingPath ); // Example path\n\t\t\t\tconst range = model.createRange( startPosition, endPosition );\n\t\t\t\tparentEquivalentHTML = equivalentView?.parent ?\n\t\t\t\t\tview.domConverter.mapViewToDom( equivalentView.parent ) as HTMLElement :\n\t\t\t\t\tundefined;\n\t\t\t\tcontent = '';\n\n\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\tif ( item.is( '$textProxy' ) ) {\n\t\t\t\t\t\tcontent += item.data.trim(); // Add text data\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( parentEquivalentHTML ) {\n\t\t\t\tcontent = parentEquivalentHTML?.innerText;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst domSelection = window.getSelection();\n\t\t\tconst domRange: any = domSelection?.getRangeAt( 0 );\n\t\t\tconst rect = domRange.getBoundingClientRect();\n\n\t\t\taiAgentContext.showLoader( rect );\n\t\t\tconst gptPrompt = await this.generateGptPromptBasedOnUserPrompt(\n\t\t\t\tcontent ?? '',\n\t\t\t\tparentEquivalentHTML?.innerText\n\t\t\t);\n\t\t\tif ( parent && gptPrompt ) {\n\t\t\t\tawait this.fetchAndProcessGptResponse( gptPrompt, parent );\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tconsole.error( 'Error handling slash command:', error );\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tthis.isInlineInsertion = false;\n\t\t\taiAgentContext.hideLoader();\n\t\t}\n\t}\n\n\t/**\n\t * Fetches and processes the GPT response based on the provided prompt and parent element.\n\t *\n\t * @param prompt - The prompt to send to the GPT model.\n\t * @param parent - The parent element in the editor where the response will be inserted.\n\t * @param retries - The number of retry attempts for the API call (default is the configured retry attempts).\n\t * @returns A promise that resolves when the response has been processed.\n\t */\n\tprivate async fetchAndProcessGptResponse(\n\t\tprompt: string,\n\t\tparent: Element,\n\t\tretries: number = this.retryAttempts\n\t): Promise<void> {\n\t\tconsole.log( 'Starting fetchAndProcessGptResponse' );\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(\n\t\t\t() => controller.abort(),\n\t\t\tthis.timeOutDuration\n\t\t);\n\n\t\tlet buffer = '';\n\t\tlet contentBuffer = '';\n\t\tconst blockID = `ai-${ new Date().getTime() }`;\n\n\t\ttry {\n\t\t\tconst response = await fetch( this.endpointUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${ this.apiKey }`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify( {\n\t\t\t\t\tmodel: this.aiModel,\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{ role: 'system', content: this.promptHelper.getSystemPrompt( this.isInlineInsertion ) },\n\t\t\t\t\t\t{ role: 'user', content: prompt }\n\t\t\t\t\t],\n\t\t\t\t\ttemperature: this.temperature,\n\t\t\t\t\tmax_tokens: this.maxTokens,\n\t\t\t\t\tstop: this.stopSequences,\n\t\t\t\t\tstream: true\n\t\t\t\t} ),\n\t\t\t\tsignal: controller.signal\n\t\t\t} );\n\n\t\t\tclearTimeout( timeoutId );\n\n\t\t\tif ( !response.ok ) {\n\t\t\t\tthrow new Error( 'Fetch failed' );\n\t\t\t}\n\n\t\t\taiAgentContext.hideLoader();\n\n\t\t\tconst reader = response.body!.getReader();\n\t\t\tconst decoder = new TextDecoder( 'utf-8' );\n\n\t\t\tthis.clearParentContent( parent );\n\t\t\tthis.editor.enableReadOnlyMode( this.aiAgentFeatureLockId );\n\n\t\t\tlet insertParent = true;\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\tconst position = editor.model.document.selection.getLastPosition();\n\t\t\t\tif ( position ) {\n\t\t\t\t\tconst aiTag = writer.createElement( 'ai-tag', {\n\t\t\t\t\t\tid: blockID\n\t\t\t\t\t} );\n\t\t\t\t\tconst parent = position.parent as Element;\n\t\t\t\t\tif ( parent ) {\n\t\t\t\t\t\tif ( parent.parent?.name === 'tableCell' ) {\n\t\t\t\t\t\t\tinsertParent = false;\n\t\t\t\t\t\t} else if ( parent.getAttribute( 'listType' ) === 'bulleted' ) {\n\t\t\t\t\t\t\tinsertParent = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet parentContent = '';\n\t\t\t\t\tfor ( const child of parent.getChildren() ) {\n\t\t\t\t\t\tif ( child.is( '$text' ) ) {\n\t\t\t\t\t\t\tparentContent += child.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst parentPosition = parentContent ? writer.createPositionAfter( parent ) : writer.createPositionBefore( parent );\n\n\t\t\t\t\twriter.insert( aiTag, insertParent ? parentPosition : position );\n\n\t\t\t\t\tconst newPosition = writer.createPositionAt( aiTag, 'end' );\n\t\t\t\t\twriter.setSelection( newPosition );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconsole.log( 'Starting to process response' );\n\t\t\tfor ( ;; ) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif ( done ) {\n\t\t\t\t\tconsole.log( 'Finished reading response' );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst chunk = decoder.decode( value, { stream: true } );\n\t\t\t\tbuffer += chunk;\n\n\t\t\t\tlet newlineIndex;\n\t\t\t\twhile ( ( newlineIndex = buffer.indexOf( '\\n' ) ) !== -1 ) {\n\t\t\t\t\tconst line = buffer.slice( 0, newlineIndex ).trim();\n\t\t\t\t\tbuffer = buffer.slice( newlineIndex + 1 );\n\n\t\t\t\t\tif ( line.startsWith( 'data: ' ) ) {\n\t\t\t\t\t\tconst jsonStr = line.slice( 5 ).trim();\n\t\t\t\t\t\tif ( jsonStr === '[DONE]' ) {\n\t\t\t\t\t\t\tconsole.log( 'Received [DONE] signal' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst data = JSON.parse( jsonStr );\n\t\t\t\t\t\t\tconst content = data.choices[ 0 ]?.delta?.content;\n\t\t\t\t\t\t\tif ( content !== null && content !== undefined ) {\n\t\t\t\t\t\t\t\tcontentBuffer += content;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait this.updateContent( contentBuffer, blockID, insertParent );\n\t\t\t\t\t\t} catch ( parseError ) {\n\t\t\t\t\t\t\tconsole.warn( 'Error parsing JSON:', parseError );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst editorData = editor.getData();\n\t\t\tlet editorContent = editorData.replace( `<ai-tag id=\"${ blockID }\">`, '' );\n\t\t\teditorContent = editorContent.replace( '</ai-tag>', '' );\n\t\t\teditor.setData( editorContent );\n\t\t} catch ( error: any ) {\n\t\t\tconsole.error( 'Error in fetchAndProcessGptResponse:', error );\n\t\t\tconst errorIdentifier =\n\t\t\t\t( error?.message || '' ).trim() || ( error?.name || '' ).trim();\n\t\t\tconst isRetryableError = [\n\t\t\t\t'AbortError',\n\t\t\t\t'ReadableStream not supported',\n\t\t\t\t'AiAgent: Fetch failed'\n\t\t\t].includes( errorIdentifier );\n\t\t\tif ( retries > 0 && isRetryableError ) {\n\t\t\t\tconsole.warn( `Retrying... (${ retries } attempts left)` );\n\t\t\t\treturn await this.fetchAndProcessGptResponse(\n\t\t\t\t\tprompt,\n\t\t\t\t\tparent,\n\t\t\t\t\tretries - 1\n\t\t\t\t);\n\t\t\t}\n\t\t\tlet errorMessage: string;\n\t\t\tswitch ( error?.name || error?.message?.trim() ) {\n\t\t\t\tcase 'ReadableStream not supported':\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'Browser does not support readable streams'\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AiAgent: Fetch failed':\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'We couldn\\'t connect to the AI. Please check your internet'\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'We couldn\\'t connect to the AI. Please check your internet'\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\taiAgentContext.showError( errorMessage );\n\t\t} finally {\n\t\t\tthis.editor.disableReadOnlyMode( this.aiAgentFeatureLockId );\n\t\t}\n\t}\n\n\tprivate async updateContent( newHtml: string, blockID: string, insertParent: boolean ): Promise<void> {\n\t\tconst editor = this.editor;\n\t\teditor.model.change( writer => {\n\t\t\tconst root = editor.model.document.getRoot();\n\t\t\tlet targetElement = null;\n\t\t\tif ( root ) {\n\t\t\t\tfor ( const child of root.getChildren() ) {\n\t\t\t\t\tconst childElement = child as Element;\n\t\t\t\t\tif ( insertParent ) {\n\t\t\t\t\t\tif ( childElement.is( 'element', 'ai-tag' ) && childElement.getAttribute( 'id' ) === blockID ) {\n\t\t\t\t\t\t\ttargetElement = childElement;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor ( const innerChild of childElement.getChildren() ) {\n\t\t\t\t\t\t\tif ( innerChild.is( 'element', 'ai-tag' ) && innerChild.getAttribute( 'id' ) === blockID ) {\n\t\t\t\t\t\t\t\ttargetElement = innerChild;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( targetElement ) {\n\t\t\t\t\tconst range = editor.model.createRangeIn( targetElement );\n\t\t\t\t\twriter.remove( range );\n\n\t\t\t\t\tconst viewFragment = editor.data.processor.toView( newHtml );\n\t\t\t\t\tconst modelFragment = editor.data.toModel( viewFragment );\n\n\t\t\t\t\twriter.insert( modelFragment, targetElement, 'end' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\tawait new Promise( resolve => setTimeout( resolve ) );\n\t}\n\n\t/**\n\t * Processes the provided content and inserts it into the specified parent element.\n\t * Depending on the feature flag, it either uses a simple HTML insertion method\n\t * or processes the content as HTML.\n\t *\n\t * @param content - The content to be processed and inserted.\n\t * @param parent - The parent element in the editor where the content will be inserted.\n\t */\n\tprivate async processContent( content: string ): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log( '--- Start of processContent ---' );\n\t\t\tconsole.log( 'Processing content:', content, this.isInlineInsertion );\n\t\t\tif ( this.isInlineInsertion ) {\n\t\t\t\tconst position = this.editor.model.document.selection.getLastPosition();\n\t\t\t\tconst tempParagraph: HTMLElement = document.createElement( 'div' );\n\t\t\t\ttempParagraph.innerHTML = content;\n\t\t\t\tawait this.htmlParser.insertAsText( tempParagraph || '', position ?? undefined, this.streamContent );\n\t\t\t} else {\n\t\t\t\tif ( this.streamContent ) {\n\t\t\t\t\t// Existing complex content processing logic\n\t\t\t\t\tawait this.proceedHtmlResponse( content );\n\t\t\t\t} else {\n\t\t\t\t\t// Use the simple HTML insertion method\n\t\t\t\t\tawait this.htmlParser.insertSimpleHtml( content );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log( '--- End of processContent ---' );\n\t\t} catch ( error ) {\n\t\t\tconsole.error( error );\n\t\t}\n\t}\n\n\t/**\n\t * Processes the provided HTML string and inserts its content into the editor.\n\t * It creates a temporary div to parse the HTML and handles different types of\n\t * elements (lists, tables, headings, etc.) accordingly.\n\t *\n\t * @param html - The HTML string to be processed and inserted into the editor.\n\t */\n\tprivate async proceedHtmlResponse( html: string ): Promise<void> {\n\t\tconst tempDiv: HTMLElement = document.createElement( 'div' );\n\t\ttempDiv.innerHTML = html;\n\n\t\tfor ( const child of Array.from( tempDiv.childNodes ) ) {\n\t\t\tconst element = child as HTMLElement;\n\t\t\tif ( element.nodeType === Node.ELEMENT_NODE ) {\n\t\t\t\tconst elementName = element.tagName.toLowerCase();\n\t\t\t\tconst isStreamingNotAllow = [\n\t\t\t\t\t'table', 'blockquote', 'pre', 'img', 'form', 'figure'\n\t\t\t\t].includes( elementName );\n\n\t\t\t\tif ( isStreamingNotAllow ) {\n\t\t\t\t\tawait this.htmlParser.insertSimpleHtml( element.outerHTML );\n\t\t\t\t}\n\t\t\t\telse if ( elementName === 'ul' || elementName === 'ol' ) {\n\t\t\t\t\tawait this.htmlParser.insertAsText( element, undefined, true, true );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tawait this.htmlParser.insertAsText( element, undefined, true );\n\t\t\t\t}\n\t\t\t} else if ( element.nodeType === Node.TEXT_NODE && element.textContent ) {\n\t\t\t\tconst tempParagraph: HTMLElement = document.createElement( 'div' );\n\t\t\t\ttempParagraph.innerText = element.textContent;\n\t\t\t\tawait this.htmlParser.insertAsText( tempParagraph, undefined, true );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clears the content of the specified parent element in the editor.\n\t *\n\t * @param parent - The parent element whose content will be cleared.\n\t */\n\tprivate clearParentContent( parent: Element ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst root = model.document.getRoot();\n\t\tconst position = model.document.selection.getLastPosition();\n\t\tconst inlineSlash = Array.from( parent.getChildren() ).find( ( child: any ) => child.name === 'inline-slash' ) as Element;\n\n\t\tif ( root && position ) {\n\t\t\teditor.model.change( writer => {\n\t\t\t\tconst startingPath = inlineSlash?.getPath() || parent.getPath();\n\t\t\t\tconst range = model.createRange(\n\t\t\t\t\tmodel.createPositionFromPath( root, startingPath ),\n\t\t\t\t\tmodel.createPositionFromPath( root, position.path )\n\t\t\t\t);\n\t\t\t\twriter.remove( range );\n\t\t\t\twriter.setSelection( model.createPositionFromPath( root, startingPath ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Generates a GPT prompt based on the user's input and the current context in the editor.\n\t * This method processes the input prompt, extracts any URLs, and formats the final prompt\n\t * to be sent to the GPT model. It also handles the case where the editor is empty.\n\t *\n\t * @param prompt - The user's input prompt, typically starting with a slash.\n\t * @param promptContainerText - Optional text from the container that may provide additional context.\n\t * @returns A promise that resolves to the generated GPT prompt string or null if an error occurs.\n\t*/\n\tprivate async generateGptPromptBasedOnUserPrompt(\n\t\tprompt: string,\n\t\tpromptContainerText?: string\n\t): Promise<string | null> {\n\t\ttry {\n\t\t\tconst context = this.promptHelper.trimContext( prompt, promptContainerText );\n\t\t\tconst request = prompt.slice( 1 ); // Remove the leading slash\n\t\t\tlet markDownContents: Array<MarkdownContent> = [];\n\t\t\tconst urlRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s]*/g;\n\t\t\tconst urls = prompt.match( urlRegex );\n\t\t\tif ( Array.isArray( urls ) && urls.length ) {\n\t\t\t\tconst formattedUrl = urls.map( url => {\n\t\t\t\t\treturn url.replace( /[,.]$/, '' );\n\t\t\t\t} );\n\t\t\t\tmarkDownContents = await this.promptHelper.generateMarkDownForUrls( formattedUrl );\n\t\t\t\tmarkDownContents = this.promptHelper.allocateTokensToFetchedContent( prompt, markDownContents );\n\t\t\t}\n\n\t\t\tconst isEditorEmpty = context === '\"@@@cursor@@@\"';\n\t\t\treturn this.promptHelper.formatFinalPrompt(\n\t\t\t\trequest,\n\t\t\t\tcontext,\n\t\t\t\tmarkDownContents,\n\t\t\t\tisEditorEmpty\n\t\t\t);\n\t\t} catch ( error ) {\n\t\t\tconsole.error( error );\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentCommand from './aiagentcommand.js';\nimport type { Element } from 'ckeditor5';\nimport AiAgentService from './aiagentservice.js';\n\nexport default class AiAgentEditing extends Plugin {\n\tpublic static get pluginName() {\n\t\treturn 'AiAgentEditing' as const;\n\t}\n\n\t/**\n\t * Initializes the AI Agent editing plugin, setting up commands and key handling.\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst aiAgentService = new AiAgentService( editor );\n\t\teditor.commands.add(\n\t\t\t'aiAgent',\n\t\t\tnew AiAgentCommand( editor, aiAgentService )\n\t\t);\n\n\t\tthis.setupEnterKeyHandling();\n\t}\n\n\t/**\n\t * Sets up handling for the Enter key to trigger AI assist functionality.\n\t * If the content starts with a slash, it cancels the default action and executes the AI assist command.\n\t */\n\tprivate setupEnterKeyHandling(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\n\t\teditor.keystrokes.set( 'enter', async ( _, cancel ) => {\n\t\t\tconst position = model.document.selection.getFirstPosition();\n\t\t\tif ( position ) {\n\t\t\t\tconst paragraph = position.parent as Element;\n\t\t\t\tconst inlineSlash = Array.from( paragraph.getChildren() ).find( ( child: any ) => child.name === 'inline-slash' );\n\t\t\t\tconst equivalentView = mapper.toViewElement( paragraph );\n\t\t\t\tlet content;\n\t\t\t\tif ( equivalentView ) {\n\t\t\t\t\tcontent =\n\t\t\t\t\t\tview.domConverter.mapViewToDom(\n\t\t\t\t\t\t\tequivalentView\n\t\t\t\t\t\t)?.innerText;\n\t\t\t\t}\n\t\t\t\tif ( ( typeof content === 'string' && content.startsWith( '/' ) ) || inlineSlash ) {\n\t\t\t\t\tcancel();\n\t\t\t\t\tawait editor.execute( 'aiAgent' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentUI from './aiagentui.js';\nimport AiAgentEditing from './aiagentediting.js';\nimport type { Editor } from 'ckeditor5';\nimport type { AiModel } from './type-identifiers.js';\nimport { TOKEN_LIMITS } from './const.js';\nimport '../theme/style.css';\nexport default class AiAgent extends Plugin {\n\tpublic DEFAULT_GPT_MODEL = 'gpt-4o' as AiModel;\n\tpublic DEFAULT_AI_END_POINT = 'https://api.openai.com/v1/chat/completions';\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tconst config = editor.config.get( 'aiAgent' ) || {};\n\t\t// Set default values and merge with provided config\n\t\tconst defaultConfig = {\n\t\t\tmodel: this.DEFAULT_GPT_MODEL, // Default AI model\n\t\t\tapiKey: '', // Default OpenAI key\n\t\t\tendpointUrl: this.DEFAULT_AI_END_POINT, // Default endpoint URL\n\t\t\ttemperature: undefined, // Default temperature\n\t\t\ttimeOutDuration: 45000, // Default timeout duration\n\t\t\tmaxTokens: TOKEN_LIMITS[ this.DEFAULT_GPT_MODEL ].max, // Default max tokens\n\t\t\tretryAttempts: 1, // Default retry attempts\n\t\t\tcontextSize: TOKEN_LIMITS[ this.DEFAULT_GPT_MODEL ].context * 0.75, // Default context size\n\t\t\tstopSequences: [], // Default stop sequences\n\t\t\tpromptSettings: {\n\t\t\t\toutputFormat: [], // Default output format\n\t\t\t\tcontextData: [], // Default context data\n\t\t\t\tfilters: [] // Default filters\n\t\t\t},\n\t\t\tdebugMode: false, // Default debug mode\n\t\t\tstreamContent: true // Default streaming mode\n\t\t};\n\n\t\tconst updatedConfig = { ...defaultConfig, ...config };\n\n\t\t// Set the merged config back to the editor\n\t\teditor.config.set( 'aiAgent', updatedConfig );\n\n\t\t// Validate configuration\n\t\tthis.validateConfiguration( updatedConfig );\n\t}\n\n\tpublic static get requires() {\n\t\treturn [ AiAgentUI, AiAgentEditing ] as const;\n\t}\n\n\tpublic static get pluginName() {\n\t\treturn 'AiAgent' as const;\n\t}\n\n\tprivate validateConfiguration( config: any ): void {\n\t\tif ( !config.apiKey ) {\n\t\t\tthrow new Error( 'AiAgent: apiKey is required.' );\n\t\t}\n\n\t\tif ( config.temperature && ( config.temperature < 0 || config.temperature > 2 ) ) {\n\t\t\tthrow new Error( 'AiAgent: Temperature must be a number between 0 and 2.' );\n\t\t}\n\n\t\t// Validate maxTokens based on the model's token limits\n\t\tconst { min, max } = TOKEN_LIMITS[ config.model as AiModel ];\n\t\tif ( config.maxTokens < min || config.maxTokens > max ) {\n\t\t\tthrow new Error( `AiAgent: maxTokens must be a number between ${ min } and ${ max }.` );\n\t\t}\n\t}\n\n\tpublic init(): void {\n\t\t// Any additional initialization if needed\n\t}\n}\n","import ckeditor from './../theme/icons/ckeditor.svg';\nimport './augmentation.js';\n\nexport { default as AiAgent } from './aiagent.js';\n\nexport const icons = {\n\tckeditor\n};\n"],"names":["AiAgentContext","instance","_uiComponent","getInstance","uiComponent","component","showError","message","console","log","showGptErrorToolTip","showLoader","rect","hideLoader","aiAgentContext","TOKEN_LIMITS","min","max","context","SUPPORTED_LANGUAGES","AiAgentUI","Plugin","PLACEHOLDER_TEXT_ID","GPT_RESPONSE_LOADER_ID","GPT_RESPONSE_ERROR_ID","pluginName","requires","Widget","initializeUIComponents","initializeUILanguage","attachListener","error","editor","t","model","schema","register","inheritAllFrom","isInline","isObject","allowWhere","allowAttributes","extend","allowIn","conversion","for","elementToElement","view","name","attributes","viewElement","writer","createElement","class","getAttribute","converterPriority","modelElement","createContainerElement","addPlaceholder","addLoader","addGptErrorToolTip","ui","componentFactory","add","locale","ButtonView","set","label","icon","aiAgentIcon","tooltip","on","change","position","document","selection","getLastPosition","inlineSlashContainer","insertText","insert","newPosition","createPositionAt","setSelection","editing","focus","addCustomTagConversions","id","customTag","toWidget","contentLanguageCode","contentLanguage","supportedLanguages","includes","setTimeout","applyPlaceholderToCurrentLine","modelRoot","getRoot","modelRange","createRangeIn","itemsToRemove","item","getItems","is","isEmpty","push","remove","hidePlaceHolder","addEventListener","modelSelection","block","getFirstPosition","parent","getRectDomOfGivenModelElement","showPlaceHolder","element","mapper","equivalentView","toViewElement","domElement","domConverter","mapViewToDom","getBoundingClientRect","placeholder","onclick","classList","textContent","body","appendChild","ele","getElementById","isReadOnlyMode","isReadOnly","style","left","top","loaderElement","tooltipElement","domRoots","get","editorRect","hideGptErrorToolTip","AiAgentCommand","Command","aiAgentService","constructor","isEnabled","execute","handleSlashCommand","PromptHelper","contextSize","responseOutputFormat","responseContextData","responseFilters","debugMode","config","promptSettings","outputFormat","contextData","filters","getSystemPrompt","isInlineResponse","corpus","getAllowedHtmlTags","join","systemPrompt","group","groupEnd","formatFinalPrompt","request","markDownContents","isEditorEmpty","length","forEach","markdown","index","content","defaultFilterInstructions","defaultContextInstructions","prompt","promptContainerText","contentBeforePrompt","contentAfterPrompt","splitText","innerText","matchIndex","indexOf","nextEnterIndex","firstNewlineIndex","beforeNewline","substring","afterNewline","contextParts","allocatedEditorContextToken","Math","floor","extractEditorContent","escapedPrompt","replace","trim","RegExp","slice","trimmedContext","allocateTokensToFetchedContent","fetchedContent","editorContent","editorToken","countTokens","availableLimit","map","availableToken","sort","a","b","maxTokenFromEachURL","tokenToRequest","trimLLMContentByTokens","generateMarkDownForUrls","urls","errorMsg","Promise","all","url","fetchUrlContent","emptyContent","filter","urlStr","Error","urlRegex","trimmedUrl","test","cleanedUrl","requestURL","response","fetch","headers","ok","status","text","normalizedContent","tokens","match","approxTokenCount","token","ceil","maxTokens","elements","split","accumulatedTokens","trimmedContent","elementTokenCount","definitions","getDefinitions","schemaNodes","Object","keys","nodeToHtmlMap","blockQuote","caption","codeBlock","heading1","heading2","heading3","imageBlock","imageInline","paragraph","table","tableCell","tableRow","$listItem","horizontalLine","textAttributeToHtmlMap","bold","italic","code","strikethrough","subscript","superscript","underline","linkHref","allowedTags","Set","node","textDefinition","$text","attr","has","Array","from","reverse","charCount","sentences","sbd","preserve_whitespace","html_boundaries","allowed_tags","iterator","sentence","sentenceLength","HtmlParser","insertSimpleHtml","html","viewFragment","data","processor","toView","modelFragment","toModel","root","insertionPosition","lastInsertedChild","getChild","childCount","currentChildIndex","path","lastUpdatedElementInRoot","createPositionAfter","insertContent","isBreakElementReq","resolve","insertAsText","stream","shouldAddBreakAtEnd","outerHTML","childrenToInsert","getChildren","entries","insertPosition","undefined","insertElementAsStream","batchInsertOfElement","lastPosition","lastRecognizedPosition","targetElement","lastUpdatedElement","key","value","getAttributes","_setAttribute","currentElement","textChildren","child","textNode","textAttributes","_data","char","currentPosition","getShiftedBy","shouldAppendAtEnd","offset","maxOffset","isCompleteHtmlChunk","openingTags","closingTags","trimmedHtml","startsWith","endsWith","AiAgentService","aiModel","apiKey","endpointUrl","temperature","timeOutDuration","retryAttempts","streamContent","stopSequences","aiAgentFeatureLockId","Symbol","promptHelper","htmlParser","buffer","openTags","isInlineInsertion","parentEquivalentHTML","inlineSlash","startingPath","getPath","endingPath","startPosition","createPositionFromPath","endPosition","range","createRange","domSelection","window","getSelection","domRange","getRangeAt","gptPrompt","generateGptPromptBasedOnUserPrompt","fetchAndProcessGptResponse","retries","controller","AbortController","timeoutId","abort","contentBuffer","blockID","Date","getTime","method","Authorization","JSON","stringify","messages","role","max_tokens","stop","signal","clearTimeout","reader","getReader","decoder","TextDecoder","clearParentContent","enableReadOnlyMode","insertParent","aiTag","parentContent","parentPosition","createPositionBefore","done","read","chunk","decode","newlineIndex","line","jsonStr","parse","choices","delta","updateContent","parseError","warn","editorData","getData","setData","errorIdentifier","isRetryableError","errorMessage","disableReadOnlyMode","newHtml","childElement","innerChild","processContent","tempParagraph","innerHTML","proceedHtmlResponse","tempDiv","childNodes","nodeType","Node","ELEMENT_NODE","elementName","tagName","toLowerCase","isStreamingNotAllow","TEXT_NODE","find","trimContext","isArray","formattedUrl","AiAgentEditing","commands","setupEnterKeyHandling","keystrokes","_","cancel","AiAgent","DEFAULT_GPT_MODEL","DEFAULT_AI_END_POINT","defaultConfig","updatedConfig","validateConfiguration","init","icons","ckeditor"],"mappings":"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"}