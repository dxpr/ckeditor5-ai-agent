{"version":3,"file":"index.js","sources":["../src/aiassistcontext.ts","../src/const.ts","../src/aiassistui.ts","../src/aiassistcommand.ts","../src/util/prompt.ts","../src/util/htmlparser.ts","../src/aiassistservice.ts","../src/aiassistediting.ts","../src/aiassist.ts","../src/index.ts"],"sourcesContent":["/**\n * The AiAssistContext class provides a context for the AI Assist plugin,\n * allowing access to shared resources and state across different components.\n */\nexport class AiAssistContext {\n\tprivate static instance: AiAssistContext;\n\tprivate _uiComponent: any;\n\n\tprivate constructor() {}\n\n\tpublic static getInstance(): AiAssistContext {\n\t\tif ( !AiAssistContext.instance ) {\n\t\t\tAiAssistContext.instance = new AiAssistContext();\n\t\t}\n\t\treturn AiAssistContext.instance;\n\t}\n\n\tpublic set uiComponent( component: any ) {\n\t\tthis._uiComponent = component;\n\t}\n\n\tpublic showError( message: string ): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tconsole.log( 'Showing error message...', message );\n\t\t\tthis._uiComponent.showGptErrorToolTip( message );\n\t\t}\n\t}\n\n\tpublic showLoader( rect: DOMRect ): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tthis._uiComponent.showLoader( rect );\n\t\t}\n\t}\n\n\tpublic hideLoader(): void {\n\t\tif ( this._uiComponent ) {\n\t\t\tthis._uiComponent.hideLoader();\n\t\t}\n\t}\n}\n\nexport const aiAssistContext = AiAssistContext.getInstance();\n","import type { AiModel } from './type-identifiers.js';\n\n// const\nexport const TOKEN_LIMITS: Record<AiModel, { min: number; max: number; context: number }> = {\n\t'gpt-3': { min: 1, max: 4096, context: 16385 },\n\t'gpt-3.5-turbo': { min: 1, max: 4096, context: 16385 },\n\t'gpt-4': { min: 1, max: 4096, context: 128000 },\n\t'gpt-4o': { min: 0, max: 4096, context: 128000 },\n\t'gpt-4-turbo': { min: 1, max: 4096, context: 128000 },\n\t'gpt-4o-mini': { min: 1, max: 4096, context: 128000 }\n};\n\nexport const SUPPORTED_LANGUAGES = [ 'en', 'es', 'hi', 'nl' ];\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport { ButtonView, createDropdown, SplitButtonView } from 'ckeditor5/src/ui.js';\nimport aiAssistIcon from '../theme/icons/ai-assist.svg';\nimport { aiAssistContext } from './aiassistcontext.js';\nimport { SUPPORTED_LANGUAGES } from './const.js';\n\nexport default class AiAssistUI extends Plugin {\n\tpublic PLACEHOLDER_TEXT_ID = 'slash-placeholder';\n\tpublic GPT_RESPONSE_LOADER_ID = 'gpt-response-loader';\n\tpublic GPT_RESPONSE_ERROR_ID = 'gpt-error';\n\n\tpublic static get pluginName() {\n\t\treturn 'AiAssistUI' as const;\n\t}\n\n\t/**\n\t * Initializes the AI Assist UI plugin, setting up UI components and event listeners.\n\t * This method is called when the plugin is loaded.\n\t */\n\tpublic init(): void {\n\t\ttry {\n\t\t\taiAssistContext.uiComponent = this;\n\t\t\t// Initialize UI components like buttons, placeholders, loaders, etc.\n\t\t\tthis.initializeUIComponents();\n\n\t\t\t// Set displays content in the appropriate language.\n\t\t\tthis.initializeUILanguage();\n\n\t\t\t// Attach event listeners for handling editor events and user interactions\n\t\t\tthis.attachListener();\n\t\t} catch ( error: any ) {\n\t\t\tconsole.error( error.message );\n\t\t}\n\t}\n\n\t/**\n\t * Initializes UI components such as placeholders, loaders, and buttons for the editor.\n\t */\n\tprivate initializeUIComponents(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\t// Register the inline-slash schema\n\t\teditor.model.schema.register( 'inline-slash', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tisInline: true,\n\t\t\tisObject: true,\n\t\t\tallowWhere: '$text',\n\t\t\tallowAttributes: [ 'class' ]\n\t\t} );\n\n\t\t// Allow the inline-slash element to have text inside it\n\t\teditor.model.schema.extend( '$text', {\n\t\t\tallowIn: 'inline-slash'\n\t\t} );\n\n\t\t// Set up upcast conversion for inline-slash\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: {\n\t\t\t\tname: 'inline-slash',\n\t\t\t\tattributes: [ 'class' ]\n\t\t\t},\n\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\treturn writer.createElement( 'inline-slash', {\n\t\t\t\t\tclass: viewElement.getAttribute( 'class' )\n\t\t\t\t} );\n\t\t\t},\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: {\n\t\t\t\tname: 'inline-slash',\n\t\t\t\tattributes: [ 'class' ]\n\t\t\t},\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\treturn writer.createContainerElement( 'inline-slash', {\n\t\t\t\t\tclass: modelElement.getAttribute( 'class' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tthis.addPlaceholder();\n\t\tthis.addLoader();\n\t\tthis.addGptErrorToolTip();\n\n\t\teditor.ui.componentFactory.add( 'aiAssistButton', locale => {\n\t\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst view = new ButtonView( locale );\n\t\t\t// const view =  dropdownView.buttonView;\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Ai assist' ),\n\t\t\t\ticon: aiAssistIcon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\t\t\tview.on( 'execute', () => {\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tconst position = this.editor.model.document.selection.getLastPosition();\n\t\t\t\t\tif ( position ) {\n\t\t\t\t\t\tconst inlineSlashContainer = writer.createElement( 'inline-slash', { class: 'ck-slash' } );\n\t\t\t\t\t\twriter.insertText( '/', inlineSlashContainer );\n\t\t\t\t\t\twriter.insert( inlineSlashContainer, position );\n\t\t\t\t\t\tconst newPosition = writer.createPositionAt( inlineSlashContainer, 'end' );\n\t\t\t\t\t\twriter.setSelection( newPosition );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * Initializes the UI language settings based on the editor's locale.\n\t * Displays an error tooltip if the current language is unsupported.\n\t */\n\tprivate initializeUILanguage(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst contentLanguageCode = editor.locale.contentLanguage;\n\t\tconst supportedLanguages = SUPPORTED_LANGUAGES;\n\t\tif ( !supportedLanguages.includes( contentLanguageCode ) ) {\n\t\t\tthis.showGptErrorToolTip( t( 'Unsupported language code' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Attaches event listeners to the editor for handling user interactions and content changes.\n\t */\n\tprivate attachListener(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.document.on( 'change:data', () => {\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.applyPlaceholderToCurrentLine();\n\t\t\t}, 10 );\n\t\t} );\n\n\t\tmodel.document.selection.on( 'change:range', () => {\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.applyPlaceholderToCurrentLine();\n\t\t\t}, 10 );\n\t\t\tconst modelRoot = editor.model.document.getRoot();\n\t\t\tif ( modelRoot ) {\n\t\t\t\tconst modelRange = editor.model.createRangeIn( modelRoot );\n\t\t\t\tconst itemsToRemove: Array<any> = [];\n\t\t\t\tfor ( const item of modelRange.getItems() ) {\n\t\t\t\t\tif ( item.is( 'element', 'inline-slash' ) && item.isEmpty ) {\n\t\t\t\t\t\titemsToRemove.push( item ); // Collect empty items\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove collected empty inline-slash elements\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\tfor ( const item of itemsToRemove ) {\n\t\t\t\t\t\twriter.remove( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\teditor.editing.view.document.on( 'scroll', () => {\n\t\t\tthis.hidePlaceHolder();\n\t\t} );\n\n\t\tdocument.addEventListener( 'scroll', () => {\n\t\t\tthis.hidePlaceHolder();\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the placeholder to the current line in the editor if it is empty.\n\t * Hides the placeholder if the line is not empty.\n\t */\n\tpublic applyPlaceholderToCurrentLine(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tconst block = modelSelection.getFirstPosition()?.parent;\n\t\tif ( block && block.isEmpty ) {\n\t\t\tthis.hidePlaceHolder();\n\n\t\t\tsetTimeout( async () => {\n\t\t\t\tif ( block.is( 'element' ) ) {\n\t\t\t\t\tconst rect = await this.getRectDomOfGivenModelElement(\n\t\t\t\t\t\tblock\n\t\t\t\t\t);\n\t\t\t\t\tif ( rect ) {\n\t\t\t\t\t\tthis.showPlaceHolder( rect );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 100 );\n\t\t} else {\n\t\t\tthis.hidePlaceHolder();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the DOM rectangle of a given model element.\n\t *\n\t * @param element - The model element for which to get the DOM rectangle.\n\t * @returns A promise that resolves to the DOMRect of the element, or null if not found.\n\t */\n\tprivate async getRectDomOfGivenModelElement(\n\t\telement: any\n\t): Promise<DOMRect | null | undefined> {\n\t\tconst editor = this.editor;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\n\t\tconst equivalentView = mapper.toViewElement( element );\n\n\t\tif ( equivalentView ) {\n\t\t\tconst domElement = view.domConverter.mapViewToDom( equivalentView );\n\t\t\tif ( domElement ) {\n\t\t\t\treturn domElement.getBoundingClientRect();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds a placeholder element to the document body for user interaction.\n\t */\n\tprivate addPlaceholder(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst placeholder = document.createElement( 'p' );\n\t\tplaceholder.id = this.PLACEHOLDER_TEXT_ID;\n\t\tplaceholder.onclick = () => {\n\t\t\teditor.focus();\n\t\t};\n\t\tplaceholder.classList.add( 'place-holder' );\n\t\tplaceholder.textContent = t( 'Type / to request AI content' );\n\t\tdocument.body.appendChild( placeholder );\n\t}\n\n\t/**\n\t * Shows the placeholder at the specified position.\n\t *\n\t * @param rect - The DOMRect object defining the position to show the placeholder.\n\t */\n\tprivate showPlaceHolder( rect?: DOMRect ): void {\n\t\tconst ele = document.getElementById( this.PLACEHOLDER_TEXT_ID );\n\t\tconst isReadOnlyMode = this.editor.isReadOnly;\n\t\tif ( ele && rect && !isReadOnlyMode ) {\n\t\t\tele.classList.add( 'show-place-holder' );\n\t\t\tele.style.left = `${ rect.left }px`;\n\t\t\tele.style.top = `${ rect.top }px`;\n\t\t} else if ( ele ) {\n\t\t\tele.classList.remove( 'show-place-holder' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the placeholder element from the document.\n\t */\n\tprivate hidePlaceHolder(): void {\n\t\tconst ele = document.getElementById( this.PLACEHOLDER_TEXT_ID );\n\t\tif ( ele ) {\n\t\t\tele.classList.remove( 'show-place-holder' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds a loader element to the document body for indicating processing.\n\t */\n\tprivate addLoader(): void {\n\t\tconst loaderElement = document.createElement( 'div' );\n\t\tloaderElement.id = this.GPT_RESPONSE_LOADER_ID;\n\t\tloaderElement.classList.add( 'gpt-loader' );\n\t\tdocument.body.appendChild( loaderElement );\n\t}\n\n\t/**\n\t * Shows the loader at the specified position.\n\t *\n\t * @param rect - The DOMRect object defining the position to show the loader.\n\t */\n\tpublic showLoader( rect?: DOMRect ): void {\n\t\tconst ele = document.getElementById( this.GPT_RESPONSE_LOADER_ID );\n\t\tif ( ele && rect ) {\n\t\t\tele.style.left = `${ rect.left + 10 }px`;\n\t\t\tele.style.top = `${ rect.top + 10 }px`;\n\t\t\tele.classList.add( 'show-gpt-loader' );\n\t\t} else if ( ele ) {\n\t\t\tele.classList.remove( 'show-gpt-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the loader element from the document.\n\t */\n\tpublic hideLoader(): void {\n\t\tconst ele = document.getElementById( this.GPT_RESPONSE_LOADER_ID );\n\t\tif ( ele ) {\n\t\t\tele.classList.remove( 'show-gpt-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds an error tooltip element to the document body for displaying error messages.\n\t */\n\tprivate addGptErrorToolTip(): void {\n\t\tconst tooltipElement = document.createElement( 'p' );\n\t\ttooltipElement.id = this.GPT_RESPONSE_ERROR_ID;\n\t\ttooltipElement.classList.add( 'response-error' );\n\t\tdocument.body.appendChild( tooltipElement );\n\t}\n\n\t/**\n\t * Displays an error tooltip with the specified message.\n\t *\n\t * @param message - The error message to display in the tooltip.\n\t */\n\tpublic showGptErrorToolTip( message: string ): void {\n\t\tconsole.log( 'Showing error message...', message );\n\t\tconst editor = this.editor;\n\t\tconst view = editor?.editing?.view?.domRoots?.get( 'main' );\n\t\tconst tooltipElement = document.getElementById(\n\t\t\tthis.GPT_RESPONSE_ERROR_ID\n\t\t);\n\n\t\tconst editorRect = view?.getBoundingClientRect();\n\t\tif ( tooltipElement && editorRect ) {\n\t\t\ttooltipElement.classList.add( 'show-response-error' );\n\t\t\ttooltipElement.textContent = message;\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.hideGptErrorToolTip();\n\t\t\t}, 2000 );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the error tooltip element from the document.\n\t */\n\tprivate hideGptErrorToolTip(): void {\n\t\tconst tooltipElement = document.getElementById(\n\t\t\tthis.GPT_RESPONSE_ERROR_ID\n\t\t);\n\t\tif ( tooltipElement ) {\n\t\t\ttooltipElement.classList.remove( 'show-response-error' );\n\t\t}\n\t}\n}\n","import { Command } from 'ckeditor5/src/core.js';\nimport type AiAssistService from './aiassistservice.js';\nimport type { Editor } from 'ckeditor5';\nexport default class AiAssistCommand extends Command {\n\tprivate aiAssistService: AiAssistService;\n\n\t/**\n\t * Creates an instance of the AiAssistCommand.\n\t *\n\t * @param editor - The editor instance to which this command belongs.\n\t * @param aiAssistService - The service instance that handles AI assist functionality.\n\t */\n\tconstructor( editor: Editor, aiAssistService: AiAssistService ) {\n\t\tsuper( editor );\n\t\tthis.aiAssistService = aiAssistService;\n\t}\n\n\t/**\n\t * Checks whether the command can be executed based on the current selection.\n\t *\n\t * @returns A boolean indicating if the command can be executed.\n\t */\n\tpublic override refresh(): void {\n\t\t// Enable the command when the selection is in an empty block or at the beginning of a block\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Executes the AI assist command, processing the user's input and interacting with the AI service.\n\t *\n\t * @param options - An optional parameter for additional execution options.\n\t */\n\tpublic override async execute(): Promise<void> {\n\t\tawait this.aiAssistService.handleSlashCommand();\n\t}\n}\n","import sbd from 'sbd';\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { MarkdownContent } from '../type-identifiers.js';\nimport { aiAssistContext } from '../aiassistcontext.js';\nexport class PromptHelper {\n\tprivate editor: Editor;\n\tprivate contextSize: number;\n\tprivate responseOutputFormat: Array<string>;\n\tprivate responseContextData: Array<any>;\n\tprivate responseFilters: Array<any>;\n\tprivate debugMode: boolean;\n\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tconst config = editor.config.get( 'aiAssist' )!;\n\n\t\tthis.contextSize = config.contextSize!;\n\t\tthis.responseOutputFormat = config.promptSettings?.outputFormat ?? [];\n\t\tthis.responseContextData = config.promptSettings?.contextData ?? [];\n\t\tthis.responseFilters = config.promptSettings?.filters ?? [];\n\t\tthis.debugMode = config.debugMode ?? false;\n\t}\n\n\t/**\n\t * Constructs the system prompt that guides the AI in generating responses.\n\t *\n\t * This method assembles a comprehensive set of instructions and context\n\t * that the AI will utilize to formulate responses based on user input\n\t * and the provided content, ensuring adherence to specified rules and formats.\n\t *\n\t * @param isInlineResponse - A boolean indicating whether the response should be inline.\n\t * @returns A string containing the formatted system prompt for the AI.\n\t*/\n\tpublic getSystemPrompt( isInlineResponse: boolean = false ): string {\n\t\tconst corpus: Array<string> = [];\n\t\tcorpus.push(\n\t\t\t`You will be provided with a partially written article with \"\"\"@@@cursor@@@\"\"\" somewhere \n\t\t\tunder a CONTEXT section, user input under a TASK section, and sometimes there will be articles \n\t\t\t(delimited with marked-up language) separated by Starting Markdown Content \\${ number } and \n\t\t\tEnding Markdown Content \\${ index } with certain instructions to follow while generating a response \n\t\t\tunder an INSTRUCTION section`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`If there is an article with \"\"\"Stating Markdown Content\"\"\", your task is to \n\t\t\tuse that provided information solely to respond to the user request in the TASK section.`\n\t\t);\n\t\tcorpus.push( 'Follow these step-by-step instructions to respond to user inputs:' );\n\t\tcorpus.push(\n\t\t\t`Step 1 - Summarize information under the CONTEXT section, set a tone for the article, and \n\t\t\tlater use that summarized information to generate a response`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`Step 2: If there is an article with \"\"\"Stating Markdown Content\"\"\", \n\t\t\tbreak it into derived sections and eliminate unnecessary information \n\t\t\tthat does not relate to the context and user prompt.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t'Final Step - use all summarized information to respond to user input under the TASK section'\n\t\t);\n\t\tcorpus.push( 'While generating the response, adhere to the following rules:' );\n\t\tcorpus.push(\n\t\t\t`1. Provide only the new text content that should replace \"@@@cursor@@@\" based on the context above, \n\t\t\tensuring that the response must primarily based on the request.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`2. Avoid including any part of the context in the output at any cost, \n\t\t\texcept for necessary glimpses that enhance the response.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`3. Ensure response adheres to the specified tone or style, such as \n\t\t\tformal, informal, or technical, as appropriate for the context.`\n\t\t);\n\t\tcorpus.push( '4. Do not use any markdown formatting in your response. (e.g., **, ##, ###, ---, ===, ____).' );\n\t\tcorpus.push(\n\t\t\t`5. Use a relaxed, formal or informal tone based on the summary of context with lots of personal touches. \n\t\t\tFeel free to include spontaneous thoughts, offhand comments, or quirky observations.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t`6. Vary sentence lengths and styles—include fragments, casual interjections, \n\t\t\tand minor grammar slips, but avoid spelling mistakes.`\n\t\t);\n\t\tcorpus.push(\n\t\t\t'7. Add in personal anecdotes or emotional reactions to make it sound like a genuine conversation.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'8. Avoid overly polished language or structured sentences, aim for a natural and solely human-like tone.'\n\t\t);\n\t\tif ( isInlineResponse ) {\n\t\t\tcorpus.push(\n\t\t\t\t`9: Determine from the context, task, and the position of the @@@cursor@@@ whether the request \n\t\t\t\tinvolves list items, table cells, or inline content.\n\t\t\t\t- List items: Format each item as <li> within an <ol> or <ul> as appropriate.\n\t\t\t\t- Table cells: Present each item in plain text, wrapping it within <p> tags.\n\t\t\t\t- Inline content: Wrap entire response in a single <p> tag, ensuring it fits seamlessly within the existing paragraph or \n\t\t\t\tsentence structure where the @@@cursor@@@ is located.\n\t\t\t\tStrictly adherence to these rules is mandatory to avoid errors, based on where the @@@cursor@@@ is placed within content.`\n\t\t\t);\n\t\t}\n\n\t\tcorpus.push( 'Above are the rules apply every time, but below will only be applied if markdown content is present' );\n\t\tcorpus.push(\n\t\t\t'1. Extract each content as plain text without any special formatting, emphasis, or markdown'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'2. The response should synthesize information from both the editor content ' +\n\t\t\t'and the fetched sources, maintaining a balance between them.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'3. Highlight key points from the fetched sources while ensuring that ' +\n\t\t\t'the context from the editor is acknowledged and integrated where relevant.'\n\t\t);\n\t\tcorpus.push(\n\t\t\t'4. Clearly differentiate between the information derived from the editor ' +\n\t\t\t'content and that from the fetched sources to avoid confusion.'\n\t\t);\n\n\t\tcorpus.push( 'When generating content, adhere to the following HTML-specific rules:' );\n\t\tcorpus.push( '1. Generate an HTML snippet, not a full HTML document.' );\n\t\tcorpus.push( '2. You are an HTML generator. When providing HTML code, ensure it follows standard HTML norms and best practices.' );\n\t\tcorpus.push( '4. Block-level elements (e.g., <p>, <div>, <section>) must not contain other block-level elements.' );\n\t\tcorpus.push( '5. Ensure valid nesting of elements.' );\n\t\tcorpus.push( '6. Use the following allowed HTML tags:' );\n\t\tcorpus.push( `${ this.getAllowedHtmlTags().join( ', ' ) }` );\n\t\tcorpus.push( '7. Do not include any HTML, HEAD, or BODY tags.' );\n\t\tcorpus.push( '8. Ensure all HTML tags are properly closed and nested.' );\n\t\tcorpus.push( '9. Do not include any HTML, HEAD, or BODY tags.' );\n\t\tcorpus.push( '10. Avoid using inline styles or class attributes unless specifically requested.' );\n\t\tcorpus.push( '11. Provide clean, valid HTML that adheres to best practices and is ready for use in web development.' );\n\t\tcorpus.push( '12. Beginning word of response must be a valid html tag' );\n\n\t\t// Join all instructions into a single formatted string.\n\t\tconst systemPrompt = corpus.join( '\\n' );\n\n\t\t// Log the system prompt if debug mode is enabled\n\t\tif ( this.debugMode ) {\n\t\t\tconsole.group( 'AiAssist System Prompt Debug' );\n\t\t\tconsole.log( 'System Prompt:' );\n\t\t\tconsole.log( systemPrompt );\n\t\t\tconsole.groupEnd();\n\t\t}\n\n\t\treturn systemPrompt;\n\t}\n\n\t/**\n\t * Formats the final prompt to be sent to the GPT model, including context and instructions.\n\t *\n\t * @param request - The user's request string.\n\t * @param context - The trimmed context string.\n\t * @param markDownContents - An array of MarkdownContent objects for additional context.\n\t * @param isEditorEmpty - A boolean indicating if the editor is empty.\n\t * @returns The formatted prompt string.\n\t */\n\tpublic formatFinalPrompt(\n\t\trequest: string,\n\t\tcontext: string,\n\t\tmarkDownContents: Array<MarkdownContent>,\n\t\tisEditorEmpty: boolean\n\t): string {\n\t\tconst editor = this.editor;\n\t\tconst contentLanguageCode = editor.locale.contentLanguage;\n\t\tconst corpus = [];\n\n\t\t// Context and Task\n\t\tcorpus.push( 'CONTEXT:' );\n\t\tcorpus.push( `\\n\"\"\"\\n${ context }\\n\"\"\"\\n` );\n\t\tcorpus.push( '\\n\\nTASK:\\n\\n' );\n\t\tcorpus.push( `\"\"\"\\n${ request }\\n\"\"\"\\n` );\n\n\t\t// Markdown Content\n\t\tif ( markDownContents.length ) {\n\t\t\tcorpus.push(\n\t\t\t\t'Refer to following markdown content as a source of information, but generate new text that fits the given context & task.'\n\t\t\t);\n\t\t\tmarkDownContents.forEach( ( markdown, index ) => {\n\t\t\t\tcorpus.push(\n\t\t\t\t\t`\\n\\n------------ Stating Markdown Content ${ index + 1 } ------------\\n\\n`\n\t\t\t\t);\n\t\t\t\tcorpus.push( markdown.content );\n\t\t\t\tcorpus.push(\n\t\t\t\t\t`\\n\\n------------ Ending Markdown Content ${ index + 1 } ------------\\n\\n`\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\t// Instructions\n\t\tcorpus.push( '\\n\\nINSTRUCTIONS:\\n\\n' );\n\t\tcorpus.push( `The response must follow the language code - ${ contentLanguageCode }.` );\n\n\t\t// Response Output Format\n\t\tif ( this.responseOutputFormat.length ) {\n\t\t\tcorpus.push( ...this.responseOutputFormat );\n\t\t}\n\n\t\t// Markdown Content Usage\n\t\tif ( markDownContents.length ) {\n\t\t\tcorpus.push(\n\t\t\t\t'Use information from provided markdown content to generate new text, but do not copy it verbatim.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'Ensure the new text flows naturally with the existing context and integrates smoothly.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'Do not use any markdown formatting in your response. ' +\n\t\t\t\t'specially for title and list item like \"\"\"**Performance**\"\"\" is not acceptable where as \"\"\"performance\"\"\" is.'\n\t\t\t);\n\t\t\tcorpus.push(\n\t\t\t\t'consider whole markdown of single source as content and then generate % content requested'\n\t\t\t);\n\t\t}\n\n\t\t// Response Filters\n\t\tif ( this.responseFilters.length ) {\n\t\t\tcorpus.push( ...this.responseFilters );\n\t\t} else {\n\t\t\tconst defaultFilterInstructions = [\n\t\t\t\t'The response should directly follow the context, avoiding any awkward transitions or noticeable gaps.'\n\t\t\t];\n\t\t\tcorpus.push( ...defaultFilterInstructions );\n\t\t}\n\n\t\t// Context-Specific Instructions\n\t\tif ( !isEditorEmpty ) {\n\t\t\tconst defaultContextInstructions = [\n\t\t\t\t'Ensure the inserted content maintains a seamless connection with the surrounding text,',\n\t\t\t\t'making the transition smooth and natural.',\n\t\t\t\t'Do not modify the original text except to replace the \"@@@cursor@@@\" placeholder with the generated content.'\n\t\t\t];\n\t\t\tcorpus.push( ...defaultContextInstructions );\n\t\t}\n\t\tif ( this.responseContextData.length ) {\n\t\t\tcorpus.push( ...this.responseContextData );\n\t\t}\n\n\t\t// Debugging Information\n\t\tif ( this.debugMode ) {\n\t\t\tconsole.group( 'AiAssist Prompt Debug' );\n\t\t\tconsole.log( 'User Prompt:', request );\n\t\t\tconsole.log( 'Generated GPT Prompt:' );\n\t\t\tconsole.log( corpus.join( '\\n' ) );\n\t\t\tconsole.groupEnd();\n\t\t}\n\n\t\t// Join all instructions into a single formatted string.\n\t\treturn corpus.join( '\\n' );\n\t}\n\n\t/**\n\t * Trims the context around the user's prompt to create a suitable context for the AI model.\n\t * This method identifies the position of the user's prompt within the provided text and extracts\n\t * the surrounding context, placing a cursor placeholder where the prompt is located.\n\t *\n\t * @param prompt - The user's prompt string to locate within the context.\n\t * @param promptContainerText - The text container in which the prompt is located (optional).\n\t * @returns The trimmed context string with a cursor placeholder indicating the prompt's position.\n\t*/\n\tpublic trimContext( prompt: string, promptContainerText: string = '' ): string {\n\t\tlet contentBeforePrompt = '';\n\t\tlet contentAfterPrompt = '';\n\t\tconst splitText = promptContainerText ?? prompt;\n\t\tconst editor = this.editor;\n\t\tconst view = editor?.editing?.view?.domRoots?.get( 'main' );\n\t\tconst context = view?.innerText ?? '';\n\n\t\tconst matchIndex = context.indexOf( splitText );\n\t\tconst nextEnterIndex = context.indexOf( '\\n', matchIndex );\n\t\tconst firstNewlineIndex = nextEnterIndex !== -1 ? nextEnterIndex : matchIndex + splitText.length;\n\t\tconst beforeNewline = context.substring( 0, firstNewlineIndex );\n\t\tconst afterNewline = context.substring( firstNewlineIndex + 1 );\n\t\tconst contextParts = [ beforeNewline, afterNewline ];\n\n\t\tconst allocatedEditorContextToken = Math.floor( this.contextSize * 0.3 );\n\t\tif ( contextParts.length > 1 ) {\n\t\t\tif ( contextParts[ 0 ].length < contextParts[ 1 ].length ) {\n\t\t\t\tcontentBeforePrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 0 ],\n\t\t\t\t\tallocatedEditorContextToken / 2,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tcontentAfterPrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 1 ],\n\t\t\t\t\tallocatedEditorContextToken - contentBeforePrompt.length / 4\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcontentAfterPrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 1 ],\n\t\t\t\t\tallocatedEditorContextToken / 2\n\t\t\t\t);\n\t\t\t\tcontentBeforePrompt = this.extractEditorContent(\n\t\t\t\t\tcontextParts[ 0 ],\n\t\t\t\t\tallocatedEditorContextToken - contentAfterPrompt.length / 4,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Combine the trimmed context with the cursor placeholder\n\t\tconst escapedPrompt = prompt.replace( /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&' ); // Escapes special characters\n\t\tcontentBeforePrompt = contentBeforePrompt.trim().replace( new RegExp( escapedPrompt.slice( 1 ) ), '@@@cursor@@@' );\n\t\tconst trimmedContext = `${ contentBeforePrompt }\\n${ contentAfterPrompt }`;\n\t\treturn trimmedContext.trim();\n\t}\n\n\t/**\n\t * Allocates tokens to the fetched content based on the available limit and the user's prompt.\n\t *\n\t * @param prompt - The user's prompt string.\n\t * @param fetchedContent - An array of MarkdownContent objects containing fetched content.\n\t * @returns An array of MarkdownContent objects with calculated tokenToRequest values.\n\t */\n\tpublic allocateTokensToFetchedContent(\n\t\tprompt: string,\n\t\tfetchedContent: Array<MarkdownContent>\n\t): Array<MarkdownContent> {\n\t\tconst editorContent =\n\t\t\tthis.editor?.editing?.view?.domRoots?.get( 'main' )?.innerText ?? '';\n\t\tconst editorToken = Math.min( Math.floor( this.contextSize * 0.3 ), this.countTokens( editorContent ) );\n\t\tlet availableLimit = this.contextSize - editorToken;\n\n\t\tfetchedContent = fetchedContent\n\t\t\t.map( content => ( {\n\t\t\t\t...content,\n\t\t\t\tavailableToken: this.countTokens( content.content )\n\t\t\t} ) )\n\t\t\t.sort( ( a, b ) => ( a.availableToken ?? 0 ) - ( b.availableToken ?? 0 ) );\n\n\t\tlet maxTokenFromEachURL = availableLimit / fetchedContent.length;\n\n\t\treturn fetchedContent.map( ( content, index ) => {\n\t\t\tif (\n\t\t\t\tcontent.availableToken &&\n\t\t\t\tcontent.availableToken <= maxTokenFromEachURL\n\t\t\t) {\n\t\t\t\tcontent.tokenToRequest = content.availableToken;\n\t\t\t\tavailableLimit -= content.availableToken;\n\t\t\t} else if ( content.availableToken ) {\n\t\t\t\tcontent.tokenToRequest = maxTokenFromEachURL;\n\t\t\t\tavailableLimit -= maxTokenFromEachURL;\n\t\t\t}\n\t\t\tmaxTokenFromEachURL =\n\t\t\t\tavailableLimit / ( fetchedContent.length - ( index + 1 ) );\n\t\t\tif ( content.tokenToRequest ) {\n\t\t\t\tcontent.content = this.trimLLMContentByTokens( content.content, content.tokenToRequest );\n\t\t\t}\n\t\t\treturn content;\n\t\t} );\n\t}\n\n\t/**\n\t * Generates Markdown content for an array of URLs by fetching their content.\n\t *\n\t * @param urls - An array of URLs to fetch content from.\n\t * @returns A promise that resolves to an array of MarkdownContent objects.\n\t */\n\tpublic async generateMarkDownForUrls(\n\t\turls: Array<string>\n\t): Promise<Array<MarkdownContent>> {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tlet errorMsg: string | undefined;\n\t\tconst markDownContents = await Promise.all(\n\t\t\turls.map( async url => {\n\t\t\t\tconst content = await this.fetchUrlContent( url );\n\t\t\t\treturn { content, url };\n\t\t\t} )\n\t\t);\n\n\t\tconst emptyContent = markDownContents.filter(\n\t\t\t( content ): content is MarkdownContent => !content?.content\n\t\t);\n\t\tif ( emptyContent.length ) {\n\t\t\tconst urlStr = emptyContent?.map( content => content?.url ).join( ',' );\n\t\t\terrorMsg = t( 'Failed to fetch content of : %0', urlStr );\n\t\t\tif ( errorMsg ) {\n\t\t\t\taiAssistContext.showError( errorMsg );\n\t\t\t}\n\t\t\tthrow new Error( 'Unable to fetch content for few urls' );\n\t\t}\n\t\treturn markDownContents.filter(\n\t\t\t( content ): content is MarkdownContent => content !== null\n\t\t);\n\t}\n\n\t/**\n\t * Fetches the content of a given URL and returns it as a string.\n\t *\n\t * @param url - The URL to fetch content from.\n\t * @returns A promise that resolves to the fetched content as a string.\n\t * @throws Will throw an error if the URL is invalid or if the fetch fails.\n\t */\n\tpublic async fetchUrlContent( url: string ): Promise<string> {\n\t\tconst urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n\t\tconst trimmedUrl = url.trim();\n\n\t\tif ( !urlRegex.test( trimmedUrl ) ) {\n\t\t\tthrow new Error( 'Invalid URL' );\n\t\t}\n\n\t\ttry {\n\t\t\t// Use a regular expression to remove hidden characters\n\t\t\tconst cleanedUrl = trimmedUrl.replace( /[^\\x20-\\x7E]/g, '' );\n\t\t\tconst requestURL = `https://r.jina.ai/${ cleanedUrl.trim() }`;\n\t\t\tconst response = await fetch( requestURL.trim(), {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-With-Generated-Alt': 'true'\n\t\t\t\t}\n\t\t\t} );\n\t\t\tif ( !response.ok ) {\n\t\t\t\tthrow new Error( `HTTP error! status: ${ response.status }` );\n\t\t\t}\n\t\t\tconst content = await response.text();\n\n\t\t\t// Updated error matching\n\t\t\tif ( content.includes( 'Warning: Target URL returned error' ) ) {\n\t\t\t\tthrow new Error( `Target URL (${ trimmedUrl }) returned an error` );\n\t\t\t}\n\n\t\t\tif ( content.trim().length === 0 ) {\n\t\t\t\tthrow new Error( 'Empty content received' );\n\t\t\t}\n\n\t\t\treturn content.replace( /\\(https?:\\/\\/[^\\s]+\\)/g, '' ).replace( /^\\s*$/gm, '' ).trim();\n\t\t} catch ( error ) {\n\t\t\tconsole.error( `Failed to fetch content: ${ url }`, error );\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Counts the number of tokens in the provided content string.\n\t *\n\t * @param content - The content string to count tokens in.\n\t * @returns The number of tokens in the content.\n\t */\n\tpublic countTokens( content: string ): number {\n\t\tif ( !content || typeof content !== 'string' ) {\n\t\t\treturn 0;\n\t\t}\n\t\t// Normalize the content by trimming and reducing multiple whitespaces.\n\t\tconst normalizedContent = content\n\t\t\t.trim()\n\t\t\t.replace( /\\s+/g, ' ' );\n\t\t// Approximate tokens by breaking words, contractions, and common punctuation marks.\n\t\tconst tokens = normalizedContent.match( /\\b\\w+('\\w+)?\\b|[.,!?;:\"(){}[\\]]/g ) || [];\n\n\t\t// Heuristic: Long words (over 10 characters) are likely to be split into multiple tokens.\n\t\t// GPT often breaks down long words into smaller subword chunks.\n\t\tlet approxTokenCount = 0;\n\t\ttokens.forEach( token => {\n\t\t\t// Break long words into chunks to approximate GPT subword tokenization.\n\t\t\tif ( token.length > 10 ) {\n\t\t\t\tapproxTokenCount += Math.ceil( token.length / 4 ); // Approximation: 4 characters per token.\n\t\t\t} else {\n\t\t\t\tapproxTokenCount += 1;\n\t\t\t}\n\t\t} );\n\n\t\treturn approxTokenCount;\n\t}\n\n\t/**\n\t * Trims the LLM content by tokens while ensuring that sentences or other structures (e.g., bullet points, paragraphs)\n\t * are not clipped mid-way.\n\t *\n\t * @param content - The LLM-generated content string to trim.\n\t * @param maxTokens - The maximum number of tokens allowed.\n\t * @returns The trimmed content string.\n\t */\n\tpublic trimLLMContentByTokens( content: string, maxTokens: number ): string {\n\t\tconst elements = content.split( '\\n' );\n\t\tlet accumulatedTokens = 0;\n\t\tlet trimmedContent = '';\n\n\t\tfor ( const element of elements ) {\n\t\t\tconst elementTokenCount = this.countTokens( element );\n\t\t\tif ( accumulatedTokens + elementTokenCount > maxTokens ) {\n\t\t\t\tbreak; // Stop if adding this element would exceed the token limit.\n\t\t\t}\n\t\t\taccumulatedTokens += elementTokenCount;\n\t\t\ttrimmedContent += element + '\\n'; // Add the whole structural element.\n\t\t}\n\n\t\treturn trimmedContent;\n\t}\n\n\t/**\n\t * Retrieves the allowed HTML tags based on the CKEditor schema.\n\t *\n\t * @returns An array of allowed HTML tags.\n\t */\n\tpublic getAllowedHtmlTags(): Array<string> {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst definitions = schema.getDefinitions();\n\t\tconst schemaNodes = Object.keys( definitions ).sort();\n\n\t\t// Map of CKEditor nodes to HTML tags\n\t\tconst nodeToHtmlMap: Record<string, string> = {\n\t\t\tblockQuote: 'blockquote',\n\t\t\tcaption: 'figcaption',\n\t\t\tcodeBlock: 'pre',\n\t\t\theading1: 'h1',\n\t\t\theading2: 'h2',\n\t\t\theading3: 'h3',\n\t\t\timageBlock: 'img',\n\t\t\timageInline: 'img',\n\t\t\tparagraph: 'p',\n\t\t\ttable: 'table',\n\t\t\ttableCell: 'td',\n\t\t\ttableRow: 'tr',\n\t\t\t$listItem: 'li',\n\t\t\thorizontalLine: 'hr'\n\t\t};\n\n\t\t// Map text attributes to HTML tags\n\t\tconst textAttributeToHtmlMap: Record<string, string> = {\n\t\t\tbold: 'strong',\n\t\t\titalic: 'em',\n\t\t\tcode: 'code',\n\t\t\tstrikethrough: 's',\n\t\t\tsubscript: 'sub',\n\t\t\tsuperscript: 'sup',\n\t\t\tunderline: 'u',\n\t\t\tlinkHref: 'a'\n\t\t};\n\n\t\t// Collect allowed tags\n\t\tconst allowedTags = new Set<string>();\n\n\t\t// Add tags from node mappings\n\t\tschemaNodes.forEach( node => {\n\t\t\tif ( node in nodeToHtmlMap ) {\n\t\t\t\tallowedTags.add( nodeToHtmlMap[ node ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Add tags from text attributes\n\t\tconst textDefinition = definitions.$text;\n\t\tif ( textDefinition && textDefinition.allowAttributes ) {\n\t\t\ttextDefinition.allowAttributes.forEach( ( attr: string ) => {\n\t\t\t\tif ( attr in textAttributeToHtmlMap ) {\n\t\t\t\t\tallowedTags.add( textAttributeToHtmlMap[ attr ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// If listItem is present, add ul and ol\n\t\tif ( allowedTags.has( 'li' ) ) {\n\t\t\tallowedTags.add( 'ul' );\n\t\t\tallowedTags.add( 'ol' );\n\t\t}\n\n\t\t// Sort and return the unique allowed tags\n\t\treturn Array.from( allowedTags ).sort();\n\t}\n\n\t/**\n\t * Extracts a portion of content based on the specified context size and direction.\n\t *\n\t * @param contentAfterPrompt - The content string to extract from.\n\t * @param contextSize - The maximum size of the context to extract.\n\t * @param reverse - A boolean indicating whether to extract in reverse order (default is false).\n\t * @returns The extracted content string.\n\t */\n\tpublic extractEditorContent(\n\t\tcontentAfterPrompt: string,\n\t\tcontextSize: number,\n\t\treverse: boolean = false\n\t): string {\n\t\tlet trimmedContent = '';\n\t\tlet charCount = 0;\n\t\t// Tokenize the content into sentences using the sbd library\n\t\tconst sentences = sbd.sentences( contentAfterPrompt, {\n\t\t\tpreserve_whitespace: true,\n\t\t\thtml_boundaries: true,\n\t\t\tallowed_tags: [ 'blockquote', 'figcaption', 'pre', 'h2', 'h1', 'h3', 'img', 'p', 'table', 'td', 'tr', 'li', 'hr', 'br' ]\n\t\t} );\n\n\t\t// Iterate over the sentences based on the direction\n\t\tconst iterator = reverse ? sentences.reverse() : sentences;\n\n\t\tfor ( const sentence of iterator ) {\n\t\t\tconst sentenceLength = sentence.length;\n\t\t\t// Check if adding this sentence would exceed the context size\n\t\t\tif ( ( charCount + sentenceLength ) / 4 <= contextSize ) {\n\t\t\t\ttrimmedContent = reverse ?\n\t\t\t\t\tsentence + trimmedContent :\n\t\t\t\t\ttrimmedContent + sentence;\n\t\t\t\tcharCount += sentenceLength;\n\t\t\t} else {\n\t\t\t\tbreak; // Stop if adding the next sentence would exceed the context size\n\t\t\t}\n\t\t}\n\n\t\t// Trim to remove any trailing whitespace and return the final trimmed content\n\t\treturn trimmedContent.trim();\n\t}\n}\n","import type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element, Model, Position } from 'ckeditor5/src/engine.js';\n\nexport class HtmlParser {\n\tprivate editor: Editor;\n\tprivate model: Model;\n\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tthis.model = editor.model;\n\t}\n\n\t/**\n\t * Inserts simple HTML content into the editor.\n\t *\n\t * @param html - The HTML string to be inserted into the editor.\n\t * @returns A promise that resolves when the HTML has been inserted.\n\t */\n\tpublic async insertSimpleHtml( html: string ): Promise<void> {\n\t\tconsole.log( 'Attempting to insert simple HTML:', html );\n\t\tconst viewFragment = this.editor.data.processor.toView( html );\n\t\tconst modelFragment = this.editor.data.toModel( viewFragment, '$root' );\n\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\n\t\tlet insertionPosition = selection.getLastPosition();\n\t\tconst lastInsertedChild = modelFragment.getChild( modelFragment.childCount - 1 );\n\n\t\tconst currentChildIndex = selection.getLastPosition()?.path[ 0 ];\n\t\tconst lastUpdatedElementInRoot = root?.getChild( currentChildIndex ?? 0 );\n\n\t\tthis.model.change( writer => {\n\t\t\tif ( lastUpdatedElementInRoot?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElementInRoot.isEmpty ?\n\t\t\t\t\twriter.createPositionAt( lastUpdatedElementInRoot, 'end' ) :\n\t\t\t\t\twriter.createPositionAfter( lastUpdatedElementInRoot );\n\t\t\t}\n\n\t\t\tif ( insertionPosition && root ) {\n\t\t\t\t// Insert element to current selection\n\t\t\t\twriter.setSelection( insertionPosition );\n\t\t\t\tthis.model.insertContent( modelFragment, insertionPosition );\n\n\t\t\t\t// Check if it required to add break to current context of list etc.\n\t\t\t\t// More to will be added during testing any edge case\n\t\t\t\tlet isBreakElementReq = lastInsertedChild?.getAttribute( 'listItemId' );\n\t\t\t\tif ( lastInsertedChild?.is( 'element' ) ) {\n\t\t\t\t\tisBreakElementReq = isBreakElementReq || lastInsertedChild.name === 'table';\n\t\t\t\t}\n\t\t\t\tif ( isBreakElementReq && lastInsertedChild ) {\n\t\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t\t\t\t\twriter.insert( paragraph, writer.createPositionAfter( lastInsertedChild ) );\n\t\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t\t} else if ( lastInsertedChild ) {\n\t\t\t\t\twriter.setSelection( writer.createPositionAfter( lastInsertedChild ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Maintain a delay to simulate asynchronous behavior\n\t\tawait new Promise( resolve => setTimeout( resolve, 100 ) );\n\t}\n\n\t/**\n\t * Inserts HTML content as text into the editor.\n\t *\n\t * @param content - The HTML element containing the text to be inserted.\n\t * @param position - The position at which to insert the text (optional).\n\t * @param stream - Indicates whether to insert text in a streaming manner (default is false).\n\t * @param shouldAddBreakAtEnd - Indicates whether to add a paragraph break at the end of the inserted content (default is false).\n\t * @returns A promise that resolves when the text has been inserted.\n\t *\n\t * This method processes the provided HTML element, converting it to a model fragment,\n\t * and inserts it into the editor at the specified position. If streaming is enabled,\n\t * elements are inserted one at a time, allowing for a more dynamic insertion experience.\n\t * An optional paragraph break can be added at the end of the inserted content.\n\t*/\n\tpublic async insertAsText(\n\t\tcontent: HTMLElement,\n\t\tposition?: Position,\n\t\tstream: boolean = false,\n\t\tshouldAddBreakAtEnd: boolean = false\n\t): Promise<void> {\n\t\tconst viewFragment = this.editor.data.processor.toView( content.outerHTML );\n\t\tconst modelFragment = this.editor.data.toModel( viewFragment, '$root' );\n\t\tconst childrenToInsert = Array.from( modelFragment.getChildren() );\n\t\tconst root = this.model.document.getRoot();\n\n\t\tfor ( const [ index, element ] of childrenToInsert.entries() ) {\n\t\t\tif ( element.is( 'element' ) ) {\n\t\t\t\tconst insertPosition = index === 0 ? position : undefined; // Determine position for insertion\n\t\t\t\tif ( stream ) {\n\t\t\t\t\tawait this.insertElementAsStream( element, insertPosition );\n\t\t\t\t} else {\n\t\t\t\t\tawait this.batchInsertOfElement( element, insertPosition );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( shouldAddBreakAtEnd ) {\n\t\t\tthis.model.change( writer => {\n\t\t\t\tconst lastPosition = this.model.document.selection.getLastPosition();\n\t\t\t\tconst currentChildIndex = lastPosition?.path[ 0 ];\n\t\t\t\tif ( root && currentChildIndex != undefined ) {\n\t\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t\t\t\t\twriter.insert( paragraph, root, currentChildIndex + 1 );\n\t\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts a given element into the editor at the specified position.\n\t *\n\t * @param element - The element to be inserted into the editor.\n\t * @param position - The position at which to insert the element.\n\t * If not provided, the element will be inserted at the current selection position.\n\t * @returns A promise that resolves when the element has been inserted.\n\t */\n\tpublic async batchInsertOfElement( element: Element, position?: Position ): Promise<void> {\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\n\t\tlet insertionPosition: Position | undefined = position;\n\n\t\tif ( !position ) {\n\t\t\tconst currentChildIndex = selection.getFirstPosition()?.path[ 0 ];\n\t\t\tconst lastUpdatedElementInRoot = root?.getChild( currentChildIndex ?? 0 );\n\t\t\tif ( lastUpdatedElementInRoot?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElementInRoot.isEmpty ?\n\t\t\t\t\tthis.model.createPositionAt( lastUpdatedElementInRoot, 'end' ) :\n\t\t\t\t\tthis.model.createPositionAfter( lastUpdatedElementInRoot );\n\t\t\t}\n\t\t}\n\n\t\t// insert content at current identified position\n\t\tthis.model.change( writer => {\n\t\t\tthis.model.insertContent( element, insertionPosition );\n\t\t\twriter.setSelection( element, 'end' );\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts a given element into the editor at the specified position in a streaming manner.\n\t *\n\t * @param element - The element to be inserted into the editor.\n\t * @param position - The position at which to insert the element.\n\t * If not provided, the element will be inserted at the current selection position.\n\t * @returns A promise that resolves when the element has been inserted and all text has been streamed in.\n\t */\n\tprivate async insertElementAsStream( element: Element, position?: Position ): Promise<void> {\n\t\tconst selection = this.model.document.selection;\n\t\tconst root = this.model.document.getRoot();\n\t\tconst lastRecognizedPosition = selection.getLastPosition();\n\n\t\tlet insertionPosition: Position | undefined = position;\n\t\tlet targetElement: Element;\n\n\t\t// Determine insertion position\n\t\tif ( !position ) {\n\t\t\tconst currentChildIndex = lastRecognizedPosition?.path[ 0 ];\n\t\t\tconst lastUpdatedElement = root?.getChild( currentChildIndex ?? 0 );\n\n\t\t\tif ( lastUpdatedElement?.is( 'element' ) ) {\n\t\t\t\tinsertionPosition = lastUpdatedElement.isEmpty ?\n\t\t\t\t\tthis.model.createPositionAt( lastUpdatedElement, 'end' ) :\n\t\t\t\t\tthis.model.createPositionAfter( lastUpdatedElement );\n\t\t\t}\n\n\t\t\tthis.model.change( writer => {\n\t\t\t\ttargetElement = writer.createElement( element.name );\n\t\t\t\t// Set attributes in a more concise way\n\t\t\t\tfor ( const [ key, value ] of element.getAttributes() ) {\n\t\t\t\t\ttargetElement._setAttribute( key, value );\n\t\t\t\t}\n\t\t\t\tthis.model.insertContent( targetElement, insertionPosition );\n\t\t\t\tif ( insertionPosition ) {\n\t\t\t\t\twriter.setSelection( targetElement, 'end' );\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// current element from the offset\n\t\t\tconst currentElement = lastRecognizedPosition?.parent;\n\t\t\tif ( currentElement?.is( 'element' ) ) {\n\t\t\t\ttargetElement = currentElement;\n\t\t\t}\n\t\t}\n\n\t\tconst textChildren = Array.from( element.getChildren() ).filter( child => child.is( '$text' ) );\n\n\t\tfor ( const textNode of textChildren ) {\n\t\t\tif ( !textNode.is( '$text' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst textAttributes = Array.from( textNode.getAttributes() );\n\t\t\tconst textContent = textNode._data;\n\n\t\t\tfor ( const char of textContent ) {\n\t\t\t\tawait new Promise( resolve => {\n\t\t\t\t\tthis.model.change( writer => {\n\t\t\t\t\t\tconst currentPosition = this.editor.model.document.selection.getLastPosition();\n\t\t\t\t\t\tconst newPosition = currentPosition!.getShiftedBy( 1 );\n\t\t\t\t\t\tconst shouldAppendAtEnd = newPosition.offset === currentPosition?.parent.maxOffset;\n\t\t\t\t\t\twriter.insertText( char, textAttributes, targetElement, shouldAppendAtEnd ? 'end' : currentPosition?.offset );\n\t\t\t\t\t\twriter.setSelection( this.editor.model.document.selection.getLastPosition() );\n\t\t\t\t\t} );\n\t\t\t\t\tsetTimeout( resolve, 5 ); // Maintain the streaming effect\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Set selection\n\t\tif ( !position ) {\n\t\t\tthis.model.change( writer => {\n\t\t\t\twriter.setSelection( targetElement, 'end' );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Validate given string as a HTML content\n\t * @param content string containing html content\n\t * @returns A boolean value as result of validation\n\t */\n\tpublic isCompleteHtmlChunk( html: string ): boolean {\n\t\tconst openingTags = ( html.match( /<[^/][^>]*>/g ) || [] ).length;\n\t\tconst closingTags = ( html.match( /<\\/[^>]+>/g ) || [] ).length;\n\n\t\t// Check if all opening tags have corresponding closing tags\n\t\tif ( openingTags !== closingTags ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for incomplete tags\n\t\tif ( html.includes( '<' ) && !html.includes( '>' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the HTML starts with an opening tag and ends with a closing tag\n\t\tconst trimmedHtml = html.trim();\n\t\tif ( !trimmedHtml.startsWith( '<' ) || !trimmedHtml.endsWith( '>' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","import type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type { AiModel, MarkdownContent } from './type-identifiers.js';\nimport { aiAssistContext } from './aiassistcontext.js';\nimport { PromptHelper } from './util/prompt.js';\nimport { HtmlParser } from './util/htmlparser.js';\n\nexport default class AiAssistService {\n\tprivate editor: Editor;\n\tprivate aiModel: AiModel;\n\tprivate apiKey: string | undefined;\n\tprivate endpointUrl: string;\n\tprivate temperature: number | undefined;\n\tprivate timeOutDuration: number;\n\tprivate maxTokens: number;\n\tprivate retryAttempts: number;\n\tprivate streamContent: boolean;\n\tprivate stopSequences: Array<string>;\n\tprivate aiAssistFeatureLockId = Symbol( 'ai-assist-feature' );\n\tprivate promptHelper: PromptHelper;\n\tprivate htmlParser: HtmlParser;\n\n\tprivate buffer = '';\n\tprivate openTags: Array<string> = [];\n\tprivate isInlineInsertion: boolean = false;\n\n\t/**\n\t * Initializes the AiAssistService with the provided editor and configuration settings.\n\t *\n\t * @param editor - The CKEditor instance to be used with the AI assist service.\n\t */\n\tconstructor( editor: Editor ) {\n\t\tthis.editor = editor;\n\t\tthis.promptHelper = new PromptHelper( editor );\n\t\tthis.htmlParser = new HtmlParser( editor );\n\t\tconst config = editor.config.get( 'aiAssist' )!;\n\n\t\tthis.aiModel = config.model!;\n\t\tthis.apiKey = config.apiKey;\n\t\tthis.endpointUrl = config.endpointUrl!;\n\t\tthis.temperature = config.temperature;\n\t\tthis.timeOutDuration = config.timeOutDuration ?? 45000;\n\t\tthis.maxTokens = config.maxTokens!;\n\t\tthis.retryAttempts = config.retryAttempts!;\n\t\tthis.stopSequences = config.stopSequences!;\n\t\tthis.streamContent = config.streamContent ?? true;\n\t}\n\n\t/**\n\t * Handles the slash command input from the user, processes it, and interacts with the AI model.\n\t *\n\t * @returns A promise that resolves when the command has been processed.\n\t */\n\tpublic async handleSlashCommand(): Promise<void> {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\t\tconst root = model.document.getRoot();\n\n\t\tlet content: string | undefined;\n\t\tlet parentEquivalentHTML: HTMLElement | undefined;\n\t\tlet parent: Element | undefined;\n\t\tconst position = model.document.selection.getLastPosition();\n\n\t\tif ( position && root ) {\n\t\t\tparent = position.parent as Element;\n\t\t\tconst inlineSlash = parent.name === 'inline-slash' ? parent : undefined;\n\t\t\tconst equivalentView = mapper.toViewElement( parent );\n\t\t\tparentEquivalentHTML = equivalentView ? view.domConverter.mapViewToDom( equivalentView ) : undefined;\n\n\t\t\tif ( inlineSlash ) {\n\t\t\t\tthis.isInlineInsertion = true;\n\t\t\t\tconst startingPath = inlineSlash.getPath();\n\t\t\t\tconst endingPath = position?.path;\n\t\t\t\tconst startPosition = model.createPositionFromPath( root, startingPath ); // Example path\n\t\t\t\tconst endPosition = model.createPositionFromPath( root, endingPath ); // Example path\n\t\t\t\tconst range = model.createRange( startPosition, endPosition );\n\t\t\t\tparentEquivalentHTML = equivalentView?.parent ?\n\t\t\t\t\tview.domConverter.mapViewToDom( equivalentView.parent ) as HTMLElement :\n\t\t\t\t\tundefined;\n\t\t\t\tcontent = '';\n\n\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\tif ( item.is( '$textProxy' ) ) {\n\t\t\t\t\t\tcontent += item.data.trim(); // Add text data\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( parentEquivalentHTML ) {\n\t\t\t\tcontent = parentEquivalentHTML?.innerText;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst domSelection = window.getSelection();\n\t\t\tconst domRange: any = domSelection?.getRangeAt( 0 );\n\t\t\tconst rect = domRange.getBoundingClientRect();\n\n\t\t\taiAssistContext.showLoader( rect );\n\t\t\tconst gptPrompt = await this.generateGptPromptBasedOnUserPrompt(\n\t\t\t\tcontent ?? '',\n\t\t\t\tparentEquivalentHTML?.innerText\n\t\t\t);\n\t\t\tif ( parent && gptPrompt ) {\n\t\t\t\tawait this.fetchAndProcessGptResponse( gptPrompt, parent );\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tconsole.error( 'Error handling slash command:', error );\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tthis.isInlineInsertion = false;\n\t\t\taiAssistContext.hideLoader();\n\t\t}\n\t}\n\n\t/**\n\t * Fetches and processes the GPT response based on the provided prompt and parent element.\n\t *\n\t * @param prompt - The prompt to send to the GPT model.\n\t * @param parent - The parent element in the editor where the response will be inserted.\n\t * @param retries - The number of retry attempts for the API call (default is the configured retry attempts).\n\t * @returns A promise that resolves when the response has been processed.\n\t */\n\tprivate async fetchAndProcessGptResponse(\n\t\tprompt: string,\n\t\tparent: Element,\n\t\tretries: number = this.retryAttempts\n\t): Promise<void> {\n\t\tconsole.log( 'Starting fetchAndProcessGptResponse' );\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(\n\t\t\t() => controller.abort(),\n\t\t\tthis.timeOutDuration\n\t\t);\n\n\t\tlet buffer = '';\n\t\tlet contentBuffer = '';\n\n\t\ttry {\n\t\t\tconst response = await fetch( this.endpointUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${ this.apiKey }`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify( {\n\t\t\t\t\tmodel: this.aiModel,\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{ role: 'system', content: this.promptHelper.getSystemPrompt( this.isInlineInsertion ) },\n\t\t\t\t\t\t{ role: 'user', content: prompt }\n\t\t\t\t\t],\n\t\t\t\t\ttemperature: this.temperature,\n\t\t\t\t\tmax_tokens: this.maxTokens,\n\t\t\t\t\tstop: this.stopSequences,\n\t\t\t\t\tstream: true\n\t\t\t\t} ),\n\t\t\t\tsignal: controller.signal\n\t\t\t} );\n\n\t\t\tclearTimeout( timeoutId );\n\n\t\t\tif ( !response.ok ) {\n\t\t\t\tthrow new Error( 'Fetch failed' );\n\t\t\t}\n\n\t\t\taiAssistContext.hideLoader();\n\n\t\t\tconst reader = response.body!.getReader();\n\t\t\tconst decoder = new TextDecoder( 'utf-8' );\n\n\t\t\tthis.clearParentContent( parent );\n\t\t\tthis.editor.enableReadOnlyMode( this.aiAssistFeatureLockId );\n\n\t\t\tconsole.log( 'Starting to process response' );\n\t\t\tfor ( ;; ) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif ( done ) {\n\t\t\t\t\tconsole.log( 'Finished reading response' );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst chunk = decoder.decode( value, { stream: true } );\n\t\t\t\tbuffer += chunk;\n\n\t\t\t\tlet newlineIndex;\n\t\t\t\twhile ( ( newlineIndex = buffer.indexOf( '\\n' ) ) !== -1 ) {\n\t\t\t\t\tconst line = buffer.slice( 0, newlineIndex ).trim();\n\t\t\t\t\tbuffer = buffer.slice( newlineIndex + 1 );\n\n\t\t\t\t\tif ( line.startsWith( 'data: ' ) ) {\n\t\t\t\t\t\tconst jsonStr = line.slice( 5 ).trim();\n\t\t\t\t\t\tif ( jsonStr === '[DONE]' ) {\n\t\t\t\t\t\t\tconsole.log( 'Received [DONE] signal' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst data = JSON.parse( jsonStr );\n\t\t\t\t\t\t\tconst content = data.choices[ 0 ]?.delta?.content;\n\t\t\t\t\t\t\tif ( content ) {\n\t\t\t\t\t\t\t\tcontentBuffer += content;\n\t\t\t\t\t\t\t\tif ( this.htmlParser.isCompleteHtmlChunk( contentBuffer ) ) {\n\t\t\t\t\t\t\t\t\tawait this.processContent( contentBuffer, parent );\n\t\t\t\t\t\t\t\t\tcontentBuffer = '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch ( parseError ) {\n\t\t\t\t\t\t\tconsole.warn( 'Error parsing JSON:', parseError );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Process any remaining content in the buffer\n\t\t\tif ( contentBuffer.trim() ) {\n\t\t\t\tawait this.processContent( contentBuffer.trim(), parent );\n\t\t\t}\n\t\t} catch ( error: any ) {\n\t\t\tconsole.error( 'Error in fetchAndProcessGptResponse:', error );\n\t\t\tconst errorIdentifier =\n\t\t\t\t( error?.message || '' ).trim() || ( error?.name || '' ).trim();\n\t\t\tconst isRetryableError = [\n\t\t\t\t'AbortError',\n\t\t\t\t'ReadableStream not supported',\n\t\t\t\t'AiAssist: Fetch failed'\n\t\t\t].includes( errorIdentifier );\n\t\t\tif ( retries > 0 && isRetryableError ) {\n\t\t\t\tconsole.warn( `Retrying... (${ retries } attempts left)` );\n\t\t\t\treturn await this.fetchAndProcessGptResponse(\n\t\t\t\t\tprompt,\n\t\t\t\t\tparent,\n\t\t\t\t\tretries - 1\n\t\t\t\t);\n\t\t\t}\n\t\t\tlet errorMessage: string;\n\t\t\tswitch ( error?.name || error?.message?.trim() ) {\n\t\t\t\tcase 'ReadableStream not supported':\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'Browser does not support readable streams'\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AiAssist: Fetch failed':\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'We couldn\\'t connect to the AI. Please check your internet'\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\terrorMessage = t(\n\t\t\t\t\t\t'We couldn\\'t connect to the AI. Please check your internet'\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\taiAssistContext.showError( errorMessage );\n\t\t} finally {\n\t\t\tthis.editor.disableReadOnlyMode( this.aiAssistFeatureLockId );\n\t\t}\n\t}\n\n\t/**\n\t * Processes the provided content and inserts it into the specified parent element.\n\t * Depending on the feature flag, it either uses a simple HTML insertion method\n\t * or processes the content as HTML.\n\t *\n\t * @param content - The content to be processed and inserted.\n\t * @param parent - The parent element in the editor where the content will be inserted.\n\t */\n\tprivate async processContent( content: string, parent: Element ): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log( '--- Start of processContent ---' );\n\t\t\tconsole.log( 'Processing content:', content, this.isInlineInsertion );\n\t\t\tif ( this.isInlineInsertion ) {\n\t\t\t\tconst position = this.editor.model.document.selection.getLastPosition();\n\t\t\t\tconst tempParagraph: HTMLElement = document.createElement( 'div' );\n\t\t\t\ttempParagraph.innerHTML = content;\n\t\t\t\tawait this.htmlParser.insertAsText( tempParagraph || '', position ?? undefined, this.streamContent );\n\t\t\t} else {\n\t\t\t\tif ( this.streamContent ) {\n\t\t\t\t\t// Existing complex content processing logic\n\t\t\t\t\tawait this.proceedHtmlResponse( content );\n\t\t\t\t} else {\n\t\t\t\t\t// Use the simple HTML insertion method\n\t\t\t\t\tawait this.htmlParser.insertSimpleHtml( content );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log( '--- End of processContent ---' );\n\t\t} catch ( error ) {\n\t\t\tconsole.error( error );\n\t\t}\n\t}\n\n\t/**\n\t * Processes the provided HTML string and inserts its content into the editor.\n\t * It creates a temporary div to parse the HTML and handles different types of\n\t * elements (lists, tables, headings, etc.) accordingly.\n\t *\n\t * @param html - The HTML string to be processed and inserted into the editor.\n\t */\n\tprivate async proceedHtmlResponse( html: string ): Promise<void> {\n\t\tconst tempDiv: HTMLElement = document.createElement( 'div' );\n\t\ttempDiv.innerHTML = html;\n\n\t\tfor ( const child of Array.from( tempDiv.childNodes ) ) {\n\t\t\tconst element = child as HTMLElement;\n\t\t\tif ( element.nodeType === Node.ELEMENT_NODE ) {\n\t\t\t\tconst elementName = element.tagName.toLowerCase();\n\t\t\t\tconst isStreamingNotAllow = [\n\t\t\t\t\t'table', 'blockquote', 'pre', 'img', 'form', 'figure'\n\t\t\t\t].includes( elementName );\n\n\t\t\t\tif ( isStreamingNotAllow ) {\n\t\t\t\t\tawait this.htmlParser.insertSimpleHtml( element.outerHTML );\n\t\t\t\t}\n\t\t\t\telse if ( elementName === 'ul' || elementName === 'ol' ) {\n\t\t\t\t\tawait this.htmlParser.insertAsText( element, undefined, true, true );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tawait this.htmlParser.insertAsText( element, undefined, true );\n\t\t\t\t}\n\t\t\t} else if ( element.nodeType === Node.TEXT_NODE && element.textContent ) {\n\t\t\t\tconst tempParagraph: HTMLElement = document.createElement( 'div' );\n\t\t\t\ttempParagraph.innerText = element.textContent;\n\t\t\t\tawait this.htmlParser.insertAsText( tempParagraph, undefined, true );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clears the content of the specified parent element in the editor.\n\t *\n\t * @param parent - The parent element whose content will be cleared.\n\t */\n\tprivate clearParentContent( parent: Element ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst root = model.document.getRoot();\n\t\tconst position = model.document.selection.getLastPosition();\n\t\tconst inlineSlash = Array.from( parent.getChildren() ).find( ( child: any ) => child.name === 'inline-slash' ) as Element;\n\n\t\tif ( root && position ) {\n\t\t\teditor.model.change( writer => {\n\t\t\t\tconst startingPath = inlineSlash?.getPath() || parent.getPath();\n\t\t\t\tconst range = model.createRange(\n\t\t\t\t\tmodel.createPositionFromPath( root, startingPath ),\n\t\t\t\t\tmodel.createPositionFromPath( root, position.path )\n\t\t\t\t);\n\t\t\t\twriter.remove( range );\n\t\t\t\twriter.setSelection( model.createPositionFromPath( root, startingPath ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Generates a GPT prompt based on the user's input and the current context in the editor.\n\t * This method processes the input prompt, extracts any URLs, and formats the final prompt\n\t * to be sent to the GPT model. It also handles the case where the editor is empty.\n\t *\n\t * @param prompt - The user's input prompt, typically starting with a slash.\n\t * @param promptContainerText - Optional text from the container that may provide additional context.\n\t * @returns A promise that resolves to the generated GPT prompt string or null if an error occurs.\n\t*/\n\tprivate async generateGptPromptBasedOnUserPrompt(\n\t\tprompt: string,\n\t\tpromptContainerText?: string\n\t): Promise<string | null> {\n\t\ttry {\n\t\t\tconst context = this.promptHelper.trimContext( prompt, promptContainerText );\n\t\t\tconst request = prompt.slice( 1 ); // Remove the leading slash\n\t\t\tlet markDownContents: Array<MarkdownContent> = [];\n\t\t\tconst urlRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s]*/g;\n\t\t\tconst urls = prompt.match( urlRegex );\n\t\t\tif ( Array.isArray( urls ) && urls.length ) {\n\t\t\t\tconst formattedUrl = urls.map( url => {\n\t\t\t\t\treturn url.replace( /[,.]$/, '' );\n\t\t\t\t} );\n\t\t\t\tmarkDownContents = await this.promptHelper.generateMarkDownForUrls( formattedUrl );\n\t\t\t\tmarkDownContents = this.promptHelper.allocateTokensToFetchedContent( prompt, markDownContents );\n\t\t\t}\n\n\t\t\tconst isEditorEmpty = context === '\"@@@cursor@@@\"';\n\t\t\treturn this.promptHelper.formatFinalPrompt(\n\t\t\t\trequest,\n\t\t\t\tcontext,\n\t\t\t\tmarkDownContents,\n\t\t\t\tisEditorEmpty\n\t\t\t);\n\t\t} catch ( error ) {\n\t\t\tconsole.error( error );\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAssistCommand from './aiassistcommand.js';\nimport type { Element } from 'ckeditor5';\nimport AiAssistService from './aiassistservice.js';\n\nexport default class AiAssistEditing extends Plugin {\n\tpublic static get pluginName() {\n\t\treturn 'AiAssistEditing' as const;\n\t}\n\n\t/**\n\t * Initializes the AI Assist editing plugin, setting up commands and key handling.\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst aiAssistService = new AiAssistService( editor );\n\t\teditor.commands.add(\n\t\t\t'aiAssist',\n\t\t\tnew AiAssistCommand( editor, aiAssistService )\n\t\t);\n\n\t\tthis.setupEnterKeyHandling();\n\t}\n\n\t/**\n\t * Sets up handling for the Enter key to trigger AI assist functionality.\n\t * If the content starts with a slash, it cancels the default action and executes the AI assist command.\n\t */\n\tprivate setupEnterKeyHandling(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst view = editor.editing.view;\n\n\t\teditor.keystrokes.set( 'enter', async ( _, cancel ) => {\n\t\t\tconst position = model.document.selection.getFirstPosition();\n\t\t\tif ( position ) {\n\t\t\t\tconst paragraph = position.parent as Element;\n\t\t\t\tconst inlineSlash = Array.from( paragraph.getChildren() ).find( ( child: any ) => child.name === 'inline-slash' );\n\t\t\t\tconst equivalentView = mapper.toViewElement( paragraph );\n\t\t\t\tlet content;\n\t\t\t\tif ( equivalentView ) {\n\t\t\t\t\tcontent =\n\t\t\t\t\t\tview.domConverter.mapViewToDom(\n\t\t\t\t\t\t\tequivalentView\n\t\t\t\t\t\t)?.innerText;\n\t\t\t\t}\n\t\t\t\tif ( ( typeof content === 'string' && content.startsWith( '/' ) ) || inlineSlash ) {\n\t\t\t\t\tcancel();\n\t\t\t\t\tawait editor.execute( 'aiAssist' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAssistUI from './aiassistui.js';\nimport AiAssistEditing from './aiassistediting.js';\nimport type { Editor } from 'ckeditor5';\nimport type { AiModel } from './type-identifiers.js';\nimport { TOKEN_LIMITS } from './const.js';\nimport '../theme/style.css';\nexport default class AiAssist extends Plugin {\n\tpublic DEFAULT_GPT_MODEL = 'gpt-4o' as AiModel;\n\tpublic DEFAULT_AI_END_POINT = 'https://api.openai.com/v1/chat/completions';\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tconst config = editor.config.get( 'aiAssist' ) || {};\n\t\t// Set default values and merge with provided config\n\t\tconst defaultConfig = {\n\t\t\tmodel: this.DEFAULT_GPT_MODEL, // Default AI model\n\t\t\tapiKey: '', // Default OpenAI key\n\t\t\tendpointUrl: this.DEFAULT_AI_END_POINT, // Default endpoint URL\n\t\t\ttemperature: undefined, // Default temperature\n\t\t\ttimeOutDuration: 45000, // Default timeout duration\n\t\t\tmaxTokens: TOKEN_LIMITS[ this.DEFAULT_GPT_MODEL ].max, // Default max tokens\n\t\t\tretryAttempts: 1, // Default retry attempts\n\t\t\tcontextSize: TOKEN_LIMITS[ this.DEFAULT_GPT_MODEL ].context * 0.75, // Default context size\n\t\t\tstopSequences: [], // Default stop sequences\n\t\t\tpromptSettings: {\n\t\t\t\toutputFormat: [], // Default output format\n\t\t\t\tcontextData: [], // Default context data\n\t\t\t\tfilters: [] // Default filters\n\t\t\t},\n\t\t\tdebugMode: false, // Default debug mode\n\t\t\tstreamContent: true // Default streaming mode\n\t\t};\n\n\t\tconst updatedConfig = { ...defaultConfig, ...config };\n\n\t\t// Set the merged config back to the editor\n\t\teditor.config.set( 'aiAssist', updatedConfig );\n\n\t\t// Validate configuration\n\t\tthis.validateConfiguration( updatedConfig );\n\t}\n\n\tpublic static get requires() {\n\t\treturn [ AiAssistUI, AiAssistEditing ] as const;\n\t}\n\n\tpublic static get pluginName() {\n\t\treturn 'AiAssist' as const;\n\t}\n\n\tprivate validateConfiguration( config: any ): void {\n\t\tif ( !config.apiKey ) {\n\t\t\tthrow new Error( 'AiAssist: apiKey is required.' );\n\t\t}\n\n\t\tif ( config.temperature && ( config.temperature < 0 || config.temperature > 2 ) ) {\n\t\t\tthrow new Error( 'AiAssist: Temperature must be a number between 0 and 2.' );\n\t\t}\n\n\t\t// Validate maxTokens based on the model's token limits\n\t\tconst { min, max } = TOKEN_LIMITS[ config.model as AiModel ];\n\t\tif ( config.maxTokens < min || config.maxTokens > max ) {\n\t\t\tthrow new Error( `AiAssist: maxTokens must be a number between ${ min } and ${ max }.` );\n\t\t}\n\t}\n\n\tpublic init(): void {\n\t\t// Any additional initialization if needed\n\t}\n}\n","import ckeditor from './../theme/icons/ckeditor.svg';\nimport './augmentation.js';\n\nexport { default as AiAssist } from './aiassist.js';\n\nexport const icons = {\n\tckeditor\n};\n"],"names":["AiAssistContext","instance","_uiComponent","getInstance","uiComponent","component","showError","message","console","log","showGptErrorToolTip","showLoader","rect","hideLoader","aiAssistContext","TOKEN_LIMITS","min","max","context","SUPPORTED_LANGUAGES","AiAssistUI","Plugin","PLACEHOLDER_TEXT_ID","GPT_RESPONSE_LOADER_ID","GPT_RESPONSE_ERROR_ID","pluginName","initializeUIComponents","initializeUILanguage","attachListener","error","editor","t","model","schema","register","inheritAllFrom","isInline","isObject","allowWhere","allowAttributes","extend","allowIn","conversion","for","elementToElement","view","name","attributes","viewElement","writer","createElement","class","getAttribute","converterPriority","modelElement","createContainerElement","addPlaceholder","addLoader","addGptErrorToolTip","ui","componentFactory","add","locale","createDropdown","SplitButtonView","ButtonView","set","label","icon","aiAssistIcon","tooltip","on","change","position","document","selection","getLastPosition","inlineSlashContainer","insertText","insert","newPosition","createPositionAt","setSelection","editing","focus","contentLanguageCode","contentLanguage","supportedLanguages","includes","setTimeout","applyPlaceholderToCurrentLine","modelRoot","getRoot","modelRange","createRangeIn","itemsToRemove","item","getItems","is","isEmpty","push","remove","hidePlaceHolder","addEventListener","modelSelection","block","getFirstPosition","parent","getRectDomOfGivenModelElement","showPlaceHolder","element","mapper","equivalentView","toViewElement","domElement","domConverter","mapViewToDom","getBoundingClientRect","placeholder","id","onclick","classList","textContent","body","appendChild","ele","getElementById","isReadOnlyMode","isReadOnly","style","left","top","loaderElement","tooltipElement","domRoots","get","editorRect","hideGptErrorToolTip","AiAssistCommand","Command","aiAssistService","constructor","isEnabled","execute","handleSlashCommand","PromptHelper","contextSize","responseOutputFormat","responseContextData","responseFilters","debugMode","config","promptSettings","outputFormat","contextData","filters","getSystemPrompt","isInlineResponse","corpus","getAllowedHtmlTags","join","systemPrompt","group","groupEnd","formatFinalPrompt","request","markDownContents","isEditorEmpty","length","forEach","markdown","index","content","defaultFilterInstructions","defaultContextInstructions","prompt","promptContainerText","contentBeforePrompt","contentAfterPrompt","splitText","innerText","matchIndex","indexOf","nextEnterIndex","firstNewlineIndex","beforeNewline","substring","afterNewline","contextParts","allocatedEditorContextToken","Math","floor","extractEditorContent","escapedPrompt","replace","trim","RegExp","slice","trimmedContext","allocateTokensToFetchedContent","fetchedContent","editorContent","editorToken","countTokens","availableLimit","map","availableToken","sort","a","b","maxTokenFromEachURL","tokenToRequest","trimLLMContentByTokens","generateMarkDownForUrls","urls","errorMsg","Promise","all","url","fetchUrlContent","emptyContent","filter","urlStr","Error","urlRegex","trimmedUrl","test","cleanedUrl","requestURL","response","fetch","headers","ok","status","text","normalizedContent","tokens","match","approxTokenCount","token","ceil","maxTokens","elements","split","accumulatedTokens","trimmedContent","elementTokenCount","definitions","getDefinitions","schemaNodes","Object","keys","nodeToHtmlMap","blockQuote","caption","codeBlock","heading1","heading2","heading3","imageBlock","imageInline","paragraph","table","tableCell","tableRow","$listItem","horizontalLine","textAttributeToHtmlMap","bold","italic","code","strikethrough","subscript","superscript","underline","linkHref","allowedTags","Set","node","textDefinition","$text","attr","has","Array","from","reverse","charCount","sentences","sbd","preserve_whitespace","html_boundaries","allowed_tags","iterator","sentence","sentenceLength","HtmlParser","insertSimpleHtml","html","viewFragment","data","processor","toView","modelFragment","toModel","root","insertionPosition","lastInsertedChild","getChild","childCount","currentChildIndex","path","lastUpdatedElementInRoot","createPositionAfter","insertContent","isBreakElementReq","resolve","insertAsText","stream","shouldAddBreakAtEnd","outerHTML","childrenToInsert","getChildren","entries","insertPosition","undefined","insertElementAsStream","batchInsertOfElement","lastPosition","lastRecognizedPosition","targetElement","lastUpdatedElement","key","value","getAttributes","_setAttribute","currentElement","textChildren","child","textNode","textAttributes","_data","char","currentPosition","getShiftedBy","shouldAppendAtEnd","offset","maxOffset","isCompleteHtmlChunk","openingTags","closingTags","trimmedHtml","startsWith","endsWith","AiAssistService","aiModel","apiKey","endpointUrl","temperature","timeOutDuration","retryAttempts","streamContent","stopSequences","aiAssistFeatureLockId","Symbol","promptHelper","htmlParser","buffer","openTags","isInlineInsertion","parentEquivalentHTML","inlineSlash","startingPath","getPath","endingPath","startPosition","createPositionFromPath","endPosition","range","createRange","domSelection","window","getSelection","domRange","getRangeAt","gptPrompt","generateGptPromptBasedOnUserPrompt","fetchAndProcessGptResponse","retries","controller","AbortController","timeoutId","abort","contentBuffer","method","Authorization","JSON","stringify","messages","role","max_tokens","stop","signal","clearTimeout","reader","getReader","decoder","TextDecoder","clearParentContent","enableReadOnlyMode","done","read","chunk","decode","newlineIndex","line","jsonStr","parse","choices","delta","processContent","parseError","warn","errorIdentifier","isRetryableError","errorMessage","disableReadOnlyMode","tempParagraph","innerHTML","proceedHtmlResponse","tempDiv","childNodes","nodeType","Node","ELEMENT_NODE","elementName","tagName","toLowerCase","isStreamingNotAllow","TEXT_NODE","find","trimContext","isArray","formattedUrl","AiAssistEditing","commands","setupEnterKeyHandling","keystrokes","_","cancel","AiAssist","DEFAULT_GPT_MODEL","DEFAULT_AI_END_POINT","defaultConfig","updatedConfig","validateConfiguration","requires","init","icons","ckeditor"],"mappings":"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"}