{"version":3,"file":"index.js","sources":["../../src/aiagentcontext.js","../../src/const.js","../../src/util/html-utils.js","../../node_modules/sbd/lib/Match.js","../../node_modules/sbd/lib/stringHelper.js","../../node_modules/sbd/lib/tokenizer.js","../../node_modules/sbd/lib/sanitize-html-browser.js","../../src/util/text-utils.js","../../src/util/token-utils.js","../../src/util/url-utils.js","../../src/util/default-rules.js","../../src/util/prompt.js","../../src/util/htmlparser.js","../../src/aiagentservice.js","../../src/aiagentui.js","../../src/aiagentcommand.js","../../src/aiagentediting.js","../../src/aiagent.js","../../src/index.ts"],"sourcesContent":["/**\n * The AiAgentContext class provides a context for the AI Agent plugin,\n * allowing access to shared resources and state across different components.\n */\nexport class AiAgentContext {\n    constructor() { }\n    static getInstance() {\n        if (!AiAgentContext.instance) {\n            AiAgentContext.instance = new AiAgentContext();\n        }\n        return AiAgentContext.instance;\n    }\n    set uiComponent(component) {\n        this._uiComponent = component;\n    }\n    showError(message) {\n        if (this._uiComponent) {\n            console.log('Showing error message...', message);\n            this._uiComponent.showGptErrorToolTip(message);\n        }\n    }\n    showLoader(rect) {\n        if (this._uiComponent) {\n            this._uiComponent.showLoader(rect);\n        }\n    }\n    hideLoader() {\n        if (this._uiComponent) {\n            this._uiComponent.hideLoader();\n        }\n    }\n}\nexport const aiAgentContext = AiAgentContext.getInstance();\n","// const\nexport const TOKEN_LIMITS = {\n    'gpt-3.5-turbo': {\n        minOutputTokens: 1,\n        maxOutputTokens: 4096,\n        maxInputContextTokens: 16385\n    },\n    'gpt-4o': {\n        minOutputTokens: 0,\n        maxOutputTokens: 16384,\n        maxInputContextTokens: 128000\n    },\n    'gpt-4o-mini': {\n        minOutputTokens: 1,\n        maxOutputTokens: 16384,\n        maxInputContextTokens: 128000\n    },\n    'kavya-m1': {\n        minOutputTokens: 0,\n        maxOutputTokens: 16384,\n        maxInputContextTokens: 128000\n    }\n};\nexport const SUPPORTED_LANGUAGES = ['en', 'es', 'hi', 'nl'];\nexport const MODERATION_URL = 'https://api.openai.com/v1/moderations';\nexport const ALL_MODERATION_FLAGS = [\n    'harassment',\n    'harassment/threatening',\n    'hate',\n    'hate/threatening',\n    'self-harm',\n    'self-harm/instructions',\n    'self-harm/intent',\n    'sexual',\n    'sexual/minors',\n    'violence',\n    'violence/graphic'\n];\nexport const SHOW_ERROR_DURATION = 5000;\nexport const AI_AGENT_DROPDOWN_MENU = [\n    {\n        title: 'Edit or review',\n        items: [\n            {\n                title: 'Improve Writing',\n                command: `Fix spelling mistakes, use proper grammar and apply good writing practices.\n\t\t\t\t\tDo not lose the original meaning.\\nYou must keep the text formatting.`\n            },\n            {\n                title: 'Make Shorter',\n                command: `Remove any repetitive, redundant, or non-essential writing in this\n\t\t\t\t\tcontent without changing the meaning or losing any key information.`\n            },\n            {\n                title: 'Make Longer',\n                command: `Improve this content by using descriptive language and inserting\n\t\t\t\t\tmore information and more detailed explanations.\\nYou must keep the text formatting.`\n            },\n            {\n                title: 'Simplify Language',\n                command: `Simplify the writing style of this content and reduce the complexity,\n\t\t\t\t\tso that the content is easy to understand.\\nYou must keep the text formatting`\n            }\n        ]\n    },\n    {\n        title: 'Generate from selection',\n        items: [\n            {\n                title: 'Summarize',\n                command: `Summarize this content into one paragraph of text. Include only the key ideas and conclusions.\n\t\t\t\t\tKeep it short. Do not keep original text formatting`\n            },\n            {\n                title: 'Continue',\n                command: `Start with the provided content and write at the end of it continuing this topic.\n\t\t\t\t\tKeep the added part short.\\nYou must keep the text formatting`\n            }\n        ]\n    }\n];\n","// Map of CKEditor nodes to HTML tags\nconst nodeToHtmlMap = {\n    blockQuote: 'blockquote',\n    caption: 'figcaption',\n    codeBlock: 'pre',\n    heading1: 'h1',\n    heading2: 'h2',\n    heading3: 'h3',\n    imageBlock: 'img',\n    imageInline: 'img',\n    paragraph: 'p',\n    table: 'table',\n    tableCell: 'td',\n    tableRow: 'tr',\n    $listItem: 'li',\n    horizontalLine: 'hr'\n};\n// Map text attributes to HTML tags\nconst textAttributeToHtmlMap = {\n    bold: 'strong',\n    italic: 'em',\n    code: 'code',\n    strikethrough: 's',\n    subscript: 'sub',\n    superscript: 'sup',\n    underline: 'u',\n    linkHref: 'a'\n};\n/**\n * Gets the allowed HTML tags from the editor schema.\n *\n * @param editor - The CKEditor instance\n * @returns Array of allowed HTML tag names\n */\nexport function getAllowedHtmlTags(editor) {\n    const schema = editor.model.schema;\n    const definitions = schema.getDefinitions();\n    const schemaNodes = Object.keys(definitions).sort();\n    const allowedTags = new Set();\n    // Add tags from node mappings\n    schemaNodes.forEach(node => {\n        if (node in nodeToHtmlMap) {\n            allowedTags.add(nodeToHtmlMap[node]);\n        }\n    });\n    // Add tags from text attributes\n    const textDefinition = definitions.$text;\n    if (textDefinition && textDefinition.allowAttributes) {\n        textDefinition.allowAttributes.forEach((attr) => {\n            if (attr in textAttributeToHtmlMap) {\n                allowedTags.add(textAttributeToHtmlMap[attr]);\n            }\n        });\n    }\n    // If listItem is present, add ul and ol\n    if (allowedTags.has('li')) {\n        allowedTags.add('ul');\n        allowedTags.add('ol');\n    }\n    return Array.from(allowedTags).sort();\n}\n","var abbreviations;\r\n\r\nvar englishAbbreviations = [\r\n    \"al\",\r\n    \"adj\",\r\n    \"assn\",\r\n    \"Ave\",\r\n    \"BSc\", \"MSc\",\r\n    \"Cell\",\r\n    \"Ch\",\r\n    \"Co\",\r\n    \"cc\",\r\n    \"Corp\",\r\n    \"Dem\",\r\n    \"Dept\",\r\n    \"ed\",\r\n    \"eg\",\r\n    \"Eq\",\r\n    \"Eqs\",\r\n    \"est\",\r\n    \"est\",\r\n    \"etc\",\r\n    \"Ex\",\r\n    \"ext\", // + number?\r\n    \"Fig\",\r\n    \"fig\",\r\n    \"Figs\",\r\n    \"figs\",\r\n    \"i.e\",\r\n    \"ie\",\r\n    \"Inc\",\r\n    \"inc\",\r\n    \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Sept\",\"Oct\",\"Nov\",\"Dec\",\r\n    \"jr\",\r\n    \"mi\",\r\n    \"Miss\", \"Mrs\", \"Mr\", \"Ms\",\r\n    \"Mol\",\r\n    \"mt\",\r\n    \"mts\",\r\n    \"no\",\r\n    \"Nos\",\r\n    \"PhD\", \"MD\", \"BA\", \"MA\", \"MM\",\r\n    \"pl\",\r\n    \"pop\",\r\n    \"pp\",\r\n    \"Prof\", \"Dr\",\r\n    \"pt\",\r\n    \"Ref\",\r\n    \"Refs\",\r\n    \"Rep\",\r\n    \"repr\",\r\n    \"rev\",\r\n    \"Sec\",\r\n    \"Secs\",\r\n    \"Sgt\", \"Col\", \"Gen\", \"Rep\", \"Sen\",'Gov', \"Lt\", \"Maj\", \"Capt\",\"St\",\r\n    \"Sr\", \"sr\", \"Jr\", \"jr\", \"Rev\",\r\n    \"Sun\",\"Mon\",\"Tu\",\"Tue\",\"Tues\",\"Wed\",\"Th\",\"Thu\",\"Thur\",\"Thurs\",\"Fri\",\"Sat\",\r\n    \"trans\",\r\n    \"Univ\",\r\n    \"Viz\",\r\n    \"Vol\",\r\n    \"vs\",\r\n    \"v\",\r\n];\r\n\r\nexports.setAbbreviations = function(abbr) {\r\n    if (abbr) {\r\n        abbreviations = abbr;\r\n    } else {\r\n        abbreviations = englishAbbreviations;\r\n    }\r\n}\r\n\r\nvar isCapitalized = exports.isCapitalized = function(str) {\r\n    return /^[A-Z][a-z].*/.test(str) || isNumber(str);\r\n}\r\n\r\n// Start with opening quotes or capitalized letter\r\nexports.isSentenceStarter = function(str) {\r\n    return isCapitalized(str) || /``|\"|'/.test(str.substring(0,2));\r\n}\r\n\r\nexports.isCommonAbbreviation = function(str) {\r\n    var noSymbols = str.replace(/[-'`~!@#$%^&*()_|+=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \"\");\r\n\r\n    return ~abbreviations.indexOf(noSymbols);\r\n}\r\n\r\n// This is going towards too much rule based\r\nexports.isTimeAbbreviation = function(word, next) {\r\n    if (word === \"a.m.\" || word === \"p.m.\") {\r\n        var tmp = next.replace(/\\W+/g, '').slice(-3).toLowerCase();\r\n\r\n        if (tmp === \"day\") {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexports.isDottedAbbreviation = function(word) {\r\n    var matches = word.replace(/[\\(\\)\\[\\]\\{\\}]/g, '').match(/(.\\.)*/);\r\n    return matches && matches[0].length > 0;\r\n}\r\n\r\n// TODO look for next words, if multiple are capitalized,\r\n// then it's probably not a sentence ending\r\nexports.isCustomAbbreviation = function(str) {\r\n    if (str.length <= 3) {\r\n        return true;\r\n    }\r\n\r\n    return isCapitalized(str);\r\n}\r\n\r\n// Uses current word count in sentence and next few words to check if it is\r\n// more likely an abbreviation + name or new sentence.\r\nexports.isNameAbbreviation = function(wordCount, words) {\r\n    if (words.length > 0) {\r\n        if (wordCount < 5 && words[0].length < 6 && isCapitalized(words[0])) {\r\n            return true;\r\n        }\r\n\r\n        var capitalized = words.filter(function(str) {\r\n            return /[A-Z]/.test(str.charAt(0));\r\n        });\r\n\r\n        return capitalized.length >= 3;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvar isNumber = exports.isNumber = function(str, dotPos) {\r\n    if (dotPos) {\r\n        str = str.slice(dotPos-1, dotPos+2);\r\n    }\r\n\r\n    return !isNaN(str);\r\n};\r\n\r\n// Phone number matching\r\n// http://stackoverflow.com/a/123666/951517\r\nexports.isPhoneNr = function(str) {\r\n    return str.match(/^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$/);\r\n};\r\n\r\n// Match urls / emails\r\n// http://stackoverflow.com/a/3809435/951517\r\nexports.isURL = function(str) {\r\n    return str.match(/[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/);\r\n};\r\n\r\n// Starting a new sentence if beginning with capital letter\r\n// Exception: The word is enclosed in brackets\r\nexports.isConcatenated = function(word) {\r\n    var i = 0;\r\n\r\n    if ((i = word.indexOf(\".\")) > -1 ||\r\n        (i = word.indexOf(\"!\")) > -1 ||\r\n        (i = word.indexOf(\"?\")) > -1)\r\n    {\r\n        var c = word.charAt(i + 1);\r\n\r\n        // Check if the next word starts with a letter\r\n        if (c.match(/[a-zA-Z].*/)) {\r\n            return [word.slice(0, i), word.slice(i+1)];\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexports.isBoundaryChar = function(word) {\r\n    return word === \".\" ||\r\n           word === \"!\" ||\r\n           word === \"?\";\r\n};\r\n","\r\nexports.endsWithChar = function ends_with_char(word, c) {\r\n    if (c.length > 1) {\r\n        return c.indexOf(word.slice(-1)) > -1;\r\n    }\r\n\r\n    return word.slice(-1) === c;\r\n};\r\n\r\nexports.endsWith = function ends_with(word, end) {\r\n    return word.slice(word.length - end.length) === end;\r\n};","/*jshint node:true, laxcomma:true */\r\n\r\nvar sanitizeHtml = require(\"sanitize-html\");\r\n\r\nvar stringHelper = require(\"./stringHelper\");\r\nvar Match  = require(\"./Match\");\r\n\r\nvar newline_placeholder = \" @~@ \";\r\nvar newline_placeholder_t = newline_placeholder.trim();\r\n\r\n\r\nvar whiteSpaceCheck = new RegExp(\"\\\\S\", \"\");\r\nvar addNewLineBoundaries = new RegExp(\"\\\\n+|[-#=_+*]{4,}\", \"g\");\r\nvar splitIntoWords = new RegExp(\"\\\\S+|\\\\n\", \"g\");\r\n\r\n\r\n// Split the entry into sentences.\r\nexports.sentences = function(text, user_options) {\r\n    if (!text || typeof text !== \"string\" || !text.length) {\r\n        return [];\r\n    }\r\n\r\n    if (!whiteSpaceCheck.test(text)) {\r\n      // whitespace-only string has no sentences\r\n      return [];\r\n    }\r\n\r\n    var options = {\r\n        \"newline_boundaries\"  : false,\r\n        \"html_boundaries\"     : false,\r\n        \"html_boundaries_tags\": [\"p\",\"div\",\"ul\",\"ol\"],\r\n        \"sanitize\"            : false,\r\n        \"allowed_tags\"        : false,\r\n        \"preserve_whitespace\" : false,\r\n        \"abbreviations\"       : null\r\n    };\r\n\r\n    if (typeof user_options === \"boolean\") {\r\n        // Deprecated quick option\r\n        options.newline_boundaries = true;\r\n    }\r\n    else {\r\n        // Extend options\r\n        for (var k in user_options) {\r\n            options[k] = user_options[k];\r\n        }\r\n    }\r\n\r\n    Match.setAbbreviations(options.abbreviations);\r\n\r\n    if (options.newline_boundaries) {\r\n        text = text.replace(addNewLineBoundaries, newline_placeholder);\r\n    }\r\n\r\n    if (options.html_boundaries) {\r\n        var html_boundaries_regexp = \"(<br\\\\s*\\\\/?>|<\\\\/(\" + options.html_boundaries_tags.join(\"|\") + \")>)\";\r\n        var re = new RegExp(html_boundaries_regexp, \"g\");\r\n        text = text.replace(re, \"$1\" + newline_placeholder);\r\n    }\r\n\r\n    if (options.sanitize || options.allowed_tags) {\r\n        if (! options.allowed_tags) {\r\n            options.allowed_tags = [\"\"];\r\n        }\r\n\r\n        text = sanitizeHtml(text, { \"allowedTags\" : options.allowed_tags });\r\n    }\r\n\r\n\r\n    // Split the text into words\r\n    var words;\r\n    var tokens;\r\n\r\n    // Split the text into words\r\n    if (options.preserve_whitespace) {\r\n        // <br> tags are the odd man out, as whitespace is allowed inside the tag\r\n        tokens = text.split(/(<br\\s*\\/?>|\\S+|\\n+)/);\r\n\r\n        // every other token is a word\r\n        words = tokens.filter(function (token, ii) {\r\n          return ii % 2;\r\n        });\r\n    }\r\n    else {\r\n        // - see http://blog.tompawlak.org/split-string-into-tokens-javascript\r\n        words = text.trim().match(splitIntoWords);\r\n    }\r\n\r\n\r\n    var wordCount = 0;\r\n    var index = 0;\r\n    var temp  = [];\r\n    var sentences = [];\r\n    var current   = [];\r\n\r\n    // If given text is only whitespace (or nothing of \\S+)\r\n    if (!words || !words.length) {\r\n        return [];\r\n    }\r\n\r\n    for (var i=0, L=words.length; i < L; i++) {\r\n        wordCount++;\r\n\r\n        // Add the word to current sentence\r\n        current.push(words[i]);\r\n\r\n        // Sub-sentences, reset counter\r\n        if (~words[i].indexOf(\",\")) {\r\n            wordCount = 0;\r\n        }\r\n\r\n        if (Match.isBoundaryChar(words[i]) || stringHelper.endsWithChar(words[i], \"?!\") || words[i] === newline_placeholder_t) {\r\n            if ((options.newline_boundaries || options.html_boundaries) && words[i] === newline_placeholder_t) {\r\n                current.pop();\r\n            }\r\n\r\n            sentences.push(current);\r\n\r\n            wordCount = 0;\r\n            current   = [];\r\n\r\n            continue;\r\n        }\r\n\r\n\r\n        if (stringHelper.endsWithChar(words[i], \"\\\"\") || stringHelper.endsWithChar(words[i], \"”\")) {\r\n            words[i] = words[i].slice(0, -1);\r\n        }\r\n\r\n        // A dot might indicate the end sentences\r\n        // Exception: The next sentence starts with a word (non abbreviation)\r\n        //            that has a capital letter.\r\n        if (stringHelper.endsWithChar(words[i], \".\")) {\r\n            // Check if there is a next word\r\n            // This probably needs to be improved with machine learning\r\n            if (i+1 < L) {\r\n                // Single character abbr.\r\n                if (words[i].length === 2 && isNaN(words[i].charAt(0))) {\r\n                    continue;\r\n                }\r\n\r\n                // Common abbr. that often do not end sentences\r\n                if (Match.isCommonAbbreviation(words[i])) {\r\n                    continue;\r\n                }\r\n\r\n                // Next word starts with capital word, but current sentence is\r\n                // quite short\r\n                if (Match.isSentenceStarter(words[i+1])) {\r\n                    if (Match.isTimeAbbreviation(words[i], words[i+1])) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Dealing with names at the start of sentences\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 6))) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNumber(words[i+1])) {\r\n                        if (Match.isCustomAbbreviation(words[i])) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Skip ellipsis\r\n                    if (stringHelper.endsWith(words[i], \"..\")) {\r\n                        continue;\r\n                    }\r\n\r\n                    //// Skip abbreviations\r\n                    // Short words + dot or a dot after each letter\r\n                    if (Match.isDottedAbbreviation(words[i])) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 5))) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            sentences.push(current);\r\n            current   = [];\r\n            wordCount = 0;\r\n\r\n            continue;\r\n        }\r\n\r\n        // Check if the word has a dot in it\r\n        if ((index = words[i].indexOf(\".\")) > -1) {\r\n            if (Match.isNumber(words[i], index)) {\r\n                continue;\r\n            }\r\n\r\n            // Custom dotted abbreviations (like K.L.M or I.C.T)\r\n            if (Match.isDottedAbbreviation(words[i])) {\r\n                continue;\r\n            }\r\n\r\n            // Skip urls / emails and the like\r\n            if (Match.isURL(words[i]) || Match.isPhoneNr(words[i])) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (temp = Match.isConcatenated(words[i])) {\r\n            current.pop();\r\n            current.push(temp[0]);\r\n            sentences.push(current);\r\n\r\n            current = [];\r\n            wordCount = 0;\r\n            current.push(temp[1]);\r\n        }\r\n    }\r\n\r\n    if (current.length) {\r\n        sentences.push(current);\r\n    }\r\n\r\n\r\n    // Clear \"empty\" sentences\r\n    sentences = sentences.filter(function(s) {\r\n        return s.length > 0;\r\n    });\r\n\r\n    var result = sentences.slice(1).reduce(function (out, sentence) {\r\n      var lastSentence = out[out.length - 1];\r\n\r\n      // Single words, could be \"enumeration lists\"\r\n      if (lastSentence.length === 1 && /^.{1,2}[.]$/.test(lastSentence[0])) {\r\n          // Check if there is a next sentence\r\n          // It should not be another list item\r\n          if (!/[.]/.test(sentence[0])) {\r\n              out.pop()\r\n              out.push(lastSentence.concat(sentence));\r\n              return out;\r\n          }\r\n      }\r\n\r\n      out.push(sentence);\r\n\r\n      return out;\r\n    }, [ sentences[0] ]);\r\n\r\n    // join tokens back together\r\n    return result.map(function (sentence, ii) {\r\n      if (options.preserve_whitespace && !options.newline_boundaries && !options.html_boundaries) {\r\n        // tokens looks like so: [leading-space token, non-space token, space\r\n        // token, non-space token, space token... ]. In other words, the first\r\n        // item is the leading space (or the empty string), and the rest of\r\n        // the tokens are [non-space, space] token pairs.\r\n        var tokenCount = sentence.length * 2;\r\n\r\n        if (ii === 0) {\r\n          tokenCount += 1;\r\n        }\r\n\r\n        return tokens.splice(0, tokenCount).join(\"\");\r\n      }\r\n\r\n      return sentence.join(\" \");\r\n    });\r\n};\r\n","\r\nmodule.exports = function sanitizeHtml(text, opts) {\r\n  // Strip HTML from Text using browser HTML parser\r\n  if ((typeof text == 'string' || text instanceof String) && typeof document !== \"undefined\") {\r\n    var $div = document.createElement(\"DIV\");\r\n    $div.innerHTML = text;\r\n    text = ($div.textContent || '').trim();\r\n  }\r\n  //DOM Object\r\n  else if (typeof text === 'object' && text.textContent) {\r\n    text = (text.textContent || '').trim();\r\n  }\r\n\r\n  return text;\r\n};\r\n","import { getAllowedHtmlTags } from './html-utils.js';\nimport sbd from 'sbd';\n/* eslint-enable camelcase */\n/**\n * Utility functions for text processing operations.\n */\n/**\n * Removes leading spaces from each line while preserving empty lines and content indentation.\n *\n * @param text - The text to process\n * @returns The processed text with leading spaces removed\n */\nexport function removeLeadingSpaces(text) {\n    return text.split('\\n')\n        .map(line => line.trimStart())\n        .join('\\n');\n}\n/**\n * Removes leading & trailing spaces from each line while preserving empty lines and content indentation.\n *\n * @param text - The text to process\n * @returns The processed text with leading spaces removed\n */\nexport function trimMultilineString(text) {\n    return text.split('\\n')\n        .map(line => line.trim())\n        .join('\\n');\n}\n/**\n * Extracts a portion of text from the editor content based on sentence boundaries.\n *\n * @param contentAfterPrompt - The text to extract from\n * @param contextSize - Maximum size of the context to extract\n * @param reverse - Whether to extract from the end of the text\n * @returns The extracted text portion\n */\nexport function extractEditorContent(contentAfterPrompt, contextSize, reverse = false, editor) {\n    let trimmedContent = '';\n    let charCount = 0;\n    const options = {\n        preserve_whitespace: true,\n        html_boundaries: true,\n        allowed_tags: getAllowedHtmlTags(editor)\n    };\n    const sentences = sbd.sentences(contentAfterPrompt, options);\n    const iterator = reverse ? sentences.reverse() : sentences;\n    for (const sentence of iterator) {\n        const sentenceLength = sentence.length;\n        if ((charCount + sentenceLength) / 4 <= contextSize) {\n            trimmedContent = reverse ?\n                sentence + trimmedContent :\n                trimmedContent + sentence;\n            charCount += sentenceLength;\n        }\n        else {\n            break;\n        }\n    }\n    return trimmedContent.trim();\n}\n","/**\n * Utility functions for token management and calculations.\n */\n/**\n * Counts the number of tokens in the provided content string.\n *\n * @param content - The content string to count tokens in.\n * @returns The number of tokens in the content.\n */\nexport function countTokens(content) {\n    if (!content || typeof content !== 'string') {\n        return 0;\n    }\n    // Normalize the content by trimming and reducing multiple whitespaces\n    const normalizedContent = content\n        .trim()\n        .replace(/\\s+/g, ' ');\n    // Approximate tokens by breaking words, contractions, and common punctuation marks\n    const tokens = normalizedContent.match(/\\b\\w+('\\w+)?\\b|[.,!?;:\"(){}[\\]]/g) || [];\n    // Heuristic: Long words (over 10 characters) are likely to be split into multiple tokens\n    let approxTokenCount = 0;\n    tokens.forEach(token => {\n        // Break long words into chunks to approximate GPT subword tokenization\n        if (token.length > 10) {\n            approxTokenCount += Math.ceil(token.length / 4); // Approximation: 4 characters per token\n        }\n        else {\n            approxTokenCount += 1;\n        }\n    });\n    return approxTokenCount;\n}\n/**\n * Trims the LLM content by tokens while ensuring that sentences or other structures\n * are not clipped mid-way.\n *\n * @param content - The LLM-generated content string to trim\n * @param maxTokens - The maximum number of tokens allowed\n * @returns The trimmed content string\n */\nexport function trimLLMContentByTokens(content, maxTokens) {\n    const elements = content.split('\\n');\n    let accumulatedTokens = 0;\n    let trimmedContent = '';\n    for (const element of elements) {\n        const elementTokenCount = countTokens(element);\n        if (accumulatedTokens + elementTokenCount > maxTokens) {\n            break; // Stop if adding this element would exceed the token limit\n        }\n        accumulatedTokens += elementTokenCount;\n        trimmedContent += element + '\\n'; // Add the whole structural element\n    }\n    return trimmedContent;\n}\n","import { aiAgentContext } from '../aiagentcontext.js';\n/**\n * Fetches the content of a given URL and returns it as a string.\n *\n * @param url - The URL to fetch content from.\n * @returns A promise that resolves to the fetched content as a string.\n * @throws Will throw an error if the URL is invalid or if the fetch fails.\n */\nexport async function fetchUrlContent(url) {\n    const urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n    const trimmedUrl = url.trim();\n    if (!urlRegex.test(trimmedUrl)) {\n        throw new Error('Invalid URL');\n    }\n    try {\n        // Use a regular expression to remove hidden characters\n        const cleanedUrl = trimmedUrl.replace(/[^\\x20-\\x7E]/g, '');\n        const requestURL = `https://r.jina.ai/${cleanedUrl.trim()}`;\n        const response = await fetch(requestURL.trim(), {\n            headers: {\n                'X-With-Generated-Alt': 'true'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const content = await response.text();\n        // Updated error matching\n        if (content.includes('Warning: Target URL returned error')) {\n            throw new Error(`Target URL (${trimmedUrl}) returned an error`);\n        }\n        if (content.trim().length === 0) {\n            throw new Error('Empty content received');\n        }\n        return content.replace(/\\(https?:\\/\\/[^\\s]+\\)/g, '').replace(/^\\s*$/gm, '').trim();\n    }\n    catch (error) {\n        console.error(`Failed to fetch content: ${url}`, error);\n        aiAgentContext.showError('Failed to fetch URL content');\n        return '';\n    }\n}\n","import { getAllowedHtmlTags } from './html-utils.js';\nimport defaultRulesJson from '../config/default-rules.json';\nexport function getDefaultRules(editor) {\n    // Replace the placeholder in htmlFormatting with actual allowed tags\n    const rules = { ...defaultRulesJson };\n    rules.htmlFormatting = rules.htmlFormatting.replace('${getAllowedHtmlTags(editor).join(\\', \\')}', getAllowedHtmlTags(editor).join(', '));\n    return rules;\n}\n","import { aiAgentContext } from '../aiagentcontext.js';\nimport { removeLeadingSpaces, extractEditorContent, trimMultilineString } from './text-utils.js';\nimport { countTokens, trimLLMContentByTokens } from './token-utils.js';\nimport { fetchUrlContent } from './url-utils.js';\nimport { getDefaultRules } from './default-rules.js';\nimport { getAllowedHtmlTags } from './html-utils.js';\nexport class PromptHelper {\n    constructor(editor, options = {}) {\n        var _a, _b, _c;\n        this.editor = editor;\n        const config = editor.config.get('aiAgent');\n        this.contextSize = config.contextSize;\n        this.promptSettings = (_a = config.promptSettings) !== null && _a !== void 0 ? _a : {};\n        this.debugMode = (_b = config.debugMode) !== null && _b !== void 0 ? _b : false;\n        this.editorContextRatio = (_c = options.editorContextRatio) !== null && _c !== void 0 ? _c : 0.3;\n    }\n    getSystemPrompt(isInlineResponse = false) {\n        var _a, _b;\n        const defaultComponents = getDefaultRules(this.editor);\n        let systemPrompt = '';\n        // Process each component\n        for (const [id, defaultContent] of Object.entries(defaultComponents)) {\n            // Skip components that are not allowed in the editor and not inline response\n            if ((id === 'imageHandling' && !getAllowedHtmlTags(this.editor).includes('img')) ||\n                (id === 'inlineContent' && !isInlineResponse)) {\n                continue;\n            }\n            const componentId = id;\n            let content = defaultContent;\n            // Apply overrides if they exist\n            if ((_a = this.promptSettings.overrides) === null || _a === void 0 ? void 0 : _a[componentId]) {\n                content = this.promptSettings.overrides[componentId];\n            }\n            // Apply additions if they exist\n            if ((_b = this.promptSettings.additions) === null || _b === void 0 ? void 0 : _b[componentId]) {\n                content += '\\n' + this.promptSettings.additions[componentId];\n            }\n            // Add the component to the system prompt\n            systemPrompt += trimMultilineString(content) + ('\\n\\n');\n        }\n        if (this.debugMode) {\n            console.group('AiAgent System Prompt Debug');\n            console.log('System Prompt:', systemPrompt);\n            console.groupEnd();\n        }\n        return systemPrompt;\n    }\n    trimContext(prompt, promptContainerText = '') {\n        var _a, _b, _c, _d, _e;\n        let contentBeforePrompt = '';\n        let contentAfterPrompt = '';\n        const splitText = promptContainerText !== null && promptContainerText !== void 0 ? promptContainerText : prompt;\n        const view = (_d = (_c = (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.editing) === null || _b === void 0 ? void 0 : _b.view) === null || _c === void 0 ? void 0 : _c.domRoots) === null || _d === void 0 ? void 0 : _d.get('main');\n        const context = (_e = view === null || view === void 0 ? void 0 : view.innerText) !== null && _e !== void 0 ? _e : '';\n        const matchIndex = context.indexOf(splitText);\n        const nextEnterIndex = context.indexOf('\\n', matchIndex);\n        const firstNewlineIndex = nextEnterIndex !== -1 ? nextEnterIndex : matchIndex + splitText.length;\n        const beforeNewline = context.substring(0, firstNewlineIndex);\n        const afterNewline = context.substring(firstNewlineIndex + 1);\n        const contextParts = [beforeNewline, afterNewline];\n        const allocatedEditorContextToken = Math.floor(this.contextSize * this.editorContextRatio);\n        if (contextParts.length > 1) {\n            if (contextParts[0].length < contextParts[1].length) {\n                contentBeforePrompt = extractEditorContent(contextParts[0], allocatedEditorContextToken / 2, true, this.editor);\n                contentAfterPrompt = extractEditorContent(contextParts[1], allocatedEditorContextToken - contentBeforePrompt.length / 4, false, this.editor);\n            }\n            else {\n                contentAfterPrompt = extractEditorContent(contextParts[1], allocatedEditorContextToken / 2, false, this.editor);\n                contentBeforePrompt = extractEditorContent(contextParts[0], allocatedEditorContextToken - contentAfterPrompt.length / 4, true, this.editor);\n            }\n        }\n        // Combine the trimmed context with the cursor placeholder\n        const escapedPrompt = prompt.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // Escapes special characters\n        contentBeforePrompt = contentBeforePrompt.trim()\n            .replace(new RegExp(escapedPrompt.slice(1)), '@@@cursor@@@')\n            .replace('/@@@cursor@@@', '@@@cursor@@@'); // Remove forward slash if present\n        const trimmedContext = `${contentBeforePrompt}\\n${contentAfterPrompt}`;\n        return trimmedContext.trim();\n    }\n    formatFinalPrompt(request, context, selectedContent, markDownContents, isEditorEmpty = false) {\n        if (this.debugMode) {\n            console.group('formatFinalPrompt Debug');\n            console.log('Request:', request);\n            console.log('Context:', context);\n            console.log('MarkDownContents:', markDownContents);\n            console.log('IsEditorEmpty:', isEditorEmpty);\n        }\n        const contentLanguageCode = this.editor.locale.contentLanguage;\n        const corpus = [];\n        // Task Section\n        corpus.push('<TASK>');\n        corpus.push(request);\n        corpus.push('</TASK>');\n        // Context Section\n        if ((context === null || context === void 0 ? void 0 : context.length) && !selectedContent) {\n            corpus.push('\\n<CONTEXT>');\n            corpus.push(context);\n            corpus.push('</CONTEXT>');\n        }\n        if (selectedContent) {\n            corpus.push('<SELECTED_CONTENT>');\n            corpus.push(selectedContent);\n            corpus.push('</SELECTED_CONTENT>');\n        }\n        // Markdown Content Section\n        if (markDownContents === null || markDownContents === void 0 ? void 0 : markDownContents.length) {\n            corpus.push('\\n<REFERENCE_CONTENT>');\n            for (const content of markDownContents) {\n                corpus.push(`<SOURCE url=\"${content.url}\">\\n${content.content}\\n</SOURCE>`);\n            }\n            corpus.push('</REFERENCE_CONTENT>');\n            // Use default referenceGuidelines\n            corpus.push('\\n<REFERENCE_GUIDELINES>');\n            corpus.push(this.getComponentContent('referenceGuidelines'));\n            corpus.push('</REFERENCE_GUIDELINES>');\n        }\n        // Context-Specific Instructions\n        if (!isEditorEmpty && !selectedContent) {\n            corpus.push('\\n<CONTEXT_REQUIREMENTS>');\n            corpus.push(this.getComponentContent('contextRequirements'));\n            corpus.push('</CONTEXT_REQUIREMENTS>');\n        }\n        // Add language instructions back\n        corpus.push('\\n<INSTRUCTIONS>');\n        corpus.push(`The response must follow the language code - ${contentLanguageCode}.`);\n        corpus.push('</INSTRUCTIONS>');\n        // Debug Output\n        if (this.debugMode) {\n            console.group('AiAgent Final Prompt Debug');\n            console.log('Final Prompt:', corpus.join('\\n'));\n            console.groupEnd();\n        }\n        return corpus.map(text => removeLeadingSpaces(text)).join('\\n');\n    }\n    getComponentContent(componentId) {\n        var _a, _b;\n        const defaultComponents = getDefaultRules(this.editor);\n        let content = defaultComponents[componentId];\n        if ((_a = this.promptSettings.overrides) === null || _a === void 0 ? void 0 : _a[componentId]) {\n            content = this.promptSettings.overrides[componentId];\n        }\n        if ((_b = this.promptSettings.additions) === null || _b === void 0 ? void 0 : _b[componentId]) {\n            content += '\\n' + this.promptSettings.additions[componentId];\n        }\n        return trimMultilineString(content);\n    }\n    async generateMarkDownForUrls(urls) {\n        try {\n            const markdownContents = [];\n            for (const url of urls) {\n                try {\n                    const content = await fetchUrlContent(url);\n                    if (content) {\n                        markdownContents.push({\n                            content,\n                            url,\n                            tokenCount: countTokens(content)\n                        });\n                    }\n                }\n                catch (error) {\n                    if (this.debugMode) {\n                        console.error(`Failed to fetch content from ${url}:`, error);\n                    }\n                    aiAgentContext.showError(`Failed to fetch content from ${url}`);\n                }\n            }\n            return this.allocateTokensToFetchedContent(this.getSystemPrompt(), markdownContents);\n        }\n        catch (error) {\n            if (this.debugMode) {\n                console.error('Error generating markdown content:', error);\n            }\n            aiAgentContext.showError('Failed to generate markdown content');\n            return [];\n        }\n    }\n    allocateTokensToFetchedContent(prompt, fetchedContent) {\n        var _a, _b, _c, _d, _e, _f;\n        const editorContent = (_f = (_e = (_d = (_c = (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.editing) === null || _b === void 0 ? void 0 : _b.view) === null || _c === void 0 ? void 0 : _c.domRoots) === null || _d === void 0 ? void 0 : _d.get('main')) === null || _e === void 0 ? void 0 : _e.innerText) !== null && _f !== void 0 ? _f : '';\n        const editorToken = Math.min(Math.floor(this.contextSize * this.editorContextRatio), countTokens(editorContent));\n        const availableLimit = this.contextSize - editorToken;\n        if (availableLimit === 0 || !fetchedContent.length) {\n            return fetchedContent;\n        }\n        const tokensPerContent = Math.floor(availableLimit / fetchedContent.length);\n        return fetchedContent.map(content => ({\n            ...content,\n            content: trimLLMContentByTokens(content.content, tokensPerContent)\n        }));\n    }\n}\n","export class HtmlParser {\n    constructor(editor) {\n        var _a;\n        this.editor = editor;\n        this.model = editor.model;\n        this.debugMode = (_a = editor.config.get('aiAgent.debugMode')) !== null && _a !== void 0 ? _a : false;\n    }\n    /**\n     * Inserts simple HTML content into the editor.\n     *\n     * @param html - The HTML string to be inserted into the editor.\n     * @returns A promise that resolves when the HTML has been inserted.\n     */\n    async insertSimpleHtml(html) {\n        var _a;\n        if (this.debugMode) {\n            console.log('Attempting to insert simple HTML:', html);\n        }\n        const viewFragment = this.editor.data.processor.toView(html);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = selection.getLastPosition();\n        const lastInsertedChild = modelFragment.getChild(modelFragment.childCount - 1);\n        const currentChildIndex = (_a = selection.getLastPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n        const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n        this.model.change(writer => {\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    writer.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    writer.createPositionAfter(lastUpdatedElementInRoot);\n            }\n            if (insertionPosition && root) {\n                // Insert element to current selection\n                writer.setSelection(insertionPosition);\n                this.model.insertContent(modelFragment, insertionPosition);\n                // Check if it required to add break to current context of list etc.\n                // More to will be added during testing any edge case\n                let isBreakElementReq = lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.getAttribute('listItemId');\n                if (lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.is('element')) {\n                    isBreakElementReq = isBreakElementReq || lastInsertedChild.name === 'table';\n                }\n                if (isBreakElementReq && lastInsertedChild) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, writer.createPositionAfter(lastInsertedChild));\n                    writer.setSelection(paragraph, 'in');\n                }\n                else if (lastInsertedChild) {\n                    writer.setSelection(writer.createPositionAfter(lastInsertedChild));\n                }\n            }\n        });\n        // Maintain a delay to simulate asynchronous behavior\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    /**\n     * Inserts HTML content as text into the editor.\n     *\n     * @param content - The HTML element containing the text to be inserted.\n     * @param position - The position at which to insert the text (optional).\n     * @param stream - Indicates whether to insert text in a streaming manner (default is false).\n     * @param shouldAddBreakAtEnd - Indicates whether to add a paragraph break at the end of the inserted content (default is false).\n     * @returns A promise that resolves when the text has been inserted.\n     *\n     * This method processes the provided HTML element, converting it to a model fragment,\n     * and inserts it into the editor at the specified position. If streaming is enabled,\n     * elements are inserted one at a time, allowing for a more dynamic insertion experience.\n     * An optional paragraph break can be added at the end of the inserted content.\n    */\n    async insertAsText(content, position, stream = false, shouldAddBreakAtEnd = false) {\n        const viewFragment = this.editor.data.processor.toView(content.outerHTML);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const childrenToInsert = Array.from(modelFragment.getChildren());\n        const root = this.model.document.getRoot();\n        for (const [index, element] of childrenToInsert.entries()) {\n            if (element.is('element')) {\n                const insertPosition = index === 0 ? position : undefined; // Determine position for insertion\n                if (stream) {\n                    await this.insertElementAsStream(element, insertPosition);\n                }\n                else {\n                    await this.batchInsertOfElement(element, insertPosition);\n                }\n            }\n        }\n        if (shouldAddBreakAtEnd) {\n            this.model.change(writer => {\n                const lastPosition = this.model.document.selection.getLastPosition();\n                const currentChildIndex = lastPosition === null || lastPosition === void 0 ? void 0 : lastPosition.path[0];\n                if (root && currentChildIndex != undefined) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, root, currentChildIndex + 1);\n                    writer.setSelection(paragraph, 'in');\n                }\n            });\n        }\n    }\n    /**\n     * Inserts a given element into the editor at the specified position.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted.\n     */\n    async batchInsertOfElement(element, position) {\n        var _a;\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = position;\n        if (!position) {\n            const currentChildIndex = (_a = selection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n            const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElementInRoot);\n            }\n        }\n        // insert content at current identified position\n        this.model.change(writer => {\n            this.model.insertContent(element, insertionPosition);\n            writer.setSelection(element, 'end');\n        });\n    }\n    /**\n     * Inserts a given element into the editor at the specified position in a streaming manner.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted and all text has been streamed in.\n     */\n    async insertElementAsStream(element, position) {\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        const lastRecognizedPosition = selection.getLastPosition();\n        let insertionPosition = position;\n        let targetElement;\n        // Determine insertion position\n        if (!position) {\n            const currentChildIndex = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.path[0];\n            const lastUpdatedElement = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElement === null || lastUpdatedElement === void 0 ? void 0 : lastUpdatedElement.is('element')) {\n                insertionPosition = lastUpdatedElement.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElement, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElement);\n            }\n            this.model.change(writer => {\n                targetElement = writer.createElement(element.name);\n                // Set attributes in a more concise way\n                for (const [key, value] of element.getAttributes()) {\n                    targetElement._setAttribute(key, value);\n                }\n                this.model.insertContent(targetElement, insertionPosition);\n                if (insertionPosition) {\n                    writer.setSelection(targetElement, 'end');\n                }\n            });\n        }\n        else {\n            // current element from the offset\n            const currentElement = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.parent;\n            if (currentElement === null || currentElement === void 0 ? void 0 : currentElement.is('element')) {\n                targetElement = currentElement;\n            }\n        }\n        const textChildren = Array.from(element.getChildren()).filter(child => child.is('$text'));\n        for (const textNode of textChildren) {\n            if (!textNode.is('$text')) {\n                continue;\n            }\n            const textAttributes = Array.from(textNode.getAttributes());\n            const textContent = textNode._data;\n            for (const char of textContent) {\n                await new Promise(resolve => {\n                    this.model.change(writer => {\n                        const currentPosition = this.editor.model.document.selection.getLastPosition();\n                        const newPosition = currentPosition.getShiftedBy(1);\n                        const shouldAppendAtEnd = newPosition.offset === (currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.parent.maxOffset);\n                        writer.insertText(char, textAttributes, targetElement, shouldAppendAtEnd ? 'end' : currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.offset);\n                        writer.setSelection(this.editor.model.document.selection.getLastPosition());\n                    });\n                    setTimeout(resolve, 5); // Maintain the streaming effect\n                });\n            }\n        }\n        // Set selection\n        if (!position) {\n            this.model.change(writer => {\n                writer.setSelection(targetElement, 'end');\n            });\n        }\n    }\n    /**\n     * Validate given string as a HTML content\n     * @param content string containing html content\n     * @returns A boolean value as result of validation\n     */\n    isCompleteHtmlChunk(html) {\n        const openingTags = (html.match(/<[^/][^>]*>/g) || []).length;\n        const closingTags = (html.match(/<\\/[^>]+>/g) || []).length;\n        // Check if all opening tags have corresponding closing tags\n        if (openingTags !== closingTags) {\n            return false;\n        }\n        // Check for incomplete tags\n        if (html.includes('<') && !html.includes('>')) {\n            return false;\n        }\n        // Check if the HTML starts with an opening tag and ends with a closing tag\n        const trimmedHtml = html.trim();\n        if (!trimmedHtml.startsWith('<') || !trimmedHtml.endsWith('>')) {\n            return false;\n        }\n        return true;\n    }\n}\n","import { aiAgentContext } from './aiagentcontext.js';\nimport { PromptHelper } from './util/prompt.js';\nimport { HtmlParser } from './util/htmlparser.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport { env } from 'ckeditor5/src/utils.js';\nimport { ALL_MODERATION_FLAGS, MODERATION_URL } from './const.js';\nexport default class AiAgentService {\n    /**\n     * Initializes the AiAgentService with the provided editor and configuration settings.\n     *\n     * @param editor - The CKEditor instance to be used with the AI assist service.\n     */\n    constructor(editor) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.aiAgentFeatureLockId = Symbol('ai-agent-feature');\n        this.buffer = '';\n        this.openTags = [];\n        this.isInlineInsertion = false;\n        this.abortGeneration = false;\n        this.disableFlags = [];\n        this.editor = editor;\n        this.promptHelper = new PromptHelper(editor);\n        this.htmlParser = new HtmlParser(editor);\n        const config = editor.config.get('aiAgent');\n        this.aiModel = config.model;\n        this.apiKey = config.apiKey;\n        this.endpointUrl = config.endpointUrl;\n        this.temperature = config.temperature;\n        this.timeOutDuration = (_a = config.timeOutDuration) !== null && _a !== void 0 ? _a : 45000;\n        this.maxTokens = (_b = config.maxOutputTokens) !== null && _b !== void 0 ? _b : config.maxTokens;\n        this.retryAttempts = config.retryAttempts;\n        this.stopSequences = config.stopSequences;\n        this.streamContent = (_c = config.streamContent) !== null && _c !== void 0 ? _c : true;\n        this.moderationKey = (_e = (_d = config.moderation) === null || _d === void 0 ? void 0 : _d.key) !== null && _e !== void 0 ? _e : '';\n        this.moderationEnable = (_g = (_f = config.moderation) === null || _f === void 0 ? void 0 : _f.enable) !== null && _g !== void 0 ? _g : false;\n        this.disableFlags = (_j = (_h = config.moderation) === null || _h === void 0 ? void 0 : _h.disableFlags) !== null && _j !== void 0 ? _j : [];\n    }\n    /**\n     * Handles the slash command input from the user, processes it, and interacts with the AI model.\n     *\n     * @returns A promise that resolves when the command has been processed.\n     */\n    async handleSlashCommand(command) {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const root = model.document.getRoot();\n        let content;\n        let selectedContent;\n        let parentEquivalentHTML;\n        let parent;\n        const position = model.document.selection.getLastPosition();\n        if (position && root) {\n            parent = position.parent;\n            const inlineSlash = parent.name === 'inline-slash' ? parent : undefined;\n            const equivalentView = mapper.toViewElement(parent);\n            parentEquivalentHTML = equivalentView ? view.domConverter.mapViewToDom(equivalentView) : undefined;\n            if (inlineSlash) {\n                editor.model.change(writer => {\n                    const endPosition = writer.createPositionAt(inlineSlash, 'end');\n                    writer.setSelection(endPosition);\n                });\n                this.isInlineInsertion = true;\n                const startPosition = editor.model.createPositionAt(inlineSlash, 0);\n                const endPosition = editor.model.createPositionAt(inlineSlash, 'end');\n                const range = model.createRange(startPosition, endPosition);\n                parentEquivalentHTML = (equivalentView === null || equivalentView === void 0 ? void 0 : equivalentView.parent) ?\n                    view.domConverter.mapViewToDom(equivalentView.parent) :\n                    undefined;\n                content = '';\n                for (const item of range.getItems()) {\n                    if (item.is('$textProxy')) {\n                        content += item.data.trim(); // Add text data\n                    }\n                }\n            }\n            else if (parentEquivalentHTML) {\n                editor.model.change(writer => {\n                    const endPosition = writer.createPositionAt(position.parent, 'end');\n                    writer.setSelection(endPosition);\n                });\n                content = parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText;\n            }\n        }\n        if (command) {\n            content = command;\n            selectedContent = parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.outerHTML;\n            const selection = model.document.selection;\n            const range = selection.getFirstRange();\n            if (range) {\n                model.change(writer => {\n                    writer.setSelection(range.end);\n                });\n            }\n        }\n        if (this.moderationEnable) {\n            const moderateContent = await this.moderateContent(content !== null && content !== void 0 ? content : '');\n            if (!moderateContent) {\n                return;\n            }\n        }\n        try {\n            const domSelection = window.getSelection();\n            const domRange = domSelection === null || domSelection === void 0 ? void 0 : domSelection.getRangeAt(0);\n            const rect = domRange.getBoundingClientRect();\n            aiAgentContext.showLoader(rect);\n            const gptPrompt = await this.generateGptPromptBasedOnUserPrompt(content !== null && content !== void 0 ? content : '', parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText, selectedContent);\n            if (parent && gptPrompt) {\n                await this.fetchAndProcessGptResponse(gptPrompt, parent);\n            }\n        }\n        catch (error) {\n            console.error('Error handling slash command:', error);\n            throw error;\n        }\n        finally {\n            this.isInlineInsertion = false;\n            aiAgentContext.hideLoader();\n        }\n    }\n    /**\n     * Moderates the input content using OpenAI's moderation API to check for inappropriate content.\n     *\n     * @param input - The text content to be moderated\n     * @returns A promise that resolves to:\n     * - `true` if content is acceptable or if moderation fails (fail-open)\n     * - `false` if content is flagged as inappropriate\n     *\n     * @throws Shows user-friendly error messages via aiAgentContext for:\n     * - Flagged content (\"Cannot process your query...\")\n     * - API errors (\"Error in content moderation\")\n     */\n    async moderateContent(input) {\n        var _a;\n        if (!this.moderationKey) {\n            return true;\n        }\n        const editor = this.editor;\n        const t = editor.t;\n        const controller = new AbortController();\n        // Set timeout for moderation request\n        const timeoutId = setTimeout(() => controller.abort(), this.timeOutDuration);\n        try {\n            const response = await fetch(MODERATION_URL, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.moderationKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ input }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!((_a = data === null || data === void 0 ? void 0 : data.results) === null || _a === void 0 ? void 0 : _a[0])) {\n                throw new Error('Invalid moderation response format');\n            }\n            const flags = ALL_MODERATION_FLAGS.filter(flag => !this.disableFlags.includes(flag));\n            if (data.results[0].flagged) {\n                let error = false;\n                const categories = data.results[0].categories;\n                for (let index = 0; index < flags.length; index++) {\n                    const flag = flags[index];\n                    if (flags.includes(flag)) {\n                        if (categories[flag]) {\n                            error = true;\n                            break;\n                        }\n                    }\n                }\n                if (error) {\n                    aiAgentContext.showError(t('I\\'m sorry, but I cannot assist with that request.'));\n                    return false;\n                }\n            }\n            return true;\n        }\n        catch (error) {\n            console.error('Moderation error:', error);\n            // Handle specific error cases\n            if (error instanceof TypeError) {\n                aiAgentContext.showError(t('Network error during content moderation'));\n            }\n            else if (error instanceof DOMException && error.name === 'AbortError') {\n                aiAgentContext.showError(t('Content moderation timed out'));\n            }\n            else {\n                aiAgentContext.showError(t('Error in content moderation'));\n            }\n            // Fail open for moderation errors\n            return true;\n        }\n        finally {\n            clearTimeout(timeoutId);\n        }\n    }\n    /**\n     * Fetches and processes the GPT response based on the provided prompt and parent element.\n     *\n     * @param prompt - The prompt to send to the GPT model.\n     * @param parent - The parent element in the editor where the response will be inserted.\n     * @param retries - The number of retry attempts for the API call (default is the configured retry attempts).\n     * @returns A promise that resolves when the response has been processed.\n     */\n    async fetchAndProcessGptResponse(prompt, parent, retries = this.retryAttempts) {\n        var _a, _b, _c;\n        console.log('Starting fetchAndProcessGptResponse');\n        const editor = this.editor;\n        const t = editor.t;\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.timeOutDuration);\n        let buffer = '';\n        let contentBuffer = '';\n        const blockID = `ai-${new Date().getTime()}`;\n        try {\n            const response = await fetch(this.endpointUrl, {\n                method: 'POST',\n                headers: {\n                    Authorization: `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.aiModel,\n                    messages: [\n                        { role: 'system', content: this.promptHelper.getSystemPrompt(this.isInlineInsertion) },\n                        { role: 'user', content: prompt }\n                    ],\n                    temperature: this.temperature,\n                    max_tokens: this.maxTokens,\n                    stop: this.stopSequences,\n                    stream: true\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error('Fetch failed');\n            }\n            aiAgentContext.hideLoader();\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder('utf-8');\n            this.clearParentContent(parent);\n            // this.editor.enableReadOnlyMode( this.aiAgentFeatureLockId );\n            let insertParent = true;\n            this.cancelGenerationButton(blockID, controller);\n            editor.model.change(writer => {\n                var _a;\n                const position = editor.model.document.selection.getLastPosition();\n                if (position) {\n                    const aiTagInline = writer.createElement('ai-tag', {\n                        id: `${blockID}-inline`\n                    });\n                    writer.insert(aiTagInline, position);\n                    const aiTag = writer.createElement('ai-tag', {\n                        id: blockID\n                    });\n                    const parent = position.parent;\n                    if (parent) {\n                        if (((_a = parent.parent) === null || _a === void 0 ? void 0 : _a.name) === 'tableCell') {\n                            insertParent = false;\n                        }\n                        else if (parent.getAttribute('listType') === 'bulleted') {\n                            insertParent = false;\n                        }\n                    }\n                    let parentContent = '';\n                    for (const child of parent.getChildren()) {\n                        if (child.is('$text')) {\n                            parentContent += child.data;\n                        }\n                    }\n                    const nextLinePosition = parentContent ?\n                        writer.createPositionAt(position.parent, 'after') :\n                        writer.createPositionAt(position.parent, 'before');\n                    writer.insert(aiTag, insertParent ? nextLinePosition : position);\n                    const newPosition = writer.createPositionAt(aiTag, 'end');\n                    writer.setSelection(newPosition);\n                }\n            });\n            console.log('Starting to process response');\n            for (;;) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    console.log('Finished reading response');\n                    break;\n                }\n                const chunk = decoder.decode(value, { stream: true });\n                buffer += chunk;\n                let newlineIndex;\n                while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                    const line = buffer.slice(0, newlineIndex).trim();\n                    buffer = buffer.slice(newlineIndex + 1);\n                    if (line.startsWith('data: ')) {\n                        const jsonStr = line.slice(5).trim();\n                        if (jsonStr === '[DONE]') {\n                            console.log('Received [DONE] signal');\n                            break;\n                        }\n                        try {\n                            const data = JSON.parse(jsonStr);\n                            const content = (_b = (_a = data.choices[0]) === null || _a === void 0 ? void 0 : _a.delta) === null || _b === void 0 ? void 0 : _b.content;\n                            if (content !== null && content !== undefined) {\n                                contentBuffer += content;\n                                // if ( this.htmlParser.isCompleteHtmlChunk( contentBuffer ) ) {\n                                // \tawait this.processContent( contentBuffer );\n                                // \tcontentBuffer = '';\n                                // }\n                            }\n                            await this.updateContent(contentBuffer, blockID);\n                        }\n                        catch (parseError) {\n                            console.warn('Error parsing JSON:', parseError);\n                        }\n                    }\n                }\n            }\n            this.processCompleted(blockID);\n        }\n        catch (error) {\n            if (this.abortGeneration) {\n                return;\n            }\n            console.error('Error in fetchAndProcessGptResponse:', error);\n            const errorIdentifier = ((error === null || error === void 0 ? void 0 : error.message) || '').trim() || ((error === null || error === void 0 ? void 0 : error.name) || '').trim();\n            const isRetryableError = [\n                'AbortError',\n                'ReadableStream not supported',\n                'AiAgent: Fetch failed'\n            ].includes(errorIdentifier);\n            if (retries > 0 && isRetryableError) {\n                console.warn(`Retrying... (${retries} attempts left)`);\n                return await this.fetchAndProcessGptResponse(prompt, parent, retries - 1);\n            }\n            let errorMessage;\n            switch ((error === null || error === void 0 ? void 0 : error.name) || ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.trim())) {\n                case 'ReadableStream not supported':\n                    errorMessage = t('Browser does not support readable streams');\n                    break;\n                case 'AiAgent: Fetch failed':\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n                    break;\n                default:\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n            }\n            aiAgentContext.showError(errorMessage);\n        }\n        finally {\n            this.editor.disableReadOnlyMode(this.aiAgentFeatureLockId);\n        }\n    }\n    /**\n     * Creates and configures a cancel generation button with keyboard shortcut support.\n     *\n     * @param blockID - Unique identifier for the AI generation block\n     * @param controller - AbortController to cancel the ongoing AI generation\n     * @private\n     */\n    cancelGenerationButton(blockID, controller) {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = new ButtonView();\n        let label = t('Cancel Generation');\n        if (env.isMac) {\n            label = t('\\u2318 + \\u232B Cancel Generation');\n        }\n        if (env.isWindows) {\n            label = t('Ctrl + \\u232B Cancel Generation');\n        }\n        view.set({\n            label,\n            withText: true,\n            class: 'ck-cancel-request-button'\n        });\n        view.on('execute', () => {\n            this.abortGeneration = true;\n            controller.abort();\n            this.processCompleted(blockID);\n        });\n        view.render();\n        editor.keystrokes.set('Ctrl+Backspace', (keyEvtData, cancel) => {\n            if (keyEvtData.ctrlKey || keyEvtData.metaKey) {\n                this.abortGeneration = true;\n                controller.abort();\n                this.processCompleted(blockID);\n            }\n            cancel();\n        });\n        if (editor.ui.view.element && view.element) {\n            const panelContent = editor.ui.view.element.querySelector('.ck-sticky-panel__content .ck-toolbar__items');\n            if (panelContent) {\n                panelContent.append(view.element);\n            }\n        }\n        setTimeout(() => view.set({ class: 'ck-cancel-request-button visible' }), 2000);\n    }\n    /**\n     * Handles cleanup after AI generation is completed or cancelled.\n     * Removes the cancel button from the UI and cleans up the temporary AI tag from editor content.\n     *\n     * @param blockID - Unique identifier for the AI generation block to be cleaned up\n     * @private\n     */\n    processCompleted(blockID) {\n        const editor = this.editor;\n        if (editor.ui.view.element) {\n            const cancelButton = editor.ui.view.element.querySelector('.ck-cancel-request-button');\n            if (cancelButton) {\n                cancelButton.remove();\n            }\n        }\n        const editorData = editor.getData();\n        let editorContent = editorData.replace(new RegExp(`<ai-tag id=\"${blockID}-inline\">&nbsp;</ai-tag>`, 'g'), '');\n        editorContent = editorContent.replace(new RegExp(`<ai-tag id=\"${blockID}\">&nbsp;</ai-tag>`, 'g'), '');\n        editorContent = editorContent.replace(/<\\/ai-tag>\\s*<[^>]+>\\s*&nbsp;\\s*<\\/[^>]+>/g, '');\n        editorContent = editorContent.replace(`<ai-tag id=\"${blockID}-inline\">`, '');\n        editorContent = editorContent.replace(`<ai-tag id=\"${blockID}\">`, '');\n        editor.setData(editorContent);\n    }\n    /**\n     * Recursively retrieves all child elements of a given view element that match the specified block ID.\n     *\n     * @param viewElement - The parent view element from which to retrieve children.\n     * @param blockID - The unique identifier of the AI block to search for.\n     * @returns An array of matching child elements.\n     */\n    getViewChildrens(viewElement, blockID) {\n        const results = [];\n        for (const child of viewElement.getChildren()) {\n            if (child.is('element')) {\n                if (child.is('element', 'ai-tag') && child.getAttribute('id') === blockID) {\n                    results.push(child);\n                }\n                else {\n                    const nestedResults = this.getViewChildrens(child, blockID);\n                    results.push(...nestedResults);\n                }\n            }\n        }\n        return results;\n    }\n    /**\n     * Updates the content of an AI-generated block in the editor.\n     *\n     * @param newHtml - The new HTML content to insert\n     * @param blockID - The unique identifier of the AI block to update\n     * @param insertParent - Whether to insert at parent level or child level\n     * @returns Promise that resolves when the update is complete\n     * @private\n     */\n    async updateContent(newHtml, blockID) {\n        var _a;\n        const editor = this.editor;\n        const tempParagraph = document.createElement('div');\n        tempParagraph.innerHTML = newHtml;\n        let textContent = '';\n        const firstChild = tempParagraph.firstElementChild;\n        if (firstChild) {\n            const tagName = firstChild === null || firstChild === void 0 ? void 0 : firstChild.tagName;\n            if (tagName !== 'UL' && tagName !== 'TABLE') {\n                textContent = (_a = firstChild.textContent) !== null && _a !== void 0 ? _a : '';\n                tempParagraph.removeChild(firstChild);\n            }\n        }\n        else {\n            textContent = tempParagraph.innerHTML;\n            tempParagraph.innerHTML = '';\n        }\n        if (textContent) {\n            editor.model.change(writer => {\n                const root = editor.model.document.getRoot();\n                if (root) {\n                    const childrens = this.getViewChildrens(root, `${blockID}-inline`);\n                    const targetElement = childrens.length ? childrens[0] : null;\n                    if (targetElement) {\n                        const range = editor.model.createRangeIn(targetElement);\n                        writer.remove(range);\n                        writer.insertText(textContent, targetElement, 'end');\n                    }\n                }\n            });\n        }\n        if (tempParagraph.innerHTML) {\n            editor.model.change(writer => {\n                const root = editor.model.document.getRoot();\n                if (root) {\n                    const childrens = this.getViewChildrens(root, blockID);\n                    const targetElement = childrens.length ? childrens[0] : null;\n                    if (targetElement) {\n                        const range = editor.model.createRangeIn(targetElement);\n                        writer.remove(range);\n                        const viewFragment = editor.data.processor.toView(tempParagraph.innerHTML);\n                        const modelFragment = editor.data.toModel(viewFragment);\n                        writer.insert(modelFragment, targetElement, 'end');\n                    }\n                }\n            });\n        }\n        await new Promise(resolve => setTimeout(resolve));\n    }\n    /**\n     * Processes the provided content and inserts it into the specified parent element.\n     * Depending on the feature flag, it either uses a simple HTML insertion method\n     * or processes the content as HTML.\n     *\n     * @param content - The content to be processed and inserted.\n     * @param parent - The parent element in the editor where the content will be inserted.\n     */\n    async processContent(content) {\n        try {\n            console.log('--- Start of processContent ---');\n            console.log('Processing content:', content, this.isInlineInsertion);\n            if (this.isInlineInsertion) {\n                const position = this.editor.model.document.selection.getLastPosition();\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerHTML = content;\n                await this.htmlParser.insertAsText(tempParagraph || '', position !== null && position !== void 0 ? position : undefined, this.streamContent);\n            }\n            else {\n                if (this.streamContent) {\n                    // Existing complex content processing logic\n                    await this.proceedHtmlResponse(content);\n                }\n                else {\n                    // Use the simple HTML insertion method\n                    await this.htmlParser.insertSimpleHtml(content);\n                }\n            }\n            console.log('--- End of processContent ---');\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Processes the provided HTML string and inserts its content into the editor.\n     * It creates a temporary div to parse the HTML and handles different types of\n     * elements (lists, tables, headings, etc.) accordingly.\n     *\n     * @param html - The HTML string to be processed and inserted into the editor.\n     */\n    async proceedHtmlResponse(html) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n        for (const child of Array.from(tempDiv.childNodes)) {\n            const element = child;\n            if (element.nodeType === Node.ELEMENT_NODE) {\n                const elementName = element.tagName.toLowerCase();\n                const isStreamingNotAllow = [\n                    'table', 'blockquote', 'pre', 'img', 'form', 'figure'\n                ].includes(elementName);\n                if (isStreamingNotAllow) {\n                    await this.htmlParser.insertSimpleHtml(element.outerHTML);\n                }\n                else if (elementName === 'ul' || elementName === 'ol') {\n                    await this.htmlParser.insertAsText(element, undefined, true, true);\n                }\n                else {\n                    await this.htmlParser.insertAsText(element, undefined, true);\n                }\n            }\n            else if (element.nodeType === Node.TEXT_NODE && element.textContent) {\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerText = element.textContent;\n                await this.htmlParser.insertAsText(tempParagraph, undefined, true);\n            }\n        }\n    }\n    /**\n     * Clears the content of the specified parent element in the editor.\n     *\n     * @param parent - The parent element whose content will be cleared.\n     */\n    clearParentContent(parent) {\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot();\n        const position = model.document.selection.getLastPosition();\n        const inlineSlash = Array.from(parent.getChildren()).find((child) => child.name === 'inline-slash');\n        if (root && position) {\n            editor.model.change(writer => {\n                const startingPath = (inlineSlash === null || inlineSlash === void 0 ? void 0 : inlineSlash.getPath()) || parent.getPath();\n                const range = model.createRange(model.createPositionFromPath(root, startingPath), model.createPositionFromPath(root, position.path));\n                writer.remove(range);\n                // writer.setSelection( model.createPositionFromPath( root, startingPath ) );\n            });\n        }\n    }\n    /**\n     * Generates a GPT prompt based on the user's input and the current context in the editor.\n     * This method processes the input prompt, extracts any URLs, and formats the final prompt\n     * to be sent to the GPT model. It also handles the case where the editor is empty.\n     *\n     * @param prompt - The user's input prompt, typically starting with a slash.\n     * @param promptContainerText - Optional text from the container that may provide additional context.\n     * @returns A promise that resolves to the generated GPT prompt string or null if an error occurs.\n    */\n    async generateGptPromptBasedOnUserPrompt(prompt, promptContainerText, selectedContent) {\n        try {\n            const context = this.promptHelper.trimContext(prompt, promptContainerText);\n            const request = selectedContent ? prompt : prompt.slice(1);\n            let markDownContents = [];\n            const urlRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s]*/g;\n            const urls = prompt.match(urlRegex);\n            if (Array.isArray(urls) && urls.length) {\n                const formattedUrl = urls.map(url => {\n                    return url.replace(/[,.]$/, '');\n                });\n                markDownContents = await this.promptHelper.generateMarkDownForUrls(formattedUrl);\n                markDownContents = this.promptHelper.allocateTokensToFetchedContent(prompt, markDownContents);\n            }\n            const isEditorEmpty = context === '@@@cursor@@@';\n            return this.promptHelper.formatFinalPrompt(request, context, selectedContent, markDownContents, isEditorEmpty);\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n}\n","import { MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, createDropdown, SplitButtonView, LabeledFieldView, ListSeparatorView, createLabeledInputText } from 'ckeditor5/src/ui.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport aiAgentIcon from '../theme/icons/ai-agent.svg';\nimport searchIcon from '../theme/icons/search.svg';\nimport { aiAgentContext } from './aiagentcontext.js';\nimport { AI_AGENT_DROPDOWN_MENU, SUPPORTED_LANGUAGES, SHOW_ERROR_DURATION } from './const.js';\nimport { Widget, toWidget } from 'ckeditor5/src/widget.js';\nimport { env } from 'ckeditor5/src/utils.js';\nimport AiAgentService from './aiagentservice.js';\nexport default class AiAgentUI extends Plugin {\n    constructor(editor) {\n        var _a, _b;\n        super(editor);\n        this.PLACEHOLDER_TEXT_ID = 'slash-placeholder';\n        this.GPT_RESPONSE_LOADER_ID = 'gpt-response-loader';\n        this.GPT_RESPONSE_ERROR_ID = 'gpt-error';\n        this.showErrorDuration = SHOW_ERROR_DURATION;\n        this.commandsDropdown = AI_AGENT_DROPDOWN_MENU;\n        const config = editor.config.get('aiAgent');\n        this.showErrorDuration = (_a = config === null || config === void 0 ? void 0 : config.showErrorDuration) !== null && _a !== void 0 ? _a : SHOW_ERROR_DURATION;\n        this.commandsDropdown = (_b = config === null || config === void 0 ? void 0 : config.commandsDropdown) !== null && _b !== void 0 ? _b : AI_AGENT_DROPDOWN_MENU;\n    }\n    static get pluginName() {\n        return 'AiAgentUI';\n    }\n    static get requires() {\n        return [Widget];\n    }\n    /**\n     * Initializes the AI Agent UI plugin, setting up UI components and event listeners.\n     * This method is called when the plugin is loaded.\n     */\n    init() {\n        try {\n            aiAgentContext.uiComponent = this;\n            // Initialize UI components like buttons, placeholders, loaders, etc.\n            this.initializeUIComponents();\n            // Set displays content in the appropriate language.\n            this.initializeUILanguage();\n            // Attach event listeners for handling editor events and user interactions\n            this.attachListener();\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n    }\n    /**\n     * Initializes UI components such as placeholders, loaders, and buttons for the editor.\n     */\n    initializeUIComponents() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Register the inline-slash schema\n        editor.model.schema.register('inline-slash', {\n            inheritAllFrom: '$block',\n            isInline: true,\n            isObject: true,\n            allowWhere: '$text',\n            allowAttributes: ['class']\n        });\n        // Allow the inline-slash element to have text inside it\n        editor.model.schema.extend('$text', {\n            allowIn: 'inline-slash'\n        });\n        // Set up upcast conversion for inline-slash\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            model: (viewElement, { writer }) => {\n                return writer.createElement('inline-slash', {\n                    class: viewElement.getAttribute('class')\n                });\n            },\n            converterPriority: 'high'\n        });\n        editor.conversion.for('downcast').elementToElement({\n            model: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            view: (modelElement, { writer }) => {\n                return writer.createContainerElement('inline-slash', {\n                    class: modelElement.getAttribute('class')\n                });\n            }\n        });\n        this.addPlaceholder();\n        this.addLoader();\n        this.addGptErrorToolTip();\n        this.addAiAgentButton();\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Insert slash command (AI Agent)'),\n                    keystroke: 'Ctrl + /'\n                }\n            ]\n        });\n        editor.model.schema.register('ai-tag', {\n            inheritAllFrom: '$block',\n            isInline: true,\n            isObject: true,\n            allowWhere: '$block',\n            allowAttributes: ['id']\n        });\n        editor.model.schema.extend('$block', { allowIn: 'ai-tag' });\n        this.addCustomTagConversions();\n        let keystroke = '';\n        if (env.isMac) {\n            keystroke = 'Cmd + Backspace';\n        }\n        if (env.isWindows) {\n            keystroke = 'Ctrl + Backspace';\n        }\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Cancel AI Generation'),\n                    keystroke\n                }\n            ]\n        });\n    }\n    addCustomTagConversions() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'ai-tag',\n                attributes: ['id']\n            },\n            model: (viewElement, { writer }) => {\n                return writer.createElement('ai-tag', {\n                    id: viewElement.getAttribute('id')\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'ai-tag',\n            view: (modelElement, { writer }) => {\n                return writer.createContainerElement('ai-tag', {\n                    id: modelElement.getAttribute('id')\n                });\n            }\n        });\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'ai-tag',\n            view: (modelElement, { writer }) => {\n                const customTag = writer.createContainerElement('ai-tag', {\n                    id: modelElement.getAttribute('id')\n                });\n                return toWidget(customTag, writer);\n            }\n        });\n    }\n    /**\n     * Adds the AI Agent button to the editor's UI, which includes a dropdown menu\n     * for various AI commands. The button allows users to insert slash commands\n     * and provides a search functionality for available commands.\n     *\n     * This method sets up the button's execute event, handles user input for\n     * searching commands, and organizes the command menu into groups for better\n     * usability.\n     */\n    addAiAgentButton() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const model = this.editor.model;\n        const viewDocument = this.editor.editing.view.document;\n        const executeCommand = () => {\n            this.editor.model.change(writer => {\n                const position = this.editor.model.document.selection.getLastPosition();\n                if (position) {\n                    const inlineSlashContainer = writer.createElement('inline-slash', { class: 'ck-slash' });\n                    writer.insertText('/', inlineSlashContainer);\n                    writer.insert(inlineSlashContainer, position);\n                    const newPosition = writer.createPositionAt(inlineSlashContainer, 'end');\n                    writer.setSelection(newPosition);\n                }\n            });\n            this.editor.editing.view.focus();\n        };\n        this.editor.ui.componentFactory.add('aiAgentButton', locale => {\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            dropdownView.class = 'ck-ai-commands-list';\n            const buttonView = dropdownView.buttonView;\n            buttonView.set({\n                label: t('AI Agent'),\n                icon: aiAgentIcon,\n                tooltip: true\n            });\n            buttonView.on('execute', executeCommand);\n            const menuView = new MenuBarMenuView(locale);\n            const listView = new MenuBarMenuListView(locale);\n            const searchContainer = new MenuBarMenuListItemView(locale, menuView);\n            const labeledFieldView = new LabeledFieldView(locale, createLabeledInputText);\n            labeledFieldView.label = t('Search AI command');\n            // Create a wrapper div for the icon and input\n            const wrapper = document.createElement('div');\n            wrapper.className = 'ck-input-icon-wrapper';\n            // Create and add the icon\n            const iconSpan = document.createElement('span');\n            iconSpan.className = 'ck-input-search-icon';\n            iconSpan.innerHTML = searchIcon;\n            wrapper.appendChild(iconSpan);\n            labeledFieldView.fieldView.on('input', () => {\n                var _a;\n                if ((_a = labeledFieldView === null || labeledFieldView === void 0 ? void 0 : labeledFieldView.fieldView) === null || _a === void 0 ? void 0 : _a.element) {\n                    const search = labeledFieldView.fieldView.element.value.toLowerCase();\n                    this.aiAgentListItemUpdate(listView, 'search', search);\n                }\n            });\n            // Listen for selection changes in the editor\n            viewDocument.on('selectionChange', () => {\n                const selection = model.document.selection;\n                const range = selection.getFirstRange();\n                if (range) {\n                    const selectedText = Array.from(range.getItems())\n                        .map(item => item.data)\n                        .join('');\n                    const isTextSelected = !!selectedText;\n                    this.aiAgentListItemUpdate(listView, 'enable', isTextSelected);\n                }\n            });\n            searchContainer.children.add(labeledFieldView);\n            listView.items.add(searchContainer);\n            if (labeledFieldView.element) {\n                labeledFieldView.element.appendChild(wrapper);\n            }\n            for (const group of this.commandsDropdown) {\n                const separatorView = new ListSeparatorView(locale);\n                listView.items.add(separatorView);\n                // Add group title if needed\n                const titleView = new MenuBarMenuListItemView(locale, menuView);\n                const titleButton = new MenuBarMenuListItemButtonView(locale);\n                titleButton.set({\n                    label: t(group.title),\n                    class: 'ck-menu-group-title',\n                    isEnabled: false\n                });\n                titleView.children.add(titleButton);\n                listView.items.add(titleView);\n                // Add group items\n                for (const item of group.items) {\n                    const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                    const buttonView = new MenuBarMenuListItemButtonView(locale);\n                    buttonView.set({\n                        label: t(item.title),\n                        class: 'ck-menu-item',\n                        isEnabled: false\n                    });\n                    buttonView.delegate('execute').to(menuView);\n                    buttonView.on('execute', () => {\n                        const aiAgentService = new AiAgentService(this.editor);\n                        this.editor.editing.view.focus();\n                        aiAgentService.handleSlashCommand(item.command);\n                    });\n                    listItemView.children.add(buttonView);\n                    listView.items.add(listItemView);\n                }\n            }\n            dropdownView.panelView.children.add(listView);\n            return dropdownView;\n        });\n        editor.editing.view.document.on('keydown', (event, data) => {\n            if (data.ctrlKey && data.keyCode === 191) {\n                executeCommand();\n            }\n        });\n    }\n    /**\n     * Updates the enabled state of items in the AI Agent command list based on the provided type and data.\n     *\n     * This method iterates through the list of items in the provided listView and enables or disables them\n     * based on the search input or selection state. It checks if the item is a title, separator, or search input\n     * and updates the isEnabled property accordingly.\n     *\n     * @param listView - The MenuBarMenuListView containing the items to update.\n     * @param type - The type of update to perform, either 'search' to filter items based on input or 'enable'\n     *               to enable/disable items based on selection state.\n     * @param data - The search string for filtering items when type is 'search', or a boolean indicating\n     *               whether to enable or disable items when type is 'enable'.\n     */\n    aiAgentListItemUpdate(listView, type, data) {\n        listView.items.map(itemView => {\n            var _a;\n            const element = itemView;\n            if ((_a = element.children) === null || _a === void 0 ? void 0 : _a.first) {\n                const button = element.children.first;\n                if (button.class) {\n                    const isTitle = button.class.includes('ck-menu-group-title');\n                    const isSearchInout = button.class.includes('ck-ai-search-input');\n                    const isSeparator = !button.label;\n                    if (!isTitle && !isSeparator && !isSearchInout) {\n                        const label = button.label.toLowerCase();\n                        if (type === 'search') {\n                            element.isVisible = !data || label.includes(data);\n                        }\n                        if (type === 'enable') {\n                            element.isEnabled = data;\n                            button.isEnabled = data;\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Initializes the UI language settings based on the editor's locale.\n     * Displays an error tooltip if the current language is unsupported.\n     */\n    initializeUILanguage() {\n        const editor = this.editor;\n        const t = editor.t;\n        const contentLanguageCode = editor.locale.contentLanguage;\n        const supportedLanguages = SUPPORTED_LANGUAGES;\n        if (!supportedLanguages.includes(contentLanguageCode)) {\n            this.showGptErrorToolTip(t('Unsupported language code'));\n        }\n    }\n    /**\n     * Attaches event listeners to the editor for handling user interactions and content changes.\n     */\n    attachListener() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.on('change:data', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n        });\n        model.document.selection.on('change:range', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n            const modelRoot = editor.model.document.getRoot();\n            if (modelRoot) {\n                const modelRange = editor.model.createRangeIn(modelRoot);\n                const itemsToRemove = [];\n                for (const item of modelRange.getItems()) {\n                    if (item.is('element', 'inline-slash') && item.isEmpty) {\n                        itemsToRemove.push(item); // Collect empty items\n                    }\n                }\n                // Remove collected empty inline-slash elements\n                editor.model.change(writer => {\n                    for (const item of itemsToRemove) {\n                        writer.remove(item);\n                    }\n                });\n            }\n        });\n        editor.editing.view.document.on('scroll', () => {\n            this.hidePlaceHolder();\n        });\n        document.addEventListener('scroll', () => {\n            this.hidePlaceHolder();\n        });\n    }\n    /**\n     * Applies the placeholder to the current line in the editor if it is empty.\n     * Hides the placeholder if the line is not empty.\n     */\n    applyPlaceholderToCurrentLine() {\n        var _a;\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const block = (_a = modelSelection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.parent;\n        if (block && block.isEmpty) {\n            this.hidePlaceHolder();\n            setTimeout(async () => {\n                if (block.is('element')) {\n                    const rect = await this.getRectDomOfGivenModelElement(block);\n                    if (rect) {\n                        this.showPlaceHolder(rect);\n                    }\n                }\n            }, 100);\n        }\n        else {\n            this.hidePlaceHolder();\n        }\n    }\n    /**\n     * Retrieves the DOM rectangle of a given model element.\n     *\n     * @param element - The model element for which to get the DOM rectangle.\n     * @returns A promise that resolves to the DOMRect of the element, or null if not found.\n     */\n    async getRectDomOfGivenModelElement(element) {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const equivalentView = mapper.toViewElement(element);\n        if (equivalentView) {\n            const domElement = view.domConverter.mapViewToDom(equivalentView);\n            if (domElement) {\n                return domElement.getBoundingClientRect();\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds a placeholder element to the document body for user interaction.\n     */\n    addPlaceholder() {\n        const editor = this.editor;\n        const t = editor.t;\n        const placeholder = document.createElement('p');\n        placeholder.id = this.PLACEHOLDER_TEXT_ID;\n        placeholder.onclick = () => {\n            editor.focus();\n        };\n        placeholder.classList.add('place-holder');\n        placeholder.textContent = t('Type / to request AI content');\n        setTimeout(async () => {\n            const panelContent = editor.ui.view.element;\n            if (panelContent) {\n                panelContent.append(placeholder);\n            }\n        });\n    }\n    /**\n     * Shows the placeholder at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the placeholder.\n     */\n    showPlaceHolder(rect) {\n        var _a;\n        const editor = this.editor;\n        const ele = (_a = editor.ui.view.element) === null || _a === void 0 ? void 0 : _a.querySelector(`#${this.PLACEHOLDER_TEXT_ID}`);\n        const isReadOnlyMode = this.editor.isReadOnly;\n        if (ele && rect && !isReadOnlyMode) {\n            ele.classList.add('show-place-holder');\n            ele.style.left = `${rect.left}px`;\n            ele.style.top = `${rect.top}px`;\n        }\n        else if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Hides the placeholder element from the document.\n     */\n    hidePlaceHolder() {\n        var _a;\n        const editor = this.editor;\n        const ele = (_a = editor.ui.view.element) === null || _a === void 0 ? void 0 : _a.querySelector(`#${this.PLACEHOLDER_TEXT_ID}`);\n        if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Adds a loader element to the document body for indicating processing.\n     */\n    addLoader() {\n        const loaderElement = document.createElement('div');\n        loaderElement.id = this.GPT_RESPONSE_LOADER_ID;\n        loaderElement.classList.add('gpt-loader');\n        document.body.appendChild(loaderElement);\n    }\n    /**\n     * Shows the loader at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the loader.\n     */\n    showLoader(rect) {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele && rect) {\n            ele.style.left = `${rect.left + 10}px`;\n            ele.style.top = `${rect.top + 10}px`;\n            ele.classList.add('show-gpt-loader');\n        }\n        else if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Hides the loader element from the document.\n     */\n    hideLoader() {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Adds an error tooltip element to the document body for displaying error messages.\n     */\n    addGptErrorToolTip() {\n        const tooltipElement = document.createElement('p');\n        tooltipElement.id = this.GPT_RESPONSE_ERROR_ID;\n        tooltipElement.classList.add('response-error');\n        document.body.appendChild(tooltipElement);\n    }\n    /**\n     * Displays an error tooltip with the specified message.\n     *\n     * @param message - The error message to display in the tooltip.\n     */\n    showGptErrorToolTip(message) {\n        var _a, _b, _c;\n        console.log('Showing error message...', message);\n        const editor = this.editor;\n        const view = (_c = (_b = (_a = editor === null || editor === void 0 ? void 0 : editor.editing) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.domRoots) === null || _c === void 0 ? void 0 : _c.get('main');\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        const editorRect = view === null || view === void 0 ? void 0 : view.getBoundingClientRect();\n        if (tooltipElement && editorRect) {\n            tooltipElement.classList.add('show-response-error');\n            tooltipElement.textContent = message;\n            setTimeout(() => {\n                this.hideGptErrorToolTip();\n            }, this.showErrorDuration);\n        }\n    }\n    /**\n     * Hides the error tooltip element from the document.\n     */\n    hideGptErrorToolTip() {\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        if (tooltipElement) {\n            tooltipElement.classList.remove('show-response-error');\n        }\n    }\n}\n","import { Command } from 'ckeditor5/src/core.js';\nexport default class AiAgentCommand extends Command {\n    /**\n     * Creates an instance of the AiAgentCommand.\n     *\n     * @param editor - The editor instance to which this command belongs.\n     * @param aiAgentService - The service instance that handles AI assist functionality.\n     */\n    constructor(editor, aiAgentService) {\n        super(editor);\n        this.aiAgentService = aiAgentService;\n    }\n    /**\n     * Checks whether the command can be executed based on the current selection.\n     *\n     * @returns A boolean indicating if the command can be executed.\n     */\n    refresh() {\n        // Enable the command when the selection is in an empty block or at the beginning of a block\n        this.isEnabled = true;\n    }\n    /**\n     * Executes the AI assist command, processing the user's input and interacting with the AI service.\n     *\n     * @param options - An optional parameter for additional execution options.\n     */\n    async execute() {\n        await this.aiAgentService.handleSlashCommand();\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentCommand from './aiagentcommand.js';\nimport AiAgentService from './aiagentservice.js';\nexport default class AiAgentEditing extends Plugin {\n    static get pluginName() {\n        return 'AiAgentEditing';\n    }\n    /**\n     * Initializes the AI Agent editing plugin, setting up commands and key handling.\n     */\n    init() {\n        const editor = this.editor;\n        const aiAgentService = new AiAgentService(editor);\n        editor.commands.add('aiAgent', new AiAgentCommand(editor, aiAgentService));\n        this.setupEnterKeyHandling();\n    }\n    /**\n     * Sets up handling for the Enter key to trigger AI assist functionality.\n     * If the content starts with a slash, it cancels the default action and executes the AI assist command.\n     */\n    setupEnterKeyHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        editor.keystrokes.set('enter', async (_, cancel) => {\n            var _a;\n            const position = model.document.selection.getFirstPosition();\n            if (position) {\n                const paragraph = position.parent;\n                const inlineSlash = Array.from(paragraph.getChildren()).find((child) => child.name === 'inline-slash');\n                const equivalentView = mapper.toViewElement(paragraph);\n                let content;\n                if (equivalentView) {\n                    content =\n                        (_a = view.domConverter.mapViewToDom(equivalentView)) === null || _a === void 0 ? void 0 : _a.innerText;\n                }\n                if ((typeof content === 'string' && content.startsWith('/')) || inlineSlash) {\n                    cancel();\n                    await editor.execute('aiAgent');\n                }\n            }\n        });\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentUI from './aiagentui.js';\nimport AiAgentEditing from './aiagentediting.js';\nimport { TOKEN_LIMITS } from './const.js';\nimport '../theme/style.css';\nexport default class AiAgent extends Plugin {\n    constructor(editor) {\n        super(editor);\n        this.DEFAULT_GPT_MODEL = 'gpt-4o';\n        this.DEFAULT_AI_END_POINT = 'https://api.openai.com/v1/chat/completions';\n        const config = editor.config.get('aiAgent') || {};\n        // Set default values and merge with provided config\n        const defaultConfig = {\n            model: this.DEFAULT_GPT_MODEL,\n            apiKey: '',\n            endpointUrl: this.DEFAULT_AI_END_POINT,\n            temperature: 0.7,\n            timeOutDuration: 45000,\n            maxOutputTokens: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].maxOutputTokens,\n            maxInputTokens: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].maxInputContextTokens,\n            retryAttempts: 1,\n            contextSize: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].maxInputContextTokens * 0.75,\n            stopSequences: [],\n            promptSettings: {},\n            debugMode: false,\n            streamContent: true // Default streaming mode\n        };\n        const updatedConfig = { ...defaultConfig, ...config };\n        // Set the merged config back to the editor\n        editor.config.set('aiAgent', updatedConfig);\n        // Validate configuration\n        this.validateConfiguration(updatedConfig);\n    }\n    static get requires() {\n        return [AiAgentUI, AiAgentEditing];\n    }\n    static get pluginName() {\n        return 'AiAgent';\n    }\n    validateConfiguration(config) {\n        if (!config.apiKey) {\n            throw new Error('AiAgent: apiKey is required.');\n        }\n        if (config.temperature && (config.temperature < 0 || config.temperature > 2)) {\n            throw new Error('AiAgent: Temperature must be a number between 0 and 2.');\n        }\n        const limits = TOKEN_LIMITS[config.model];\n        // Validate output tokens\n        if (config.maxOutputTokens !== undefined) {\n            if (config.maxOutputTokens < limits.minOutputTokens ||\n                config.maxOutputTokens > limits.maxOutputTokens) {\n                throw new Error(`AiAgent: maxOutputTokens must be between ${limits.minOutputTokens} ` +\n                    `and ${limits.maxOutputTokens} for ${config.model}`);\n            }\n        }\n        // Validate input tokens\n        if (config.maxInputTokens !== undefined &&\n            config.maxInputTokens > limits.maxInputContextTokens) {\n            throw new Error(`AiAgent: maxInputTokens cannot exceed ${limits.maxInputContextTokens} ` +\n                `for ${config.model}`);\n        }\n    }\n    init() {\n        // Any additional initialization if needed\n    }\n}\n","import ckeditor from './../theme/icons/ckeditor.svg';\nimport './augmentation.js';\n\nexport { default as AiAgent } from './aiagent.js';\n\nexport const icons = {\n\tckeditor\n};\n"],"names":["AiAgentContext","constructor","getInstance","instance","uiComponent","component","this","_uiComponent","showError","message","console","log","showGptErrorToolTip","showLoader","rect","hideLoader","aiAgentContext","TOKEN_LIMITS","minOutputTokens","maxOutputTokens","maxInputContextTokens","SUPPORTED_LANGUAGES","ALL_MODERATION_FLAGS","AI_AGENT_DROPDOWN_MENU","title","items","command","nodeToHtmlMap","blockQuote","caption","codeBlock","heading1","heading2","heading3","imageBlock","imageInline","paragraph","table","tableCell","tableRow","$listItem","horizontalLine","textAttributeToHtmlMap","bold","italic","code","strikethrough","subscript","superscript","underline","linkHref","getAllowedHtmlTags","editor","definitions","model","schema","getDefinitions","schemaNodes","Object","keys","sort","allowedTags","Set","forEach","node","add","textDefinition","$text","allowAttributes","attr","has","Array","from","abbreviations","stringHelper","word","c","length","indexOf","slice","end","englishAbbreviations","Match","setAbbreviations","abbr","isCapitalized","str","test","isNumber","isSentenceStarter","substring","isCommonAbbreviation","noSymbols","replace","isTimeAbbreviation","next","toLowerCase","isDottedAbbreviation","matches","match","isCustomAbbreviation","isNameAbbreviation","wordCount","words","filter","charAt","dotPos","isNaN","isPhoneNr","isURL","isConcatenated","i","isBoundaryChar","sanitizeHtml","text","opts","String","document","$div","createElement","innerHTML","textContent","trim","require$$1","require$$2","newline_placeholder","newline_placeholder_t","whiteSpaceCheck","RegExp","addNewLineBoundaries","splitIntoWords","trimMultilineString","split","map","line","join","extractEditorContent","contentAfterPrompt","contextSize","reverse","trimmedContent","charCount","options","preserve_whitespace","html_boundaries","allowed_tags","sentences","sbd","iterator","sentence","sentenceLength","countTokens","content","tokens","approxTokenCount","token","Math","ceil","trimLLMContentByTokens","maxTokens","elements","accumulatedTokens","element","elementTokenCount","async","fetchUrlContent","url","trimmedUrl","Error","requestURL","response","fetch","headers","ok","status","includes","error","tokenizer","user_options","newline_boundaries","html_boundaries_tags","sanitize","k","html_boundaries_regexp","re","index","temp","current","ii","L","push","endsWithChar","pop","endsWith","s","reduce","out","lastSentence","concat","tokenCount","splice","getDefaultRules","rules","defaultRulesJson","htmlFormatting","PromptHelper","_a","_b","_c","config","get","promptSettings","debugMode","editorContextRatio","getSystemPrompt","isInlineResponse","defaultComponents","systemPrompt","id","defaultContent","entries","componentId","overrides","additions","group","groupEnd","trimContext","prompt","promptContainerText","_d","_e","contentBeforePrompt","splitText","view","editing","domRoots","context","innerText","matchIndex","nextEnterIndex","firstNewlineIndex","contextParts","allocatedEditorContextToken","floor","escapedPrompt","formatFinalPrompt","request","selectedContent","markDownContents","isEditorEmpty","contentLanguageCode","locale","contentLanguage","corpus","getComponentContent","trimStart","removeLeadingSpaces","generateMarkDownForUrls","urls","markdownContents","allocateTokensToFetchedContent","fetchedContent","_f","editorContent","editorToken","min","availableLimit","tokensPerContent","HtmlParser","insertSimpleHtml","html","viewFragment","data","processor","toView","modelFragment","toModel","selection","root","getRoot","insertionPosition","getLastPosition","lastInsertedChild","getChild","childCount","currentChildIndex","path","lastUpdatedElementInRoot","change","writer","is","isEmpty","createPositionAt","createPositionAfter","setSelection","insertContent","isBreakElementReq","getAttribute","name","insert","Promise","resolve","setTimeout","insertAsText","position","stream","shouldAddBreakAtEnd","outerHTML","childrenToInsert","getChildren","insertPosition","undefined","insertElementAsStream","batchInsertOfElement","lastPosition","getFirstPosition","lastRecognizedPosition","targetElement","currentElement","parent","lastUpdatedElement","key","value","getAttributes","_setAttribute","textChildren","child","textNode","textAttributes","_data","char","currentPosition","shouldAppendAtEnd","getShiftedBy","offset","maxOffset","insertText","isCompleteHtmlChunk","trimmedHtml","startsWith","AiAgentService","_g","_h","_j","aiAgentFeatureLockId","Symbol","buffer","openTags","isInlineInsertion","abortGeneration","disableFlags","promptHelper","htmlParser","aiModel","apiKey","endpointUrl","temperature","timeOutDuration","retryAttempts","stopSequences","streamContent","moderationKey","moderation","moderationEnable","enable","handleSlashCommand","mapper","parentEquivalentHTML","inlineSlash","equivalentView","toViewElement","domConverter","mapViewToDom","endPosition","startPosition","range","createRange","item","getItems","getFirstRange","moderateContent","domSelection","window","getSelection","getRangeAt","getBoundingClientRect","gptPrompt","generateGptPromptBasedOnUserPrompt","fetchAndProcessGptResponse","input","t","controller","AbortController","timeoutId","abort","method","Authorization","body","JSON","stringify","signal","clearTimeout","json","results","flags","flag","flagged","categories","TypeError","DOMException","retries","contentBuffer","blockID","Date","getTime","messages","role","max_tokens","stop","reader","getReader","decoder","TextDecoder","clearParentContent","insertParent","cancelGenerationButton","aiTagInline","aiTag","parentContent","nextLinePosition","newPosition","done","read","newlineIndex","decode","jsonStr","parse","choices","delta","updateContent","parseError","warn","processCompleted","errorIdentifier","isRetryableError","errorMessage","disableReadOnlyMode","ButtonView","label","env","isMac","isWindows","set","withText","class","on","render","keystrokes","keyEvtData","cancel","ctrlKey","metaKey","ui","panelContent","querySelector","append","cancelButton","remove","getData","setData","getViewChildrens","viewElement","nestedResults","newHtml","tempParagraph","firstChild","firstElementChild","tagName","removeChild","childrens","createRangeIn","processContent","proceedHtmlResponse","tempDiv","childNodes","nodeType","Node","ELEMENT_NODE","elementName","TEXT_NODE","find","startingPath","getPath","createPositionFromPath","urlRegex","isArray","formattedUrl","AiAgentUI","Plugin","super","PLACEHOLDER_TEXT_ID","GPT_RESPONSE_LOADER_ID","GPT_RESPONSE_ERROR_ID","showErrorDuration","commandsDropdown","pluginName","requires","Widget","init","initializeUIComponents","initializeUILanguage","attachListener","register","inheritAllFrom","isInline","isObject","allowWhere","extend","allowIn","conversion","for","elementToElement","attributes","converterPriority","modelElement","createContainerElement","addPlaceholder","addLoader","addGptErrorToolTip","addAiAgentButton","accessibility","addKeystrokeInfos","keystroke","addCustomTagConversions","customTag","toWidget","viewDocument","executeCommand","inlineSlashContainer","focus","componentFactory","dropdownView","createDropdown","SplitButtonView","buttonView","icon","tooltip","menuView","MenuBarMenuView","listView","MenuBarMenuListView","searchContainer","MenuBarMenuListItemView","labeledFieldView","LabeledFieldView","createLabeledInputText","wrapper","className","iconSpan","appendChild","fieldView","search","aiAgentListItemUpdate","isTextSelected","children","separatorView","ListSeparatorView","titleView","titleButton","MenuBarMenuListItemButtonView","isEnabled","listItemView","delegate","to","aiAgentService","panelView","event","keyCode","type","itemView","first","button","isTitle","isSearchInout","isSeparator","isVisible","applyPlaceholderToCurrentLine","modelRoot","modelRange","itemsToRemove","hidePlaceHolder","addEventListener","block","getRectDomOfGivenModelElement","showPlaceHolder","domElement","placeholder","onclick","classList","ele","isReadOnlyMode","isReadOnly","style","left","top","loaderElement","getElementById","tooltipElement","editorRect","hideGptErrorToolTip","AiAgentCommand","Command","refresh","execute","AiAgentEditing","commands","setupEnterKeyHandling","_","AiAgent","DEFAULT_GPT_MODEL","DEFAULT_AI_END_POINT","updatedConfig","maxInputTokens","validateConfiguration","limits","icons","ckeditor"],"mappings":"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","x_google_ignoreList":[3,4,5,6]}