{"version":3,"file":"index.js","sources":["../../src/aiassistcontext.js","../../src/const.js","../../src/aiassistui.js","../../src/aiassistcommand.js","../../node_modules/sbd/lib/Match.js","../../node_modules/sbd/lib/stringHelper.js","../../node_modules/sbd/lib/tokenizer.js","../../node_modules/sbd/lib/sanitize-html-browser.js","../../src/util/prompt.js","../../src/util/htmlparser.js","../../src/aiassistservice.js","../../src/aiassistediting.js","../../src/aiassist.js","../../src/index.ts"],"sourcesContent":["/**\n * The AiAssistContext class provides a context for the AI Assist plugin,\n * allowing access to shared resources and state across different components.\n */\nexport class AiAssistContext {\n    constructor() { }\n    static getInstance() {\n        if (!AiAssistContext.instance) {\n            AiAssistContext.instance = new AiAssistContext();\n        }\n        return AiAssistContext.instance;\n    }\n    set uiComponent(component) {\n        this._uiComponent = component;\n    }\n    showError(message) {\n        if (this._uiComponent) {\n            console.log('Showing error message...', message);\n            this._uiComponent.showGptErrorToolTip(message);\n        }\n    }\n    showLoader(rect) {\n        if (this._uiComponent) {\n            this._uiComponent.showLoader(rect);\n        }\n    }\n    hideLoader() {\n        if (this._uiComponent) {\n            this._uiComponent.hideLoader();\n        }\n    }\n}\nexport const aiAssistContext = AiAssistContext.getInstance();\n","// const\nexport const TOKEN_LIMITS = {\n    'gpt-3': { min: 1, max: 4096, context: 16385 },\n    'gpt-3.5-turbo': { min: 1, max: 4096, context: 16385 },\n    'gpt-4': { min: 1, max: 4096, context: 128000 },\n    'gpt-4o': { min: 0, max: 4096, context: 128000 },\n    'gpt-4-turbo': { min: 1, max: 4096, context: 128000 },\n    'gpt-4o-mini': { min: 1, max: 4096, context: 128000 }\n};\nexport const SUPPORTED_LANGUAGES = ['en', 'es', 'hi', 'nl'];\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport { ButtonView, createDropdown, SplitButtonView } from 'ckeditor5/src/ui.js';\nimport aiAssistIcon from '../theme/icons/ai-assist.svg';\nimport { aiAssistContext } from './aiassistcontext.js';\nimport { SUPPORTED_LANGUAGES } from './const.js';\nexport default class AiAssistUI extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.PLACEHOLDER_TEXT_ID = 'slash-placeholder';\n        this.GPT_RESPONSE_LOADER_ID = 'gpt-response-loader';\n        this.GPT_RESPONSE_ERROR_ID = 'gpt-error';\n    }\n    static get pluginName() {\n        return 'AiAssistUI';\n    }\n    /**\n     * Initializes the AI Assist UI plugin, setting up UI components and event listeners.\n     * This method is called when the plugin is loaded.\n     */\n    init() {\n        try {\n            aiAssistContext.uiComponent = this;\n            // Initialize UI components like buttons, placeholders, loaders, etc.\n            this.initializeUIComponents();\n            // Set displays content in the appropriate language.\n            this.initializeUILanguage();\n            // Attach event listeners for handling editor events and user interactions\n            this.attachListener();\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n    }\n    /**\n     * Initializes UI components such as placeholders, loaders, and buttons for the editor.\n     */\n    initializeUIComponents() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Register the inline-slash schema\n        editor.model.schema.register('inline-slash', {\n            inheritAllFrom: '$block',\n            isInline: true,\n            isObject: true,\n            allowWhere: '$text',\n            allowAttributes: ['class']\n        });\n        // Allow the inline-slash element to have text inside it\n        editor.model.schema.extend('$text', {\n            allowIn: 'inline-slash'\n        });\n        // Set up upcast conversion for inline-slash\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            model: (viewElement, { writer }) => {\n                return writer.createElement('inline-slash', {\n                    class: viewElement.getAttribute('class')\n                });\n            },\n            converterPriority: 'high'\n        });\n        editor.conversion.for('downcast').elementToElement({\n            model: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            view: (modelElement, { writer }) => {\n                return writer.createContainerElement('inline-slash', {\n                    class: modelElement.getAttribute('class')\n                });\n            }\n        });\n        this.addPlaceholder();\n        this.addLoader();\n        this.addGptErrorToolTip();\n        editor.ui.componentFactory.add('aiAssistButton', locale => {\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const view = new ButtonView(locale);\n            // const view =  dropdownView.buttonView;\n            view.set({\n                label: t('Ai assist'),\n                icon: aiAssistIcon,\n                tooltip: true\n            });\n            view.on('execute', () => {\n                this.editor.model.change(writer => {\n                    const position = this.editor.model.document.selection.getLastPosition();\n                    if (position) {\n                        const inlineSlashContainer = writer.createElement('inline-slash', { class: 'ck-slash' });\n                        writer.insertText('/', inlineSlashContainer);\n                        writer.insert(inlineSlashContainer, position);\n                        const newPosition = writer.createPositionAt(inlineSlashContainer, 'end');\n                        writer.setSelection(newPosition);\n                    }\n                });\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n    /**\n     * Initializes the UI language settings based on the editor's locale.\n     * Displays an error tooltip if the current language is unsupported.\n     */\n    initializeUILanguage() {\n        const editor = this.editor;\n        const t = editor.t;\n        const contentLanguageCode = editor.locale.contentLanguage;\n        const supportedLanguages = SUPPORTED_LANGUAGES;\n        if (!supportedLanguages.includes(contentLanguageCode)) {\n            this.showGptErrorToolTip(t('Unsupported language code'));\n        }\n    }\n    /**\n     * Attaches event listeners to the editor for handling user interactions and content changes.\n     */\n    attachListener() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.on('change:data', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n        });\n        model.document.selection.on('change:range', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n            const modelRoot = editor.model.document.getRoot();\n            if (modelRoot) {\n                const modelRange = editor.model.createRangeIn(modelRoot);\n                const itemsToRemove = [];\n                for (const item of modelRange.getItems()) {\n                    if (item.is('element', 'inline-slash') && item.isEmpty) {\n                        itemsToRemove.push(item); // Collect empty items\n                    }\n                }\n                // Remove collected empty inline-slash elements\n                editor.model.change(writer => {\n                    for (const item of itemsToRemove) {\n                        writer.remove(item);\n                    }\n                });\n            }\n        });\n        editor.editing.view.document.on('scroll', () => {\n            this.hidePlaceHolder();\n        });\n        document.addEventListener('scroll', () => {\n            this.hidePlaceHolder();\n        });\n    }\n    /**\n     * Applies the placeholder to the current line in the editor if it is empty.\n     * Hides the placeholder if the line is not empty.\n     */\n    applyPlaceholderToCurrentLine() {\n        var _a;\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const block = (_a = modelSelection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.parent;\n        if (block && block.isEmpty) {\n            this.hidePlaceHolder();\n            setTimeout(async () => {\n                if (block.is('element')) {\n                    const rect = await this.getRectDomOfGivenModelElement(block);\n                    if (rect) {\n                        this.showPlaceHolder(rect);\n                    }\n                }\n            }, 100);\n        }\n        else {\n            this.hidePlaceHolder();\n        }\n    }\n    /**\n     * Retrieves the DOM rectangle of a given model element.\n     *\n     * @param element - The model element for which to get the DOM rectangle.\n     * @returns A promise that resolves to the DOMRect of the element, or null if not found.\n     */\n    async getRectDomOfGivenModelElement(element) {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const equivalentView = mapper.toViewElement(element);\n        if (equivalentView) {\n            const domElement = view.domConverter.mapViewToDom(equivalentView);\n            if (domElement) {\n                return domElement.getBoundingClientRect();\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds a placeholder element to the document body for user interaction.\n     */\n    addPlaceholder() {\n        const editor = this.editor;\n        const t = editor.t;\n        const placeholder = document.createElement('p');\n        placeholder.id = this.PLACEHOLDER_TEXT_ID;\n        placeholder.onclick = () => {\n            editor.focus();\n        };\n        placeholder.classList.add('place-holder');\n        placeholder.textContent = t('Type / to request AI content');\n        document.body.appendChild(placeholder);\n    }\n    /**\n     * Shows the placeholder at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the placeholder.\n     */\n    showPlaceHolder(rect) {\n        const ele = document.getElementById(this.PLACEHOLDER_TEXT_ID);\n        const isReadOnlyMode = this.editor.isReadOnly;\n        if (ele && rect && !isReadOnlyMode) {\n            ele.classList.add('show-place-holder');\n            ele.style.left = `${rect.left}px`;\n            ele.style.top = `${rect.top}px`;\n        }\n        else if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Hides the placeholder element from the document.\n     */\n    hidePlaceHolder() {\n        const ele = document.getElementById(this.PLACEHOLDER_TEXT_ID);\n        if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Adds a loader element to the document body for indicating processing.\n     */\n    addLoader() {\n        const loaderElement = document.createElement('div');\n        loaderElement.id = this.GPT_RESPONSE_LOADER_ID;\n        loaderElement.classList.add('gpt-loader');\n        document.body.appendChild(loaderElement);\n    }\n    /**\n     * Shows the loader at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the loader.\n     */\n    showLoader(rect) {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele && rect) {\n            ele.style.left = `${rect.left + 10}px`;\n            ele.style.top = `${rect.top + 10}px`;\n            ele.classList.add('show-gpt-loader');\n        }\n        else if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Hides the loader element from the document.\n     */\n    hideLoader() {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Adds an error tooltip element to the document body for displaying error messages.\n     */\n    addGptErrorToolTip() {\n        const tooltipElement = document.createElement('p');\n        tooltipElement.id = this.GPT_RESPONSE_ERROR_ID;\n        tooltipElement.classList.add('response-error');\n        document.body.appendChild(tooltipElement);\n    }\n    /**\n     * Displays an error tooltip with the specified message.\n     *\n     * @param message - The error message to display in the tooltip.\n     */\n    showGptErrorToolTip(message) {\n        var _a, _b, _c;\n        console.log('Showing error message...', message);\n        const editor = this.editor;\n        const view = (_c = (_b = (_a = editor === null || editor === void 0 ? void 0 : editor.editing) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.domRoots) === null || _c === void 0 ? void 0 : _c.get('main');\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        const editorRect = view === null || view === void 0 ? void 0 : view.getBoundingClientRect();\n        if (tooltipElement && editorRect) {\n            tooltipElement.classList.add('show-response-error');\n            tooltipElement.textContent = message;\n            setTimeout(() => {\n                this.hideGptErrorToolTip();\n            }, 2000);\n        }\n    }\n    /**\n     * Hides the error tooltip element from the document.\n     */\n    hideGptErrorToolTip() {\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        if (tooltipElement) {\n            tooltipElement.classList.remove('show-response-error');\n        }\n    }\n}\n","import { Command } from 'ckeditor5/src/core.js';\nexport default class AiAssistCommand extends Command {\n    /**\n     * Creates an instance of the AiAssistCommand.\n     *\n     * @param editor - The editor instance to which this command belongs.\n     * @param aiAssistService - The service instance that handles AI assist functionality.\n     */\n    constructor(editor, aiAssistService) {\n        super(editor);\n        this.aiAssistService = aiAssistService;\n    }\n    /**\n     * Checks whether the command can be executed based on the current selection.\n     *\n     * @returns A boolean indicating if the command can be executed.\n     */\n    refresh() {\n        // Enable the command when the selection is in an empty block or at the beginning of a block\n        this.isEnabled = true;\n    }\n    /**\n     * Executes the AI assist command, processing the user's input and interacting with the AI service.\n     *\n     * @param options - An optional parameter for additional execution options.\n     */\n    async execute() {\n        await this.aiAssistService.handleSlashCommand();\n    }\n}\n","var abbreviations;\r\n\r\nvar englishAbbreviations = [\r\n    \"al\",\r\n    \"adj\",\r\n    \"assn\",\r\n    \"Ave\",\r\n    \"BSc\", \"MSc\",\r\n    \"Cell\",\r\n    \"Ch\",\r\n    \"Co\",\r\n    \"cc\",\r\n    \"Corp\",\r\n    \"Dem\",\r\n    \"Dept\",\r\n    \"ed\",\r\n    \"eg\",\r\n    \"Eq\",\r\n    \"Eqs\",\r\n    \"est\",\r\n    \"est\",\r\n    \"etc\",\r\n    \"Ex\",\r\n    \"ext\", // + number?\r\n    \"Fig\",\r\n    \"fig\",\r\n    \"Figs\",\r\n    \"figs\",\r\n    \"i.e\",\r\n    \"ie\",\r\n    \"Inc\",\r\n    \"inc\",\r\n    \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Sept\",\"Oct\",\"Nov\",\"Dec\",\r\n    \"jr\",\r\n    \"mi\",\r\n    \"Miss\", \"Mrs\", \"Mr\", \"Ms\",\r\n    \"Mol\",\r\n    \"mt\",\r\n    \"mts\",\r\n    \"no\",\r\n    \"Nos\",\r\n    \"PhD\", \"MD\", \"BA\", \"MA\", \"MM\",\r\n    \"pl\",\r\n    \"pop\",\r\n    \"pp\",\r\n    \"Prof\", \"Dr\",\r\n    \"pt\",\r\n    \"Ref\",\r\n    \"Refs\",\r\n    \"Rep\",\r\n    \"repr\",\r\n    \"rev\",\r\n    \"Sec\",\r\n    \"Secs\",\r\n    \"Sgt\", \"Col\", \"Gen\", \"Rep\", \"Sen\",'Gov', \"Lt\", \"Maj\", \"Capt\",\"St\",\r\n    \"Sr\", \"sr\", \"Jr\", \"jr\", \"Rev\",\r\n    \"Sun\",\"Mon\",\"Tu\",\"Tue\",\"Tues\",\"Wed\",\"Th\",\"Thu\",\"Thur\",\"Thurs\",\"Fri\",\"Sat\",\r\n    \"trans\",\r\n    \"Univ\",\r\n    \"Viz\",\r\n    \"Vol\",\r\n    \"vs\",\r\n    \"v\",\r\n];\r\n\r\nexports.setAbbreviations = function(abbr) {\r\n    if (abbr) {\r\n        abbreviations = abbr;\r\n    } else {\r\n        abbreviations = englishAbbreviations;\r\n    }\r\n}\r\n\r\nvar isCapitalized = exports.isCapitalized = function(str) {\r\n    return /^[A-Z][a-z].*/.test(str) || isNumber(str);\r\n}\r\n\r\n// Start with opening quotes or capitalized letter\r\nexports.isSentenceStarter = function(str) {\r\n    return isCapitalized(str) || /``|\"|'/.test(str.substring(0,2));\r\n}\r\n\r\nexports.isCommonAbbreviation = function(str) {\r\n    var noSymbols = str.replace(/[-'`~!@#$%^&*()_|+=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \"\");\r\n\r\n    return ~abbreviations.indexOf(noSymbols);\r\n}\r\n\r\n// This is going towards too much rule based\r\nexports.isTimeAbbreviation = function(word, next) {\r\n    if (word === \"a.m.\" || word === \"p.m.\") {\r\n        var tmp = next.replace(/\\W+/g, '').slice(-3).toLowerCase();\r\n\r\n        if (tmp === \"day\") {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexports.isDottedAbbreviation = function(word) {\r\n    var matches = word.replace(/[\\(\\)\\[\\]\\{\\}]/g, '').match(/(.\\.)*/);\r\n    return matches && matches[0].length > 0;\r\n}\r\n\r\n// TODO look for next words, if multiple are capitalized,\r\n// then it's probably not a sentence ending\r\nexports.isCustomAbbreviation = function(str) {\r\n    if (str.length <= 3) {\r\n        return true;\r\n    }\r\n\r\n    return isCapitalized(str);\r\n}\r\n\r\n// Uses current word count in sentence and next few words to check if it is\r\n// more likely an abbreviation + name or new sentence.\r\nexports.isNameAbbreviation = function(wordCount, words) {\r\n    if (words.length > 0) {\r\n        if (wordCount < 5 && words[0].length < 6 && isCapitalized(words[0])) {\r\n            return true;\r\n        }\r\n\r\n        var capitalized = words.filter(function(str) {\r\n            return /[A-Z]/.test(str.charAt(0));\r\n        });\r\n\r\n        return capitalized.length >= 3;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvar isNumber = exports.isNumber = function(str, dotPos) {\r\n    if (dotPos) {\r\n        str = str.slice(dotPos-1, dotPos+2);\r\n    }\r\n\r\n    return !isNaN(str);\r\n};\r\n\r\n// Phone number matching\r\n// http://stackoverflow.com/a/123666/951517\r\nexports.isPhoneNr = function(str) {\r\n    return str.match(/^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$/);\r\n};\r\n\r\n// Match urls / emails\r\n// http://stackoverflow.com/a/3809435/951517\r\nexports.isURL = function(str) {\r\n    return str.match(/[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/);\r\n};\r\n\r\n// Starting a new sentence if beginning with capital letter\r\n// Exception: The word is enclosed in brackets\r\nexports.isConcatenated = function(word) {\r\n    var i = 0;\r\n\r\n    if ((i = word.indexOf(\".\")) > -1 ||\r\n        (i = word.indexOf(\"!\")) > -1 ||\r\n        (i = word.indexOf(\"?\")) > -1)\r\n    {\r\n        var c = word.charAt(i + 1);\r\n\r\n        // Check if the next word starts with a letter\r\n        if (c.match(/[a-zA-Z].*/)) {\r\n            return [word.slice(0, i), word.slice(i+1)];\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexports.isBoundaryChar = function(word) {\r\n    return word === \".\" ||\r\n           word === \"!\" ||\r\n           word === \"?\";\r\n};\r\n","\r\nexports.endsWithChar = function ends_with_char(word, c) {\r\n    if (c.length > 1) {\r\n        return c.indexOf(word.slice(-1)) > -1;\r\n    }\r\n\r\n    return word.slice(-1) === c;\r\n};\r\n\r\nexports.endsWith = function ends_with(word, end) {\r\n    return word.slice(word.length - end.length) === end;\r\n};","/*jshint node:true, laxcomma:true */\r\n\r\nvar sanitizeHtml = require(\"sanitize-html\");\r\n\r\nvar stringHelper = require(\"./stringHelper\");\r\nvar Match  = require(\"./Match\");\r\n\r\nvar newline_placeholder = \" @~@ \";\r\nvar newline_placeholder_t = newline_placeholder.trim();\r\n\r\n\r\nvar whiteSpaceCheck = new RegExp(\"\\\\S\", \"\");\r\nvar addNewLineBoundaries = new RegExp(\"\\\\n+|[-#=_+*]{4,}\", \"g\");\r\nvar splitIntoWords = new RegExp(\"\\\\S+|\\\\n\", \"g\");\r\n\r\n\r\n// Split the entry into sentences.\r\nexports.sentences = function(text, user_options) {\r\n    if (!text || typeof text !== \"string\" || !text.length) {\r\n        return [];\r\n    }\r\n\r\n    if (!whiteSpaceCheck.test(text)) {\r\n      // whitespace-only string has no sentences\r\n      return [];\r\n    }\r\n\r\n    var options = {\r\n        \"newline_boundaries\"  : false,\r\n        \"html_boundaries\"     : false,\r\n        \"html_boundaries_tags\": [\"p\",\"div\",\"ul\",\"ol\"],\r\n        \"sanitize\"            : false,\r\n        \"allowed_tags\"        : false,\r\n        \"preserve_whitespace\" : false,\r\n        \"abbreviations\"       : null\r\n    };\r\n\r\n    if (typeof user_options === \"boolean\") {\r\n        // Deprecated quick option\r\n        options.newline_boundaries = true;\r\n    }\r\n    else {\r\n        // Extend options\r\n        for (var k in user_options) {\r\n            options[k] = user_options[k];\r\n        }\r\n    }\r\n\r\n    Match.setAbbreviations(options.abbreviations);\r\n\r\n    if (options.newline_boundaries) {\r\n        text = text.replace(addNewLineBoundaries, newline_placeholder);\r\n    }\r\n\r\n    if (options.html_boundaries) {\r\n        var html_boundaries_regexp = \"(<br\\\\s*\\\\/?>|<\\\\/(\" + options.html_boundaries_tags.join(\"|\") + \")>)\";\r\n        var re = new RegExp(html_boundaries_regexp, \"g\");\r\n        text = text.replace(re, \"$1\" + newline_placeholder);\r\n    }\r\n\r\n    if (options.sanitize || options.allowed_tags) {\r\n        if (! options.allowed_tags) {\r\n            options.allowed_tags = [\"\"];\r\n        }\r\n\r\n        text = sanitizeHtml(text, { \"allowedTags\" : options.allowed_tags });\r\n    }\r\n\r\n\r\n    // Split the text into words\r\n    var words;\r\n    var tokens;\r\n\r\n    // Split the text into words\r\n    if (options.preserve_whitespace) {\r\n        // <br> tags are the odd man out, as whitespace is allowed inside the tag\r\n        tokens = text.split(/(<br\\s*\\/?>|\\S+|\\n+)/);\r\n\r\n        // every other token is a word\r\n        words = tokens.filter(function (token, ii) {\r\n          return ii % 2;\r\n        });\r\n    }\r\n    else {\r\n        // - see http://blog.tompawlak.org/split-string-into-tokens-javascript\r\n        words = text.trim().match(splitIntoWords);\r\n    }\r\n\r\n\r\n    var wordCount = 0;\r\n    var index = 0;\r\n    var temp  = [];\r\n    var sentences = [];\r\n    var current   = [];\r\n\r\n    // If given text is only whitespace (or nothing of \\S+)\r\n    if (!words || !words.length) {\r\n        return [];\r\n    }\r\n\r\n    for (var i=0, L=words.length; i < L; i++) {\r\n        wordCount++;\r\n\r\n        // Add the word to current sentence\r\n        current.push(words[i]);\r\n\r\n        // Sub-sentences, reset counter\r\n        if (~words[i].indexOf(\",\")) {\r\n            wordCount = 0;\r\n        }\r\n\r\n        if (Match.isBoundaryChar(words[i]) || stringHelper.endsWithChar(words[i], \"?!\") || words[i] === newline_placeholder_t) {\r\n            if ((options.newline_boundaries || options.html_boundaries) && words[i] === newline_placeholder_t) {\r\n                current.pop();\r\n            }\r\n\r\n            sentences.push(current);\r\n\r\n            wordCount = 0;\r\n            current   = [];\r\n\r\n            continue;\r\n        }\r\n\r\n\r\n        if (stringHelper.endsWithChar(words[i], \"\\\"\") || stringHelper.endsWithChar(words[i], \"”\")) {\r\n            words[i] = words[i].slice(0, -1);\r\n        }\r\n\r\n        // A dot might indicate the end sentences\r\n        // Exception: The next sentence starts with a word (non abbreviation)\r\n        //            that has a capital letter.\r\n        if (stringHelper.endsWithChar(words[i], \".\")) {\r\n            // Check if there is a next word\r\n            // This probably needs to be improved with machine learning\r\n            if (i+1 < L) {\r\n                // Single character abbr.\r\n                if (words[i].length === 2 && isNaN(words[i].charAt(0))) {\r\n                    continue;\r\n                }\r\n\r\n                // Common abbr. that often do not end sentences\r\n                if (Match.isCommonAbbreviation(words[i])) {\r\n                    continue;\r\n                }\r\n\r\n                // Next word starts with capital word, but current sentence is\r\n                // quite short\r\n                if (Match.isSentenceStarter(words[i+1])) {\r\n                    if (Match.isTimeAbbreviation(words[i], words[i+1])) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Dealing with names at the start of sentences\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 6))) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNumber(words[i+1])) {\r\n                        if (Match.isCustomAbbreviation(words[i])) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Skip ellipsis\r\n                    if (stringHelper.endsWith(words[i], \"..\")) {\r\n                        continue;\r\n                    }\r\n\r\n                    //// Skip abbreviations\r\n                    // Short words + dot or a dot after each letter\r\n                    if (Match.isDottedAbbreviation(words[i])) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 5))) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            sentences.push(current);\r\n            current   = [];\r\n            wordCount = 0;\r\n\r\n            continue;\r\n        }\r\n\r\n        // Check if the word has a dot in it\r\n        if ((index = words[i].indexOf(\".\")) > -1) {\r\n            if (Match.isNumber(words[i], index)) {\r\n                continue;\r\n            }\r\n\r\n            // Custom dotted abbreviations (like K.L.M or I.C.T)\r\n            if (Match.isDottedAbbreviation(words[i])) {\r\n                continue;\r\n            }\r\n\r\n            // Skip urls / emails and the like\r\n            if (Match.isURL(words[i]) || Match.isPhoneNr(words[i])) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (temp = Match.isConcatenated(words[i])) {\r\n            current.pop();\r\n            current.push(temp[0]);\r\n            sentences.push(current);\r\n\r\n            current = [];\r\n            wordCount = 0;\r\n            current.push(temp[1]);\r\n        }\r\n    }\r\n\r\n    if (current.length) {\r\n        sentences.push(current);\r\n    }\r\n\r\n\r\n    // Clear \"empty\" sentences\r\n    sentences = sentences.filter(function(s) {\r\n        return s.length > 0;\r\n    });\r\n\r\n    var result = sentences.slice(1).reduce(function (out, sentence) {\r\n      var lastSentence = out[out.length - 1];\r\n\r\n      // Single words, could be \"enumeration lists\"\r\n      if (lastSentence.length === 1 && /^.{1,2}[.]$/.test(lastSentence[0])) {\r\n          // Check if there is a next sentence\r\n          // It should not be another list item\r\n          if (!/[.]/.test(sentence[0])) {\r\n              out.pop()\r\n              out.push(lastSentence.concat(sentence));\r\n              return out;\r\n          }\r\n      }\r\n\r\n      out.push(sentence);\r\n\r\n      return out;\r\n    }, [ sentences[0] ]);\r\n\r\n    // join tokens back together\r\n    return result.map(function (sentence, ii) {\r\n      if (options.preserve_whitespace && !options.newline_boundaries && !options.html_boundaries) {\r\n        // tokens looks like so: [leading-space token, non-space token, space\r\n        // token, non-space token, space token... ]. In other words, the first\r\n        // item is the leading space (or the empty string), and the rest of\r\n        // the tokens are [non-space, space] token pairs.\r\n        var tokenCount = sentence.length * 2;\r\n\r\n        if (ii === 0) {\r\n          tokenCount += 1;\r\n        }\r\n\r\n        return tokens.splice(0, tokenCount).join(\"\");\r\n      }\r\n\r\n      return sentence.join(\" \");\r\n    });\r\n};\r\n","\r\nmodule.exports = function sanitizeHtml(text, opts) {\r\n  // Strip HTML from Text using browser HTML parser\r\n  if ((typeof text == 'string' || text instanceof String) && typeof document !== \"undefined\") {\r\n    var $div = document.createElement(\"DIV\");\r\n    $div.innerHTML = text;\r\n    text = ($div.textContent || '').trim();\r\n  }\r\n  //DOM Object\r\n  else if (typeof text === 'object' && text.textContent) {\r\n    text = (text.textContent || '').trim();\r\n  }\r\n\r\n  return text;\r\n};\r\n","import sbd from 'sbd';\nimport { aiAssistContext } from '../aiassistcontext.js';\nexport class PromptHelper {\n    constructor(editor) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.editor = editor;\n        const config = editor.config.get('aiAssist');\n        this.contextSize = config.contextSize;\n        this.responseOutputFormat = (_b = (_a = config.promptSettings) === null || _a === void 0 ? void 0 : _a.outputFormat) !== null && _b !== void 0 ? _b : [];\n        this.responseContextData = (_d = (_c = config.promptSettings) === null || _c === void 0 ? void 0 : _c.contextData) !== null && _d !== void 0 ? _d : [];\n        this.responseFilters = (_f = (_e = config.promptSettings) === null || _e === void 0 ? void 0 : _e.filters) !== null && _f !== void 0 ? _f : [];\n        this.debugMode = (_g = config.debugMode) !== null && _g !== void 0 ? _g : false;\n    }\n    /**\n     * Constructs the system prompt that guides the AI in generating responses.\n     *\n     * This method assembles a comprehensive set of instructions and context\n     * that the AI will utilize to formulate responses based on user input\n     * and the provided content, ensuring adherence to specified rules and formats.\n     *\n     * @param isInlineResponse - A boolean indicating whether the response should be inline.\n     * @returns A string containing the formatted system prompt for the AI.\n    */\n    getSystemPrompt(isInlineResponse = false) {\n        const corpus = [];\n        corpus.push(`You will be provided with a partially written article with \"\"\"@@@cursor@@@\"\"\" somewhere \n\t\t\tunder a CONTEXT section, user input under a TASK section, and sometimes there will be articles \n\t\t\t(delimited with marked-up language) separated by Starting Markdown Content \\${ number } and \n\t\t\tEnding Markdown Content \\${ index } with certain instructions to follow while generating a response \n\t\t\tunder an INSTRUCTION section`);\n        corpus.push(`If there is an article with \"\"\"Stating Markdown Content\"\"\", your task is to \n\t\t\tuse that provided information solely to respond to the user request in the TASK section.`);\n        corpus.push('Follow these step-by-step instructions to respond to user inputs:');\n        corpus.push(`Step 1 - Summarize information under the CONTEXT section, set a tone for the article, and \n\t\t\tlater use that summarized information to generate a response`);\n        corpus.push(`Step 2: If there is an article with \"\"\"Stating Markdown Content\"\"\", \n\t\t\tbreak it into derived sections and eliminate unnecessary information \n\t\t\tthat does not relate to the context and user prompt.`);\n        corpus.push('Final Step - use all summarized information to respond to user input under the TASK section');\n        corpus.push('While generating the response, adhere to the following rules:');\n        corpus.push(`1. Provide only the new text content that should replace \"@@@cursor@@@\" based on the context above, \n\t\t\tensuring that the response must primarily based on the request.`);\n        corpus.push(`2. Avoid including any part of the context in the output at any cost, \n\t\t\texcept for necessary glimpses that enhance the response.`);\n        corpus.push(`3. Ensure response adheres to the specified tone or style, such as \n\t\t\tformal, informal, or technical, as appropriate for the context.`);\n        corpus.push('4. Do not use any markdown formatting in your response. (e.g., **, ##, ###, ---, ===, ____).');\n        corpus.push(`5. Use a relaxed, formal or informal tone based on the summary of context with lots of personal touches. \n\t\t\tFeel free to include spontaneous thoughts, offhand comments, or quirky observations.`);\n        corpus.push(`6. Vary sentence lengths and styles—include fragments, casual interjections, \n\t\t\tand minor grammar slips, but avoid spelling mistakes.`);\n        corpus.push('7. Add in personal anecdotes or emotional reactions to make it sound like a genuine conversation.');\n        corpus.push('8. Avoid overly polished language or structured sentences, aim for a natural and solely human-like tone.');\n        if (isInlineResponse) {\n            corpus.push(`9: Determine from the context, task, and the position of the @@@cursor@@@ whether the request \n\t\t\t\tinvolves list items, table cells, or inline content.\n\t\t\t\t- List items: Format each item as <li> within an <ol> or <ul> as appropriate.\n\t\t\t\t- Table cells: Present each item in plain text, wrapping it within <p> tags.\n\t\t\t\t- Inline content: Wrap entire response in a single <p> tag, ensuring it fits seamlessly within the existing paragraph or \n\t\t\t\tsentence structure where the @@@cursor@@@ is located.\n\t\t\t\tStrictly adherence to these rules is mandatory to avoid errors, based on where the @@@cursor@@@ is placed within content.`);\n        }\n        corpus.push('Above are the rules apply every time, but below will only be applied if markdown content is present');\n        corpus.push('1. Extract each content as plain text without any special formatting, emphasis, or markdown');\n        corpus.push('2. The response should synthesize information from both the editor content ' +\n            'and the fetched sources, maintaining a balance between them.');\n        corpus.push('3. Highlight key points from the fetched sources while ensuring that ' +\n            'the context from the editor is acknowledged and integrated where relevant.');\n        corpus.push('4. Clearly differentiate between the information derived from the editor ' +\n            'content and that from the fetched sources to avoid confusion.');\n        corpus.push('When generating content, adhere to the following HTML-specific rules:');\n        corpus.push('1. Generate an HTML snippet, not a full HTML document.');\n        corpus.push('2. You are an HTML generator. When providing HTML code, ensure it follows standard HTML norms and best practices.');\n        corpus.push('4. Block-level elements (e.g., <p>, <div>, <section>) must not contain other block-level elements.');\n        corpus.push('5. Ensure valid nesting of elements.');\n        corpus.push('6. Use the following allowed HTML tags:');\n        corpus.push(`${this.getAllowedHtmlTags().join(', ')}`);\n        corpus.push('7. Do not include any HTML, HEAD, or BODY tags.');\n        corpus.push('8. Ensure all HTML tags are properly closed and nested.');\n        corpus.push('9. Do not include any HTML, HEAD, or BODY tags.');\n        corpus.push('10. Avoid using inline styles or class attributes unless specifically requested.');\n        corpus.push('11. Provide clean, valid HTML that adheres to best practices and is ready for use in web development.');\n        corpus.push('12. Beginning word of response must be a valid html tag');\n        // Join all instructions into a single formatted string.\n        const systemPrompt = corpus.join('\\n');\n        // Log the system prompt if debug mode is enabled\n        if (this.debugMode) {\n            console.group('AiAssist System Prompt Debug');\n            console.log('System Prompt:');\n            console.log(systemPrompt);\n            console.groupEnd();\n        }\n        return systemPrompt;\n    }\n    /**\n     * Formats the final prompt to be sent to the GPT model, including context and instructions.\n     *\n     * @param request - The user's request string.\n     * @param context - The trimmed context string.\n     * @param markDownContents - An array of MarkdownContent objects for additional context.\n     * @param isEditorEmpty - A boolean indicating if the editor is empty.\n     * @returns The formatted prompt string.\n     */\n    formatFinalPrompt(request, context, markDownContents, isEditorEmpty) {\n        const editor = this.editor;\n        const contentLanguageCode = editor.locale.contentLanguage;\n        const corpus = [];\n        // Context and Task\n        corpus.push('CONTEXT:');\n        corpus.push(`\\n\"\"\"\\n${context}\\n\"\"\"\\n`);\n        corpus.push('\\n\\nTASK:\\n\\n');\n        corpus.push(`\"\"\"\\n${request}\\n\"\"\"\\n`);\n        // Markdown Content\n        if (markDownContents.length) {\n            corpus.push('Refer to following markdown content as a source of information, but generate new text that fits the given context & task.');\n            markDownContents.forEach((markdown, index) => {\n                corpus.push(`\\n\\n------------ Stating Markdown Content ${index + 1} ------------\\n\\n`);\n                corpus.push(markdown.content);\n                corpus.push(`\\n\\n------------ Ending Markdown Content ${index + 1} ------------\\n\\n`);\n            });\n        }\n        // Instructions\n        corpus.push('\\n\\nINSTRUCTIONS:\\n\\n');\n        corpus.push(`The response must follow the language code - ${contentLanguageCode}.`);\n        // Response Output Format\n        if (this.responseOutputFormat.length) {\n            corpus.push(...this.responseOutputFormat);\n        }\n        // Markdown Content Usage\n        if (markDownContents.length) {\n            corpus.push('Use information from provided markdown content to generate new text, but do not copy it verbatim.');\n            corpus.push('Ensure the new text flows naturally with the existing context and integrates smoothly.');\n            corpus.push('Do not use any markdown formatting in your response. ' +\n                'specially for title and list item like \"\"\"**Performance**\"\"\" is not acceptable where as \"\"\"performance\"\"\" is.');\n            corpus.push('consider whole markdown of single source as content and then generate % content requested');\n        }\n        // Response Filters\n        if (this.responseFilters.length) {\n            corpus.push(...this.responseFilters);\n        }\n        else {\n            const defaultFilterInstructions = [\n                'The response should directly follow the context, avoiding any awkward transitions or noticeable gaps.'\n            ];\n            corpus.push(...defaultFilterInstructions);\n        }\n        // Context-Specific Instructions\n        if (!isEditorEmpty) {\n            const defaultContextInstructions = [\n                'Ensure the inserted content maintains a seamless connection with the surrounding text,',\n                'making the transition smooth and natural.',\n                'Do not modify the original text except to replace the \"@@@cursor@@@\" placeholder with the generated content.'\n            ];\n            corpus.push(...defaultContextInstructions);\n        }\n        if (this.responseContextData.length) {\n            corpus.push(...this.responseContextData);\n        }\n        // Debugging Information\n        if (this.debugMode) {\n            console.group('AiAssist Prompt Debug');\n            console.log('User Prompt:', request);\n            console.log('Generated GPT Prompt:');\n            console.log(corpus.join('\\n'));\n            console.groupEnd();\n        }\n        // Join all instructions into a single formatted string.\n        return corpus.join('\\n');\n    }\n    /**\n     * Trims the context around the user's prompt to create a suitable context for the AI model.\n     * This method identifies the position of the user's prompt within the provided text and extracts\n     * the surrounding context, placing a cursor placeholder where the prompt is located.\n     *\n     * @param prompt - The user's prompt string to locate within the context.\n     * @param promptContainerText - The text container in which the prompt is located (optional).\n     * @returns The trimmed context string with a cursor placeholder indicating the prompt's position.\n    */\n    trimContext(prompt, promptContainerText = '') {\n        var _a, _b, _c, _d;\n        let contentBeforePrompt = '';\n        let contentAfterPrompt = '';\n        const splitText = promptContainerText !== null && promptContainerText !== void 0 ? promptContainerText : prompt;\n        const editor = this.editor;\n        const view = (_c = (_b = (_a = editor === null || editor === void 0 ? void 0 : editor.editing) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.domRoots) === null || _c === void 0 ? void 0 : _c.get('main');\n        const context = (_d = view === null || view === void 0 ? void 0 : view.innerText) !== null && _d !== void 0 ? _d : '';\n        const matchIndex = context.indexOf(splitText);\n        const nextEnterIndex = context.indexOf('\\n', matchIndex);\n        const firstNewlineIndex = nextEnterIndex !== -1 ? nextEnterIndex : matchIndex + splitText.length;\n        const beforeNewline = context.substring(0, firstNewlineIndex);\n        const afterNewline = context.substring(firstNewlineIndex + 1);\n        const contextParts = [beforeNewline, afterNewline];\n        const allocatedEditorContextToken = Math.floor(this.contextSize * 0.3);\n        if (contextParts.length > 1) {\n            if (contextParts[0].length < contextParts[1].length) {\n                contentBeforePrompt = this.extractEditorContent(contextParts[0], allocatedEditorContextToken / 2, true);\n                contentAfterPrompt = this.extractEditorContent(contextParts[1], allocatedEditorContextToken - contentBeforePrompt.length / 4);\n            }\n            else {\n                contentAfterPrompt = this.extractEditorContent(contextParts[1], allocatedEditorContextToken / 2);\n                contentBeforePrompt = this.extractEditorContent(contextParts[0], allocatedEditorContextToken - contentAfterPrompt.length / 4, true);\n            }\n        }\n        // Combine the trimmed context with the cursor placeholder\n        const escapedPrompt = prompt.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // Escapes special characters\n        contentBeforePrompt = contentBeforePrompt.trim().replace(new RegExp(escapedPrompt.slice(1)), '@@@cursor@@@');\n        const trimmedContext = `${contentBeforePrompt}\\n${contentAfterPrompt}`;\n        return trimmedContext.trim();\n    }\n    /**\n     * Allocates tokens to the fetched content based on the available limit and the user's prompt.\n     *\n     * @param prompt - The user's prompt string.\n     * @param fetchedContent - An array of MarkdownContent objects containing fetched content.\n     * @returns An array of MarkdownContent objects with calculated tokenToRequest values.\n     */\n    allocateTokensToFetchedContent(prompt, fetchedContent) {\n        var _a, _b, _c, _d, _e, _f;\n        const editorContent = (_f = (_e = (_d = (_c = (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.editing) === null || _b === void 0 ? void 0 : _b.view) === null || _c === void 0 ? void 0 : _c.domRoots) === null || _d === void 0 ? void 0 : _d.get('main')) === null || _e === void 0 ? void 0 : _e.innerText) !== null && _f !== void 0 ? _f : '';\n        const editorToken = Math.min(Math.floor(this.contextSize * 0.3), this.countTokens(editorContent));\n        let availableLimit = this.contextSize - editorToken;\n        fetchedContent = fetchedContent\n            .map(content => ({\n            ...content,\n            availableToken: this.countTokens(content.content)\n        }))\n            .sort((a, b) => { var _a, _b; return ((_a = a.availableToken) !== null && _a !== void 0 ? _a : 0) - ((_b = b.availableToken) !== null && _b !== void 0 ? _b : 0); });\n        let maxTokenFromEachURL = availableLimit / fetchedContent.length;\n        return fetchedContent.map((content, index) => {\n            if (content.availableToken &&\n                content.availableToken <= maxTokenFromEachURL) {\n                content.tokenToRequest = content.availableToken;\n                availableLimit -= content.availableToken;\n            }\n            else if (content.availableToken) {\n                content.tokenToRequest = maxTokenFromEachURL;\n                availableLimit -= maxTokenFromEachURL;\n            }\n            maxTokenFromEachURL =\n                availableLimit / (fetchedContent.length - (index + 1));\n            if (content.tokenToRequest) {\n                content.content = this.trimLLMContentByTokens(content.content, content.tokenToRequest);\n            }\n            return content;\n        });\n    }\n    /**\n     * Generates Markdown content for an array of URLs by fetching their content.\n     *\n     * @param urls - An array of URLs to fetch content from.\n     * @returns A promise that resolves to an array of MarkdownContent objects.\n     */\n    async generateMarkDownForUrls(urls) {\n        const editor = this.editor;\n        const t = editor.t;\n        let errorMsg;\n        const markDownContents = await Promise.all(urls.map(async (url) => {\n            const content = await this.fetchUrlContent(url);\n            return { content, url };\n        }));\n        const emptyContent = markDownContents.filter((content) => !(content === null || content === void 0 ? void 0 : content.content));\n        if (emptyContent.length) {\n            const urlStr = emptyContent === null || emptyContent === void 0 ? void 0 : emptyContent.map(content => content === null || content === void 0 ? void 0 : content.url).join(',');\n            errorMsg = t('Failed to fetch content of : %0', urlStr);\n            if (errorMsg) {\n                aiAssistContext.showError(errorMsg);\n            }\n            throw new Error('Unable to fetch content for few urls');\n        }\n        return markDownContents.filter((content) => content !== null);\n    }\n    /**\n     * Fetches the content of a given URL and returns it as a string.\n     *\n     * @param url - The URL to fetch content from.\n     * @returns A promise that resolves to the fetched content as a string.\n     * @throws Will throw an error if the URL is invalid or if the fetch fails.\n     */\n    async fetchUrlContent(url) {\n        const urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n        const trimmedUrl = url.trim();\n        if (!urlRegex.test(trimmedUrl)) {\n            throw new Error('Invalid URL');\n        }\n        try {\n            // Use a regular expression to remove hidden characters\n            const cleanedUrl = trimmedUrl.replace(/[^\\x20-\\x7E]/g, '');\n            const requestURL = `https://r.jina.ai/${cleanedUrl.trim()}`;\n            const response = await fetch(requestURL.trim(), {\n                headers: {\n                    'X-With-Generated-Alt': 'true'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const content = await response.text();\n            // Updated error matching\n            if (content.includes('Warning: Target URL returned error')) {\n                throw new Error(`Target URL (${trimmedUrl}) returned an error`);\n            }\n            if (content.trim().length === 0) {\n                throw new Error('Empty content received');\n            }\n            return content.replace(/\\(https?:\\/\\/[^\\s]+\\)/g, '').replace(/^\\s*$/gm, '').trim();\n        }\n        catch (error) {\n            console.error(`Failed to fetch content: ${url}`, error);\n            return '';\n        }\n    }\n    /**\n     * Counts the number of tokens in the provided content string.\n     *\n     * @param content - The content string to count tokens in.\n     * @returns The number of tokens in the content.\n     */\n    countTokens(content) {\n        if (!content || typeof content !== 'string') {\n            return 0;\n        }\n        // Normalize the content by trimming and reducing multiple whitespaces.\n        const normalizedContent = content\n            .trim()\n            .replace(/\\s+/g, ' ');\n        // Approximate tokens by breaking words, contractions, and common punctuation marks.\n        const tokens = normalizedContent.match(/\\b\\w+('\\w+)?\\b|[.,!?;:\"(){}[\\]]/g) || [];\n        // Heuristic: Long words (over 10 characters) are likely to be split into multiple tokens.\n        // GPT often breaks down long words into smaller subword chunks.\n        let approxTokenCount = 0;\n        tokens.forEach(token => {\n            // Break long words into chunks to approximate GPT subword tokenization.\n            if (token.length > 10) {\n                approxTokenCount += Math.ceil(token.length / 4); // Approximation: 4 characters per token.\n            }\n            else {\n                approxTokenCount += 1;\n            }\n        });\n        return approxTokenCount;\n    }\n    /**\n     * Trims the LLM content by tokens while ensuring that sentences or other structures (e.g., bullet points, paragraphs)\n     * are not clipped mid-way.\n     *\n     * @param content - The LLM-generated content string to trim.\n     * @param maxTokens - The maximum number of tokens allowed.\n     * @returns The trimmed content string.\n     */\n    trimLLMContentByTokens(content, maxTokens) {\n        const elements = content.split('\\n');\n        let accumulatedTokens = 0;\n        let trimmedContent = '';\n        for (const element of elements) {\n            const elementTokenCount = this.countTokens(element);\n            if (accumulatedTokens + elementTokenCount > maxTokens) {\n                break; // Stop if adding this element would exceed the token limit.\n            }\n            accumulatedTokens += elementTokenCount;\n            trimmedContent += element + '\\n'; // Add the whole structural element.\n        }\n        return trimmedContent;\n    }\n    /**\n     * Retrieves the allowed HTML tags based on the CKEditor schema.\n     *\n     * @returns An array of allowed HTML tags.\n     */\n    getAllowedHtmlTags() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const definitions = schema.getDefinitions();\n        const schemaNodes = Object.keys(definitions).sort();\n        // Map of CKEditor nodes to HTML tags\n        const nodeToHtmlMap = {\n            blockQuote: 'blockquote',\n            caption: 'figcaption',\n            codeBlock: 'pre',\n            heading1: 'h1',\n            heading2: 'h2',\n            heading3: 'h3',\n            imageBlock: 'img',\n            imageInline: 'img',\n            paragraph: 'p',\n            table: 'table',\n            tableCell: 'td',\n            tableRow: 'tr',\n            $listItem: 'li',\n            horizontalLine: 'hr'\n        };\n        // Map text attributes to HTML tags\n        const textAttributeToHtmlMap = {\n            bold: 'strong',\n            italic: 'em',\n            code: 'code',\n            strikethrough: 's',\n            subscript: 'sub',\n            superscript: 'sup',\n            underline: 'u',\n            linkHref: 'a'\n        };\n        // Collect allowed tags\n        const allowedTags = new Set();\n        // Add tags from node mappings\n        schemaNodes.forEach(node => {\n            if (node in nodeToHtmlMap) {\n                allowedTags.add(nodeToHtmlMap[node]);\n            }\n        });\n        // Add tags from text attributes\n        const textDefinition = definitions.$text;\n        if (textDefinition && textDefinition.allowAttributes) {\n            textDefinition.allowAttributes.forEach((attr) => {\n                if (attr in textAttributeToHtmlMap) {\n                    allowedTags.add(textAttributeToHtmlMap[attr]);\n                }\n            });\n        }\n        // If listItem is present, add ul and ol\n        if (allowedTags.has('li')) {\n            allowedTags.add('ul');\n            allowedTags.add('ol');\n        }\n        // Sort and return the unique allowed tags\n        return Array.from(allowedTags).sort();\n    }\n    /**\n     * Extracts a portion of content based on the specified context size and direction.\n     *\n     * @param contentAfterPrompt - The content string to extract from.\n     * @param contextSize - The maximum size of the context to extract.\n     * @param reverse - A boolean indicating whether to extract in reverse order (default is false).\n     * @returns The extracted content string.\n     */\n    extractEditorContent(contentAfterPrompt, contextSize, reverse = false) {\n        let trimmedContent = '';\n        let charCount = 0;\n        // Tokenize the content into sentences using the sbd library\n        const sentences = sbd.sentences(contentAfterPrompt, {\n            preserve_whitespace: true,\n            html_boundaries: true,\n            allowed_tags: ['blockquote', 'figcaption', 'pre', 'h2', 'h1', 'h3', 'img', 'p', 'table', 'td', 'tr', 'li', 'hr', 'br']\n        });\n        // Iterate over the sentences based on the direction\n        const iterator = reverse ? sentences.reverse() : sentences;\n        for (const sentence of iterator) {\n            const sentenceLength = sentence.length;\n            // Check if adding this sentence would exceed the context size\n            if ((charCount + sentenceLength) / 4 <= contextSize) {\n                trimmedContent = reverse ?\n                    sentence + trimmedContent :\n                    trimmedContent + sentence;\n                charCount += sentenceLength;\n            }\n            else {\n                break; // Stop if adding the next sentence would exceed the context size\n            }\n        }\n        // Trim to remove any trailing whitespace and return the final trimmed content\n        return trimmedContent.trim();\n    }\n}\n","export class HtmlParser {\n    constructor(editor) {\n        this.editor = editor;\n        this.model = editor.model;\n    }\n    /**\n     * Inserts simple HTML content into the editor.\n     *\n     * @param html - The HTML string to be inserted into the editor.\n     * @returns A promise that resolves when the HTML has been inserted.\n     */\n    async insertSimpleHtml(html) {\n        var _a;\n        console.log('Attempting to insert simple HTML:', html);\n        const viewFragment = this.editor.data.processor.toView(html);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = selection.getLastPosition();\n        const lastInsertedChild = modelFragment.getChild(modelFragment.childCount - 1);\n        const currentChildIndex = (_a = selection.getLastPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n        const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n        this.model.change(writer => {\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    writer.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    writer.createPositionAfter(lastUpdatedElementInRoot);\n            }\n            if (insertionPosition && root) {\n                // Insert element to current selection\n                writer.setSelection(insertionPosition);\n                this.model.insertContent(modelFragment, insertionPosition);\n                // Check if it required to add break to current context of list etc.\n                // More to will be added during testing any edge case\n                let isBreakElementReq = lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.getAttribute('listItemId');\n                if (lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.is('element')) {\n                    isBreakElementReq = isBreakElementReq || lastInsertedChild.name === 'table';\n                }\n                if (isBreakElementReq && lastInsertedChild) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, writer.createPositionAfter(lastInsertedChild));\n                    writer.setSelection(paragraph, 'in');\n                }\n                else if (lastInsertedChild) {\n                    writer.setSelection(writer.createPositionAfter(lastInsertedChild));\n                }\n            }\n        });\n        // Maintain a delay to simulate asynchronous behavior\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    /**\n     * Inserts HTML content as text into the editor.\n     *\n     * @param content - The HTML element containing the text to be inserted.\n     * @param position - The position at which to insert the text (optional).\n     * @param stream - Indicates whether to insert text in a streaming manner (default is false).\n     * @param shouldAddBreakAtEnd - Indicates whether to add a paragraph break at the end of the inserted content (default is false).\n     * @returns A promise that resolves when the text has been inserted.\n     *\n     * This method processes the provided HTML element, converting it to a model fragment,\n     * and inserts it into the editor at the specified position. If streaming is enabled,\n     * elements are inserted one at a time, allowing for a more dynamic insertion experience.\n     * An optional paragraph break can be added at the end of the inserted content.\n    */\n    async insertAsText(content, position, stream = false, shouldAddBreakAtEnd = false) {\n        const viewFragment = this.editor.data.processor.toView(content.outerHTML);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const childrenToInsert = Array.from(modelFragment.getChildren());\n        const root = this.model.document.getRoot();\n        for (const [index, element] of childrenToInsert.entries()) {\n            if (element.is('element')) {\n                const insertPosition = index === 0 ? position : undefined; // Determine position for insertion\n                if (stream) {\n                    await this.insertElementAsStream(element, insertPosition);\n                }\n                else {\n                    await this.batchInsertOfElement(element, insertPosition);\n                }\n            }\n        }\n        if (shouldAddBreakAtEnd) {\n            this.model.change(writer => {\n                const lastPosition = this.model.document.selection.getLastPosition();\n                const currentChildIndex = lastPosition === null || lastPosition === void 0 ? void 0 : lastPosition.path[0];\n                if (root && currentChildIndex != undefined) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, root, currentChildIndex + 1);\n                    writer.setSelection(paragraph, 'in');\n                }\n            });\n        }\n    }\n    /**\n     * Inserts a given element into the editor at the specified position.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted.\n     */\n    async batchInsertOfElement(element, position) {\n        var _a;\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = position;\n        if (!position) {\n            const currentChildIndex = (_a = selection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n            const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElementInRoot);\n            }\n        }\n        // insert content at current identified position\n        this.model.change(writer => {\n            this.model.insertContent(element, insertionPosition);\n            writer.setSelection(element, 'end');\n        });\n    }\n    /**\n     * Inserts a given element into the editor at the specified position in a streaming manner.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted and all text has been streamed in.\n     */\n    async insertElementAsStream(element, position) {\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        const lastRecognizedPosition = selection.getLastPosition();\n        let insertionPosition = position;\n        let targetElement;\n        // Determine insertion position\n        if (!position) {\n            const currentChildIndex = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.path[0];\n            const lastUpdatedElement = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElement === null || lastUpdatedElement === void 0 ? void 0 : lastUpdatedElement.is('element')) {\n                insertionPosition = lastUpdatedElement.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElement, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElement);\n            }\n            this.model.change(writer => {\n                targetElement = writer.createElement(element.name);\n                // Set attributes in a more concise way\n                for (const [key, value] of element.getAttributes()) {\n                    targetElement._setAttribute(key, value);\n                }\n                this.model.insertContent(targetElement, insertionPosition);\n                if (insertionPosition) {\n                    writer.setSelection(targetElement, 'end');\n                }\n            });\n        }\n        else {\n            // current element from the offset\n            const currentElement = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.parent;\n            if (currentElement === null || currentElement === void 0 ? void 0 : currentElement.is('element')) {\n                targetElement = currentElement;\n            }\n        }\n        const textChildren = Array.from(element.getChildren()).filter(child => child.is('$text'));\n        for (const textNode of textChildren) {\n            if (!textNode.is('$text')) {\n                continue;\n            }\n            const textAttributes = Array.from(textNode.getAttributes());\n            const textContent = textNode._data;\n            for (const char of textContent) {\n                await new Promise(resolve => {\n                    this.model.change(writer => {\n                        const currentPosition = this.editor.model.document.selection.getLastPosition();\n                        const newPosition = currentPosition.getShiftedBy(1);\n                        const shouldAppendAtEnd = newPosition.offset === (currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.parent.maxOffset);\n                        writer.insertText(char, textAttributes, targetElement, shouldAppendAtEnd ? 'end' : currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.offset);\n                        writer.setSelection(this.editor.model.document.selection.getLastPosition());\n                    });\n                    setTimeout(resolve, 5); // Maintain the streaming effect\n                });\n            }\n        }\n        // Set selection\n        if (!position) {\n            this.model.change(writer => {\n                writer.setSelection(targetElement, 'end');\n            });\n        }\n    }\n    /**\n     * Validate given string as a HTML content\n     * @param content string containing html content\n     * @returns A boolean value as result of validation\n     */\n    isCompleteHtmlChunk(html) {\n        const openingTags = (html.match(/<[^/][^>]*>/g) || []).length;\n        const closingTags = (html.match(/<\\/[^>]+>/g) || []).length;\n        // Check if all opening tags have corresponding closing tags\n        if (openingTags !== closingTags) {\n            return false;\n        }\n        // Check for incomplete tags\n        if (html.includes('<') && !html.includes('>')) {\n            return false;\n        }\n        // Check if the HTML starts with an opening tag and ends with a closing tag\n        const trimmedHtml = html.trim();\n        if (!trimmedHtml.startsWith('<') || !trimmedHtml.endsWith('>')) {\n            return false;\n        }\n        return true;\n    }\n}\n","import { aiAssistContext } from './aiassistcontext.js';\nimport { PromptHelper } from './util/prompt.js';\nimport { HtmlParser } from './util/htmlparser.js';\nexport default class AiAssistService {\n    /**\n     * Initializes the AiAssistService with the provided editor and configuration settings.\n     *\n     * @param editor - The CKEditor instance to be used with the AI assist service.\n     */\n    constructor(editor) {\n        var _a, _b;\n        this.aiAssistFeatureLockId = Symbol('ai-assist-feature');\n        this.buffer = '';\n        this.openTags = [];\n        this.isInlineInsertion = false;\n        this.editor = editor;\n        this.promptHelper = new PromptHelper(editor);\n        this.htmlParser = new HtmlParser(editor);\n        const config = editor.config.get('aiAssist');\n        this.aiModel = config.model;\n        this.apiKey = config.apiKey;\n        this.endpointUrl = config.endpointUrl;\n        this.temperature = config.temperature;\n        this.timeOutDuration = (_a = config.timeOutDuration) !== null && _a !== void 0 ? _a : 45000;\n        this.maxTokens = config.maxTokens;\n        this.retryAttempts = config.retryAttempts;\n        this.stopSequences = config.stopSequences;\n        this.streamContent = (_b = config.streamContent) !== null && _b !== void 0 ? _b : true;\n    }\n    /**\n     * Handles the slash command input from the user, processes it, and interacts with the AI model.\n     *\n     * @returns A promise that resolves when the command has been processed.\n     */\n    async handleSlashCommand() {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const root = model.document.getRoot();\n        let content;\n        let parentEquivalentHTML;\n        let parent;\n        const position = model.document.selection.getLastPosition();\n        if (position && root) {\n            parent = position.parent;\n            const inlineSlash = parent.name === 'inline-slash' ? parent : undefined;\n            const equivalentView = mapper.toViewElement(parent);\n            parentEquivalentHTML = equivalentView ? view.domConverter.mapViewToDom(equivalentView) : undefined;\n            if (inlineSlash) {\n                this.isInlineInsertion = true;\n                const startingPath = inlineSlash.getPath();\n                const endingPath = position === null || position === void 0 ? void 0 : position.path;\n                const startPosition = model.createPositionFromPath(root, startingPath); // Example path\n                const endPosition = model.createPositionFromPath(root, endingPath); // Example path\n                const range = model.createRange(startPosition, endPosition);\n                parentEquivalentHTML = (equivalentView === null || equivalentView === void 0 ? void 0 : equivalentView.parent) ?\n                    view.domConverter.mapViewToDom(equivalentView.parent) :\n                    undefined;\n                content = '';\n                for (const item of range.getItems()) {\n                    if (item.is('$textProxy')) {\n                        content += item.data.trim(); // Add text data\n                    }\n                }\n            }\n            else if (parentEquivalentHTML) {\n                content = parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText;\n            }\n        }\n        try {\n            const domSelection = window.getSelection();\n            const domRange = domSelection === null || domSelection === void 0 ? void 0 : domSelection.getRangeAt(0);\n            const rect = domRange.getBoundingClientRect();\n            aiAssistContext.showLoader(rect);\n            const gptPrompt = await this.generateGptPromptBasedOnUserPrompt(content !== null && content !== void 0 ? content : '', parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText);\n            if (parent && gptPrompt) {\n                await this.fetchAndProcessGptResponse(gptPrompt, parent);\n            }\n        }\n        catch (error) {\n            console.error('Error handling slash command:', error);\n            throw error;\n        }\n        finally {\n            this.isInlineInsertion = false;\n            aiAssistContext.hideLoader();\n        }\n    }\n    /**\n     * Fetches and processes the GPT response based on the provided prompt and parent element.\n     *\n     * @param prompt - The prompt to send to the GPT model.\n     * @param parent - The parent element in the editor where the response will be inserted.\n     * @param retries - The number of retry attempts for the API call (default is the configured retry attempts).\n     * @returns A promise that resolves when the response has been processed.\n     */\n    async fetchAndProcessGptResponse(prompt, parent, retries = this.retryAttempts) {\n        var _a, _b, _c;\n        console.log('Starting fetchAndProcessGptResponse');\n        const editor = this.editor;\n        const t = editor.t;\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.timeOutDuration);\n        let buffer = '';\n        let contentBuffer = '';\n        try {\n            const response = await fetch(this.endpointUrl, {\n                method: 'POST',\n                headers: {\n                    Authorization: `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.aiModel,\n                    messages: [\n                        { role: 'system', content: this.promptHelper.getSystemPrompt(this.isInlineInsertion) },\n                        { role: 'user', content: prompt }\n                    ],\n                    temperature: this.temperature,\n                    max_tokens: this.maxTokens,\n                    stop: this.stopSequences,\n                    stream: true\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error('Fetch failed');\n            }\n            aiAssistContext.hideLoader();\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder('utf-8');\n            this.clearParentContent(parent);\n            this.editor.enableReadOnlyMode(this.aiAssistFeatureLockId);\n            console.log('Starting to process response');\n            for (;;) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    console.log('Finished reading response');\n                    break;\n                }\n                const chunk = decoder.decode(value, { stream: true });\n                buffer += chunk;\n                let newlineIndex;\n                while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                    const line = buffer.slice(0, newlineIndex).trim();\n                    buffer = buffer.slice(newlineIndex + 1);\n                    if (line.startsWith('data: ')) {\n                        const jsonStr = line.slice(5).trim();\n                        if (jsonStr === '[DONE]') {\n                            console.log('Received [DONE] signal');\n                            break;\n                        }\n                        try {\n                            const data = JSON.parse(jsonStr);\n                            const content = (_b = (_a = data.choices[0]) === null || _a === void 0 ? void 0 : _a.delta) === null || _b === void 0 ? void 0 : _b.content;\n                            if (content) {\n                                contentBuffer += content;\n                                if (this.htmlParser.isCompleteHtmlChunk(contentBuffer)) {\n                                    await this.processContent(contentBuffer, parent);\n                                    contentBuffer = '';\n                                }\n                            }\n                        }\n                        catch (parseError) {\n                            console.warn('Error parsing JSON:', parseError);\n                        }\n                    }\n                }\n            }\n            // Process any remaining content in the buffer\n            if (contentBuffer.trim()) {\n                await this.processContent(contentBuffer.trim(), parent);\n            }\n        }\n        catch (error) {\n            console.error('Error in fetchAndProcessGptResponse:', error);\n            const errorIdentifier = ((error === null || error === void 0 ? void 0 : error.message) || '').trim() || ((error === null || error === void 0 ? void 0 : error.name) || '').trim();\n            const isRetryableError = [\n                'AbortError',\n                'ReadableStream not supported',\n                'AiAssist: Fetch failed'\n            ].includes(errorIdentifier);\n            if (retries > 0 && isRetryableError) {\n                console.warn(`Retrying... (${retries} attempts left)`);\n                return await this.fetchAndProcessGptResponse(prompt, parent, retries - 1);\n            }\n            let errorMessage;\n            switch ((error === null || error === void 0 ? void 0 : error.name) || ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.trim())) {\n                case 'ReadableStream not supported':\n                    errorMessage = t('Browser does not support readable streams');\n                    break;\n                case 'AiAssist: Fetch failed':\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n                    break;\n                default:\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n            }\n            aiAssistContext.showError(errorMessage);\n        }\n        finally {\n            this.editor.disableReadOnlyMode(this.aiAssistFeatureLockId);\n        }\n    }\n    /**\n     * Processes the provided content and inserts it into the specified parent element.\n     * Depending on the feature flag, it either uses a simple HTML insertion method\n     * or processes the content as HTML.\n     *\n     * @param content - The content to be processed and inserted.\n     * @param parent - The parent element in the editor where the content will be inserted.\n     */\n    async processContent(content, parent) {\n        try {\n            console.log('--- Start of processContent ---');\n            console.log('Processing content:', content, this.isInlineInsertion);\n            if (this.isInlineInsertion) {\n                const position = this.editor.model.document.selection.getLastPosition();\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerHTML = content;\n                await this.htmlParser.insertAsText(tempParagraph || '', position !== null && position !== void 0 ? position : undefined, this.streamContent);\n            }\n            else {\n                if (this.streamContent) {\n                    // Existing complex content processing logic\n                    await this.proceedHtmlResponse(content);\n                }\n                else {\n                    // Use the simple HTML insertion method\n                    await this.htmlParser.insertSimpleHtml(content);\n                }\n            }\n            console.log('--- End of processContent ---');\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Processes the provided HTML string and inserts its content into the editor.\n     * It creates a temporary div to parse the HTML and handles different types of\n     * elements (lists, tables, headings, etc.) accordingly.\n     *\n     * @param html - The HTML string to be processed and inserted into the editor.\n     */\n    async proceedHtmlResponse(html) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n        for (const child of Array.from(tempDiv.childNodes)) {\n            const element = child;\n            if (element.nodeType === Node.ELEMENT_NODE) {\n                const elementName = element.tagName.toLowerCase();\n                const isStreamingNotAllow = [\n                    'table', 'blockquote', 'pre', 'img', 'form', 'figure'\n                ].includes(elementName);\n                if (isStreamingNotAllow) {\n                    await this.htmlParser.insertSimpleHtml(element.outerHTML);\n                }\n                else if (elementName === 'ul' || elementName === 'ol') {\n                    await this.htmlParser.insertAsText(element, undefined, true, true);\n                }\n                else {\n                    await this.htmlParser.insertAsText(element, undefined, true);\n                }\n            }\n            else if (element.nodeType === Node.TEXT_NODE && element.textContent) {\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerText = element.textContent;\n                await this.htmlParser.insertAsText(tempParagraph, undefined, true);\n            }\n        }\n    }\n    /**\n     * Clears the content of the specified parent element in the editor.\n     *\n     * @param parent - The parent element whose content will be cleared.\n     */\n    clearParentContent(parent) {\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot();\n        const position = model.document.selection.getLastPosition();\n        const inlineSlash = Array.from(parent.getChildren()).find((child) => child.name === 'inline-slash');\n        if (root && position) {\n            editor.model.change(writer => {\n                const startingPath = (inlineSlash === null || inlineSlash === void 0 ? void 0 : inlineSlash.getPath()) || parent.getPath();\n                const range = model.createRange(model.createPositionFromPath(root, startingPath), model.createPositionFromPath(root, position.path));\n                writer.remove(range);\n                writer.setSelection(model.createPositionFromPath(root, startingPath));\n            });\n        }\n    }\n    /**\n     * Generates a GPT prompt based on the user's input and the current context in the editor.\n     * This method processes the input prompt, extracts any URLs, and formats the final prompt\n     * to be sent to the GPT model. It also handles the case where the editor is empty.\n     *\n     * @param prompt - The user's input prompt, typically starting with a slash.\n     * @param promptContainerText - Optional text from the container that may provide additional context.\n     * @returns A promise that resolves to the generated GPT prompt string or null if an error occurs.\n    */\n    async generateGptPromptBasedOnUserPrompt(prompt, promptContainerText) {\n        try {\n            const context = this.promptHelper.trimContext(prompt, promptContainerText);\n            const request = prompt.slice(1); // Remove the leading slash\n            let markDownContents = [];\n            const urlRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s]*/g;\n            const urls = prompt.match(urlRegex);\n            if (Array.isArray(urls) && urls.length) {\n                const formattedUrl = urls.map(url => {\n                    return url.replace(/[,.]$/, '');\n                });\n                markDownContents = await this.promptHelper.generateMarkDownForUrls(formattedUrl);\n                markDownContents = this.promptHelper.allocateTokensToFetchedContent(prompt, markDownContents);\n            }\n            const isEditorEmpty = context === '\"@@@cursor@@@\"';\n            return this.promptHelper.formatFinalPrompt(request, context, markDownContents, isEditorEmpty);\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAssistCommand from './aiassistcommand.js';\nimport AiAssistService from './aiassistservice.js';\nexport default class AiAssistEditing extends Plugin {\n    static get pluginName() {\n        return 'AiAssistEditing';\n    }\n    /**\n     * Initializes the AI Assist editing plugin, setting up commands and key handling.\n     */\n    init() {\n        const editor = this.editor;\n        const aiAssistService = new AiAssistService(editor);\n        editor.commands.add('aiAssist', new AiAssistCommand(editor, aiAssistService));\n        this.setupEnterKeyHandling();\n    }\n    /**\n     * Sets up handling for the Enter key to trigger AI assist functionality.\n     * If the content starts with a slash, it cancels the default action and executes the AI assist command.\n     */\n    setupEnterKeyHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        editor.keystrokes.set('enter', async (_, cancel) => {\n            var _a;\n            const position = model.document.selection.getFirstPosition();\n            if (position) {\n                const paragraph = position.parent;\n                const inlineSlash = Array.from(paragraph.getChildren()).find((child) => child.name === 'inline-slash');\n                const equivalentView = mapper.toViewElement(paragraph);\n                let content;\n                if (equivalentView) {\n                    content =\n                        (_a = view.domConverter.mapViewToDom(equivalentView)) === null || _a === void 0 ? void 0 : _a.innerText;\n                }\n                if ((typeof content === 'string' && content.startsWith('/')) || inlineSlash) {\n                    cancel();\n                    await editor.execute('aiAssist');\n                }\n            }\n        });\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAssistUI from './aiassistui.js';\nimport AiAssistEditing from './aiassistediting.js';\nimport { TOKEN_LIMITS } from './const.js';\nimport '../theme/style.css';\nexport default class AiAssist extends Plugin {\n    constructor(editor) {\n        super(editor);\n        this.DEFAULT_GPT_MODEL = 'gpt-4o';\n        this.DEFAULT_AI_END_POINT = 'https://api.openai.com/v1/chat/completions';\n        const config = editor.config.get('aiAssist') || {};\n        // Set default values and merge with provided config\n        const defaultConfig = {\n            model: this.DEFAULT_GPT_MODEL,\n            apiKey: '',\n            endpointUrl: this.DEFAULT_AI_END_POINT,\n            temperature: undefined,\n            timeOutDuration: 45000,\n            maxTokens: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].max,\n            retryAttempts: 1,\n            contextSize: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].context * 0.75,\n            stopSequences: [],\n            promptSettings: {\n                outputFormat: [],\n                contextData: [],\n                filters: [] // Default filters\n            },\n            debugMode: false,\n            streamContent: true // Default streaming mode\n        };\n        const updatedConfig = { ...defaultConfig, ...config };\n        // Set the merged config back to the editor\n        editor.config.set('aiAssist', updatedConfig);\n        // Validate configuration\n        this.validateConfiguration(updatedConfig);\n    }\n    static get requires() {\n        return [AiAssistUI, AiAssistEditing];\n    }\n    static get pluginName() {\n        return 'AiAssist';\n    }\n    validateConfiguration(config) {\n        if (!config.apiKey) {\n            throw new Error('AiAssist: apiKey is required.');\n        }\n        if (config.temperature && (config.temperature < 0 || config.temperature > 2)) {\n            throw new Error('AiAssist: Temperature must be a number between 0 and 2.');\n        }\n        // Validate maxTokens based on the model's token limits\n        const { min, max } = TOKEN_LIMITS[config.model];\n        if (config.maxTokens < min || config.maxTokens > max) {\n            throw new Error(`AiAssist: maxTokens must be a number between ${min} and ${max}.`);\n        }\n    }\n    init() {\n        // Any additional initialization if needed\n    }\n}\n","import ckeditor from './../theme/icons/ckeditor.svg';\nimport './augmentation.js';\n\nexport { default as AiAssist } from './aiassist.js';\n\nexport const icons = {\n\tckeditor\n};\n"],"names":["AiAssistContext","constructor","getInstance","instance","uiComponent","component","this","_uiComponent","showError","message","console","log","showGptErrorToolTip","showLoader","rect","hideLoader","aiAssistContext","TOKEN_LIMITS","min","max","context","SUPPORTED_LANGUAGES","AiAssistUI","Plugin","super","arguments","PLACEHOLDER_TEXT_ID","GPT_RESPONSE_LOADER_ID","GPT_RESPONSE_ERROR_ID","pluginName","init","initializeUIComponents","initializeUILanguage","attachListener","error","editor","t","model","schema","register","inheritAllFrom","isInline","isObject","allowWhere","allowAttributes","extend","allowIn","conversion","for","elementToElement","view","name","attributes","viewElement","writer","createElement","class","getAttribute","converterPriority","modelElement","createContainerElement","addPlaceholder","addLoader","addGptErrorToolTip","ui","componentFactory","add","locale","createDropdown","SplitButtonView","ButtonView","set","label","icon","tooltip","on","change","position","document","selection","getLastPosition","inlineSlashContainer","insertText","insert","newPosition","createPositionAt","setSelection","editing","focus","contentLanguageCode","contentLanguage","includes","setTimeout","applyPlaceholderToCurrentLine","modelRoot","getRoot","modelRange","createRangeIn","itemsToRemove","item","getItems","is","isEmpty","push","remove","hidePlaceHolder","addEventListener","_a","block","getFirstPosition","parent","async","getRectDomOfGivenModelElement","showPlaceHolder","element","mapper","equivalentView","toViewElement","domElement","domConverter","mapViewToDom","getBoundingClientRect","placeholder","id","onclick","classList","textContent","body","appendChild","ele","getElementById","isReadOnlyMode","isReadOnly","style","left","top","loaderElement","tooltipElement","_b","_c","domRoots","get","editorRect","hideGptErrorToolTip","AiAssistCommand","Command","aiAssistService","refresh","isEnabled","execute","handleSlashCommand","abbreviations","stringHelper","word","c","length","indexOf","slice","end","englishAbbreviations","Match","setAbbreviations","abbr","isCapitalized","str","test","isNumber","isSentenceStarter","substring","isCommonAbbreviation","noSymbols","replace","isTimeAbbreviation","next","toLowerCase","isDottedAbbreviation","matches","match","isCustomAbbreviation","isNameAbbreviation","wordCount","words","filter","charAt","dotPos","isNaN","isPhoneNr","isURL","isConcatenated","i","isBoundaryChar","sanitizeHtml","text","opts","String","$div","innerHTML","trim","require$$1","require$$2","newline_placeholder","newline_placeholder_t","whiteSpaceCheck","RegExp","addNewLineBoundaries","splitIntoWords","tokenizer","sentences","user_options","tokens","options","newline_boundaries","html_boundaries","html_boundaries_tags","sanitize","allowed_tags","preserve_whitespace","k","html_boundaries_regexp","join","re","allowedTags","index","temp","current","split","token","ii","L","endsWithChar","pop","endsWith","s","reduce","out","sentence","lastSentence","concat","map","tokenCount","splice","PromptHelper","_d","_e","_f","_g","config","contextSize","responseOutputFormat","promptSettings","outputFormat","responseContextData","contextData","responseFilters","filters","debugMode","getSystemPrompt","isInlineResponse","corpus","getAllowedHtmlTags","systemPrompt","group","groupEnd","formatFinalPrompt","request","markDownContents","isEditorEmpty","forEach","markdown","content","defaultFilterInstructions","defaultContextInstructions","trimContext","prompt","promptContainerText","contentBeforePrompt","contentAfterPrompt","splitText","innerText","matchIndex","nextEnterIndex","firstNewlineIndex","contextParts","allocatedEditorContextToken","Math","floor","extractEditorContent","escapedPrompt","allocateTokensToFetchedContent","fetchedContent","editorContent","editorToken","countTokens","availableLimit","availableToken","sort","a","b","maxTokenFromEachURL","tokenToRequest","trimLLMContentByTokens","generateMarkDownForUrls","urls","errorMsg","Promise","all","url","fetchUrlContent","emptyContent","Error","trimmedUrl","requestURL","response","fetch","headers","ok","status","approxTokenCount","ceil","maxTokens","elements","accumulatedTokens","trimmedContent","elementTokenCount","definitions","getDefinitions","schemaNodes","Object","keys","nodeToHtmlMap","blockQuote","caption","codeBlock","heading1","heading2","heading3","imageBlock","imageInline","paragraph","table","tableCell","tableRow","$listItem","horizontalLine","textAttributeToHtmlMap","bold","italic","code","strikethrough","subscript","superscript","underline","linkHref","Set","node","textDefinition","$text","attr","has","Array","from","reverse","charCount","sbd","iterator","sentenceLength","HtmlParser","insertSimpleHtml","html","viewFragment","data","processor","toView","modelFragment","toModel","root","insertionPosition","lastInsertedChild","getChild","childCount","currentChildIndex","path","lastUpdatedElementInRoot","createPositionAfter","insertContent","isBreakElementReq","resolve","insertAsText","stream","shouldAddBreakAtEnd","outerHTML","childrenToInsert","getChildren","entries","insertPosition","undefined","insertElementAsStream","batchInsertOfElement","lastPosition","lastRecognizedPosition","targetElement","currentElement","lastUpdatedElement","key","value","getAttributes","_setAttribute","textChildren","child","textNode","textAttributes","_data","char","currentPosition","shouldAppendAtEnd","getShiftedBy","offset","maxOffset","isCompleteHtmlChunk","trimmedHtml","startsWith","AiAssistService","aiAssistFeatureLockId","Symbol","buffer","openTags","isInlineInsertion","promptHelper","htmlParser","aiModel","apiKey","endpointUrl","temperature","timeOutDuration","retryAttempts","stopSequences","streamContent","parentEquivalentHTML","inlineSlash","startingPath","getPath","endingPath","startPosition","createPositionFromPath","endPosition","range","createRange","domSelection","window","getSelection","getRangeAt","gptPrompt","generateGptPromptBasedOnUserPrompt","fetchAndProcessGptResponse","retries","controller","AbortController","timeoutId","abort","contentBuffer","method","Authorization","JSON","stringify","messages","role","max_tokens","stop","signal","clearTimeout","reader","getReader","decoder","TextDecoder","clearParentContent","enableReadOnlyMode","done","read","newlineIndex","decode","line","jsonStr","parse","choices","delta","processContent","parseError","warn","errorIdentifier","isRetryableError","errorMessage","disableReadOnlyMode","tempParagraph","proceedHtmlResponse","tempDiv","childNodes","nodeType","Node","ELEMENT_NODE","elementName","tagName","TEXT_NODE","find","urlRegex","isArray","formattedUrl","AiAssistEditing","commands","setupEnterKeyHandling","keystrokes","_","cancel","AiAssist","DEFAULT_GPT_MODEL","DEFAULT_AI_END_POINT","updatedConfig","validateConfiguration","requires","icons","ckeditor"],"mappings":"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","x_google_ignoreList":[4,5,6,7]}