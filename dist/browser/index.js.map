{"version":3,"file":"index.js","sources":["../../src/aiagentcontext.js","../../src/const.js","../../src/aiagentui.js","../../src/aiagentcommand.js","../../node_modules/sbd/lib/Match.js","../../node_modules/sbd/lib/stringHelper.js","../../node_modules/sbd/lib/tokenizer.js","../../node_modules/sbd/lib/sanitize-html-browser.js","../../src/util/prompt.js","../../src/util/htmlparser.js","../../src/aiagentservice.js","../../src/aiagentediting.js","../../src/aiagent.js","../../src/index.ts"],"sourcesContent":["/**\n * The AiAgentContext class provides a context for the AI Agent plugin,\n * allowing access to shared resources and state across different components.\n */\nexport class AiAgentContext {\n    constructor() { }\n    static getInstance() {\n        if (!AiAgentContext.instance) {\n            AiAgentContext.instance = new AiAgentContext();\n        }\n        return AiAgentContext.instance;\n    }\n    set uiComponent(component) {\n        this._uiComponent = component;\n    }\n    showError(message) {\n        if (this._uiComponent) {\n            console.log('Showing error message...', message);\n            this._uiComponent.showGptErrorToolTip(message);\n        }\n    }\n    showLoader(rect) {\n        if (this._uiComponent) {\n            this._uiComponent.showLoader(rect);\n        }\n    }\n    hideLoader() {\n        if (this._uiComponent) {\n            this._uiComponent.hideLoader();\n        }\n    }\n}\nexport const aiAgentContext = AiAgentContext.getInstance();\n","// const\nexport const TOKEN_LIMITS = {\n    'gpt-3': { min: 1, max: 4096, context: 16385 },\n    'gpt-3.5-turbo': { min: 1, max: 4096, context: 16385 },\n    'gpt-4': { min: 1, max: 4096, context: 128000 },\n    'gpt-4o': { min: 0, max: 4096, context: 128000 },\n    'gpt-4-turbo': { min: 1, max: 16384, context: 128000 },\n    'gpt-4o-mini': { min: 1, max: 16384, context: 128000 },\n    'kavya-m1': { min: 0, max: 16384, context: 128000 }\n};\nexport const SUPPORTED_LANGUAGES = ['en', 'es', 'hi', 'nl'];\n","import { Plugin } from 'ckeditor5/src/core.js';\n// import { ButtonView, createDropdown, SplitButtonView } from 'ckeditor5/src/ui.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport aiAgentIcon from '../theme/icons/ai-agent.svg';\nimport { aiAgentContext } from './aiagentcontext.js';\nimport { SUPPORTED_LANGUAGES } from './const.js';\nimport { Widget, toWidget } from 'ckeditor5/src/widget.js';\nexport default class AiAgentUI extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.PLACEHOLDER_TEXT_ID = 'slash-placeholder';\n        this.GPT_RESPONSE_LOADER_ID = 'gpt-response-loader';\n        this.GPT_RESPONSE_ERROR_ID = 'gpt-error';\n    }\n    static get pluginName() {\n        return 'AiAgentUI';\n    }\n    static get requires() {\n        return [Widget];\n    }\n    /**\n     * Initializes the AI Agent UI plugin, setting up UI components and event listeners.\n     * This method is called when the plugin is loaded.\n     */\n    init() {\n        try {\n            aiAgentContext.uiComponent = this;\n            // Initialize UI components like buttons, placeholders, loaders, etc.\n            this.initializeUIComponents();\n            // Set displays content in the appropriate language.\n            this.initializeUILanguage();\n            // Attach event listeners for handling editor events and user interactions\n            this.attachListener();\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n    }\n    /**\n     * Initializes UI components such as placeholders, loaders, and buttons for the editor.\n     */\n    initializeUIComponents() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Register the inline-slash schema\n        editor.model.schema.register('inline-slash', {\n            inheritAllFrom: '$block',\n            isInline: true,\n            isObject: true,\n            allowWhere: '$text',\n            allowAttributes: ['class']\n        });\n        // Allow the inline-slash element to have text inside it\n        editor.model.schema.extend('$text', {\n            allowIn: 'inline-slash'\n        });\n        // Set up upcast conversion for inline-slash\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            model: (viewElement, { writer }) => {\n                return writer.createElement('inline-slash', {\n                    class: viewElement.getAttribute('class')\n                });\n            },\n            converterPriority: 'high'\n        });\n        editor.conversion.for('downcast').elementToElement({\n            model: {\n                name: 'inline-slash',\n                attributes: ['class']\n            },\n            view: (modelElement, { writer }) => {\n                return writer.createContainerElement('inline-slash', {\n                    class: modelElement.getAttribute('class')\n                });\n            }\n        });\n        this.addPlaceholder();\n        this.addLoader();\n        this.addGptErrorToolTip();\n        editor.ui.componentFactory.add('aiAgentButton', locale => {\n            // const dropdownView = createDropdown( locale, SplitButtonView );\n            const view = new ButtonView(locale);\n            // const view =  dropdownView.buttonView;\n            view.set({\n                label: t('Ai agent'),\n                icon: aiAgentIcon,\n                tooltip: true\n            });\n            view.on('execute', () => {\n                this.editor.model.change(writer => {\n                    const position = this.editor.model.document.selection.getLastPosition();\n                    if (position) {\n                        const inlineSlashContainer = writer.createElement('inline-slash', { class: 'ck-slash' });\n                        writer.insertText('/', inlineSlashContainer);\n                        writer.insert(inlineSlashContainer, position);\n                        const newPosition = writer.createPositionAt(inlineSlashContainer, 'end');\n                        writer.setSelection(newPosition);\n                    }\n                });\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n        editor.model.schema.register('ai-tag', {\n            inheritAllFrom: '$block',\n            isInline: true,\n            isObject: true,\n            allowWhere: '$block',\n            allowAttributes: ['id']\n        });\n        editor.model.schema.extend('$block', { allowIn: 'ai-tag' });\n        this.addCustomTagConversions();\n    }\n    addCustomTagConversions() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'ai-tag',\n                attributes: ['id']\n            },\n            model: (viewElement, { writer }) => {\n                return writer.createElement('ai-tag', {\n                    id: viewElement.getAttribute('id')\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'ai-tag',\n            view: (modelElement, { writer }) => {\n                return writer.createContainerElement('ai-tag', {\n                    id: modelElement.getAttribute('id')\n                });\n            }\n        });\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'ai-tag',\n            view: (modelElement, { writer }) => {\n                const customTag = writer.createContainerElement('ai-tag', {\n                    id: modelElement.getAttribute('id')\n                });\n                return toWidget(customTag, writer);\n            }\n        });\n    }\n    /**\n     * Initializes the UI language settings based on the editor's locale.\n     * Displays an error tooltip if the current language is unsupported.\n     */\n    initializeUILanguage() {\n        const editor = this.editor;\n        const t = editor.t;\n        const contentLanguageCode = editor.locale.contentLanguage;\n        const supportedLanguages = SUPPORTED_LANGUAGES;\n        if (!supportedLanguages.includes(contentLanguageCode)) {\n            this.showGptErrorToolTip(t('Unsupported language code'));\n        }\n    }\n    /**\n     * Attaches event listeners to the editor for handling user interactions and content changes.\n     */\n    attachListener() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.on('change:data', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n        });\n        model.document.selection.on('change:range', () => {\n            setTimeout(() => {\n                this.applyPlaceholderToCurrentLine();\n            }, 10);\n            const modelRoot = editor.model.document.getRoot();\n            if (modelRoot) {\n                const modelRange = editor.model.createRangeIn(modelRoot);\n                const itemsToRemove = [];\n                for (const item of modelRange.getItems()) {\n                    if (item.is('element', 'inline-slash') && item.isEmpty) {\n                        itemsToRemove.push(item); // Collect empty items\n                    }\n                }\n                // Remove collected empty inline-slash elements\n                editor.model.change(writer => {\n                    for (const item of itemsToRemove) {\n                        writer.remove(item);\n                    }\n                });\n            }\n        });\n        editor.editing.view.document.on('scroll', () => {\n            this.hidePlaceHolder();\n        });\n        document.addEventListener('scroll', () => {\n            this.hidePlaceHolder();\n        });\n    }\n    /**\n     * Applies the placeholder to the current line in the editor if it is empty.\n     * Hides the placeholder if the line is not empty.\n     */\n    applyPlaceholderToCurrentLine() {\n        var _a;\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const block = (_a = modelSelection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.parent;\n        if (block && block.isEmpty) {\n            this.hidePlaceHolder();\n            setTimeout(async () => {\n                if (block.is('element')) {\n                    const rect = await this.getRectDomOfGivenModelElement(block);\n                    if (rect) {\n                        this.showPlaceHolder(rect);\n                    }\n                }\n            }, 100);\n        }\n        else {\n            this.hidePlaceHolder();\n        }\n    }\n    /**\n     * Retrieves the DOM rectangle of a given model element.\n     *\n     * @param element - The model element for which to get the DOM rectangle.\n     * @returns A promise that resolves to the DOMRect of the element, or null if not found.\n     */\n    async getRectDomOfGivenModelElement(element) {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const equivalentView = mapper.toViewElement(element);\n        if (equivalentView) {\n            const domElement = view.domConverter.mapViewToDom(equivalentView);\n            if (domElement) {\n                return domElement.getBoundingClientRect();\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds a placeholder element to the document body for user interaction.\n     */\n    addPlaceholder() {\n        const editor = this.editor;\n        const t = editor.t;\n        const placeholder = document.createElement('p');\n        placeholder.id = this.PLACEHOLDER_TEXT_ID;\n        placeholder.onclick = () => {\n            editor.focus();\n        };\n        placeholder.classList.add('place-holder');\n        placeholder.textContent = t('Type / to request AI content');\n        document.body.appendChild(placeholder);\n    }\n    /**\n     * Shows the placeholder at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the placeholder.\n     */\n    showPlaceHolder(rect) {\n        const ele = document.getElementById(this.PLACEHOLDER_TEXT_ID);\n        const isReadOnlyMode = this.editor.isReadOnly;\n        if (ele && rect && !isReadOnlyMode) {\n            ele.classList.add('show-place-holder');\n            ele.style.left = `${rect.left}px`;\n            ele.style.top = `${rect.top}px`;\n        }\n        else if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Hides the placeholder element from the document.\n     */\n    hidePlaceHolder() {\n        const ele = document.getElementById(this.PLACEHOLDER_TEXT_ID);\n        if (ele) {\n            ele.classList.remove('show-place-holder');\n        }\n    }\n    /**\n     * Adds a loader element to the document body for indicating processing.\n     */\n    addLoader() {\n        const loaderElement = document.createElement('div');\n        loaderElement.id = this.GPT_RESPONSE_LOADER_ID;\n        loaderElement.classList.add('gpt-loader');\n        document.body.appendChild(loaderElement);\n    }\n    /**\n     * Shows the loader at the specified position.\n     *\n     * @param rect - The DOMRect object defining the position to show the loader.\n     */\n    showLoader(rect) {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele && rect) {\n            ele.style.left = `${rect.left + 10}px`;\n            ele.style.top = `${rect.top + 10}px`;\n            ele.classList.add('show-gpt-loader');\n        }\n        else if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Hides the loader element from the document.\n     */\n    hideLoader() {\n        const ele = document.getElementById(this.GPT_RESPONSE_LOADER_ID);\n        if (ele) {\n            ele.classList.remove('show-gpt-loader');\n        }\n    }\n    /**\n     * Adds an error tooltip element to the document body for displaying error messages.\n     */\n    addGptErrorToolTip() {\n        const tooltipElement = document.createElement('p');\n        tooltipElement.id = this.GPT_RESPONSE_ERROR_ID;\n        tooltipElement.classList.add('response-error');\n        document.body.appendChild(tooltipElement);\n    }\n    /**\n     * Displays an error tooltip with the specified message.\n     *\n     * @param message - The error message to display in the tooltip.\n     */\n    showGptErrorToolTip(message) {\n        var _a, _b, _c;\n        console.log('Showing error message...', message);\n        const editor = this.editor;\n        const view = (_c = (_b = (_a = editor === null || editor === void 0 ? void 0 : editor.editing) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.domRoots) === null || _c === void 0 ? void 0 : _c.get('main');\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        const editorRect = view === null || view === void 0 ? void 0 : view.getBoundingClientRect();\n        if (tooltipElement && editorRect) {\n            tooltipElement.classList.add('show-response-error');\n            tooltipElement.textContent = message;\n            setTimeout(() => {\n                this.hideGptErrorToolTip();\n            }, 2000);\n        }\n    }\n    /**\n     * Hides the error tooltip element from the document.\n     */\n    hideGptErrorToolTip() {\n        const tooltipElement = document.getElementById(this.GPT_RESPONSE_ERROR_ID);\n        if (tooltipElement) {\n            tooltipElement.classList.remove('show-response-error');\n        }\n    }\n}\n","import { Command } from 'ckeditor5/src/core.js';\nexport default class AiAgentCommand extends Command {\n    /**\n     * Creates an instance of the AiAgentCommand.\n     *\n     * @param editor - The editor instance to which this command belongs.\n     * @param aiAgentService - The service instance that handles AI assist functionality.\n     */\n    constructor(editor, aiAgentService) {\n        super(editor);\n        this.aiAgentService = aiAgentService;\n    }\n    /**\n     * Checks whether the command can be executed based on the current selection.\n     *\n     * @returns A boolean indicating if the command can be executed.\n     */\n    refresh() {\n        // Enable the command when the selection is in an empty block or at the beginning of a block\n        this.isEnabled = true;\n    }\n    /**\n     * Executes the AI assist command, processing the user's input and interacting with the AI service.\n     *\n     * @param options - An optional parameter for additional execution options.\n     */\n    async execute() {\n        await this.aiAgentService.handleSlashCommand();\n    }\n}\n","var abbreviations;\r\n\r\nvar englishAbbreviations = [\r\n    \"al\",\r\n    \"adj\",\r\n    \"assn\",\r\n    \"Ave\",\r\n    \"BSc\", \"MSc\",\r\n    \"Cell\",\r\n    \"Ch\",\r\n    \"Co\",\r\n    \"cc\",\r\n    \"Corp\",\r\n    \"Dem\",\r\n    \"Dept\",\r\n    \"ed\",\r\n    \"eg\",\r\n    \"Eq\",\r\n    \"Eqs\",\r\n    \"est\",\r\n    \"est\",\r\n    \"etc\",\r\n    \"Ex\",\r\n    \"ext\", // + number?\r\n    \"Fig\",\r\n    \"fig\",\r\n    \"Figs\",\r\n    \"figs\",\r\n    \"i.e\",\r\n    \"ie\",\r\n    \"Inc\",\r\n    \"inc\",\r\n    \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Sept\",\"Oct\",\"Nov\",\"Dec\",\r\n    \"jr\",\r\n    \"mi\",\r\n    \"Miss\", \"Mrs\", \"Mr\", \"Ms\",\r\n    \"Mol\",\r\n    \"mt\",\r\n    \"mts\",\r\n    \"no\",\r\n    \"Nos\",\r\n    \"PhD\", \"MD\", \"BA\", \"MA\", \"MM\",\r\n    \"pl\",\r\n    \"pop\",\r\n    \"pp\",\r\n    \"Prof\", \"Dr\",\r\n    \"pt\",\r\n    \"Ref\",\r\n    \"Refs\",\r\n    \"Rep\",\r\n    \"repr\",\r\n    \"rev\",\r\n    \"Sec\",\r\n    \"Secs\",\r\n    \"Sgt\", \"Col\", \"Gen\", \"Rep\", \"Sen\",'Gov', \"Lt\", \"Maj\", \"Capt\",\"St\",\r\n    \"Sr\", \"sr\", \"Jr\", \"jr\", \"Rev\",\r\n    \"Sun\",\"Mon\",\"Tu\",\"Tue\",\"Tues\",\"Wed\",\"Th\",\"Thu\",\"Thur\",\"Thurs\",\"Fri\",\"Sat\",\r\n    \"trans\",\r\n    \"Univ\",\r\n    \"Viz\",\r\n    \"Vol\",\r\n    \"vs\",\r\n    \"v\",\r\n];\r\n\r\nexports.setAbbreviations = function(abbr) {\r\n    if (abbr) {\r\n        abbreviations = abbr;\r\n    } else {\r\n        abbreviations = englishAbbreviations;\r\n    }\r\n}\r\n\r\nvar isCapitalized = exports.isCapitalized = function(str) {\r\n    return /^[A-Z][a-z].*/.test(str) || isNumber(str);\r\n}\r\n\r\n// Start with opening quotes or capitalized letter\r\nexports.isSentenceStarter = function(str) {\r\n    return isCapitalized(str) || /``|\"|'/.test(str.substring(0,2));\r\n}\r\n\r\nexports.isCommonAbbreviation = function(str) {\r\n    var noSymbols = str.replace(/[-'`~!@#$%^&*()_|+=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \"\");\r\n\r\n    return ~abbreviations.indexOf(noSymbols);\r\n}\r\n\r\n// This is going towards too much rule based\r\nexports.isTimeAbbreviation = function(word, next) {\r\n    if (word === \"a.m.\" || word === \"p.m.\") {\r\n        var tmp = next.replace(/\\W+/g, '').slice(-3).toLowerCase();\r\n\r\n        if (tmp === \"day\") {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexports.isDottedAbbreviation = function(word) {\r\n    var matches = word.replace(/[\\(\\)\\[\\]\\{\\}]/g, '').match(/(.\\.)*/);\r\n    return matches && matches[0].length > 0;\r\n}\r\n\r\n// TODO look for next words, if multiple are capitalized,\r\n// then it's probably not a sentence ending\r\nexports.isCustomAbbreviation = function(str) {\r\n    if (str.length <= 3) {\r\n        return true;\r\n    }\r\n\r\n    return isCapitalized(str);\r\n}\r\n\r\n// Uses current word count in sentence and next few words to check if it is\r\n// more likely an abbreviation + name or new sentence.\r\nexports.isNameAbbreviation = function(wordCount, words) {\r\n    if (words.length > 0) {\r\n        if (wordCount < 5 && words[0].length < 6 && isCapitalized(words[0])) {\r\n            return true;\r\n        }\r\n\r\n        var capitalized = words.filter(function(str) {\r\n            return /[A-Z]/.test(str.charAt(0));\r\n        });\r\n\r\n        return capitalized.length >= 3;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvar isNumber = exports.isNumber = function(str, dotPos) {\r\n    if (dotPos) {\r\n        str = str.slice(dotPos-1, dotPos+2);\r\n    }\r\n\r\n    return !isNaN(str);\r\n};\r\n\r\n// Phone number matching\r\n// http://stackoverflow.com/a/123666/951517\r\nexports.isPhoneNr = function(str) {\r\n    return str.match(/^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$/);\r\n};\r\n\r\n// Match urls / emails\r\n// http://stackoverflow.com/a/3809435/951517\r\nexports.isURL = function(str) {\r\n    return str.match(/[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/);\r\n};\r\n\r\n// Starting a new sentence if beginning with capital letter\r\n// Exception: The word is enclosed in brackets\r\nexports.isConcatenated = function(word) {\r\n    var i = 0;\r\n\r\n    if ((i = word.indexOf(\".\")) > -1 ||\r\n        (i = word.indexOf(\"!\")) > -1 ||\r\n        (i = word.indexOf(\"?\")) > -1)\r\n    {\r\n        var c = word.charAt(i + 1);\r\n\r\n        // Check if the next word starts with a letter\r\n        if (c.match(/[a-zA-Z].*/)) {\r\n            return [word.slice(0, i), word.slice(i+1)];\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexports.isBoundaryChar = function(word) {\r\n    return word === \".\" ||\r\n           word === \"!\" ||\r\n           word === \"?\";\r\n};\r\n","\r\nexports.endsWithChar = function ends_with_char(word, c) {\r\n    if (c.length > 1) {\r\n        return c.indexOf(word.slice(-1)) > -1;\r\n    }\r\n\r\n    return word.slice(-1) === c;\r\n};\r\n\r\nexports.endsWith = function ends_with(word, end) {\r\n    return word.slice(word.length - end.length) === end;\r\n};","/*jshint node:true, laxcomma:true */\r\n\r\nvar sanitizeHtml = require(\"sanitize-html\");\r\n\r\nvar stringHelper = require(\"./stringHelper\");\r\nvar Match  = require(\"./Match\");\r\n\r\nvar newline_placeholder = \" @~@ \";\r\nvar newline_placeholder_t = newline_placeholder.trim();\r\n\r\n\r\nvar whiteSpaceCheck = new RegExp(\"\\\\S\", \"\");\r\nvar addNewLineBoundaries = new RegExp(\"\\\\n+|[-#=_+*]{4,}\", \"g\");\r\nvar splitIntoWords = new RegExp(\"\\\\S+|\\\\n\", \"g\");\r\n\r\n\r\n// Split the entry into sentences.\r\nexports.sentences = function(text, user_options) {\r\n    if (!text || typeof text !== \"string\" || !text.length) {\r\n        return [];\r\n    }\r\n\r\n    if (!whiteSpaceCheck.test(text)) {\r\n      // whitespace-only string has no sentences\r\n      return [];\r\n    }\r\n\r\n    var options = {\r\n        \"newline_boundaries\"  : false,\r\n        \"html_boundaries\"     : false,\r\n        \"html_boundaries_tags\": [\"p\",\"div\",\"ul\",\"ol\"],\r\n        \"sanitize\"            : false,\r\n        \"allowed_tags\"        : false,\r\n        \"preserve_whitespace\" : false,\r\n        \"abbreviations\"       : null\r\n    };\r\n\r\n    if (typeof user_options === \"boolean\") {\r\n        // Deprecated quick option\r\n        options.newline_boundaries = true;\r\n    }\r\n    else {\r\n        // Extend options\r\n        for (var k in user_options) {\r\n            options[k] = user_options[k];\r\n        }\r\n    }\r\n\r\n    Match.setAbbreviations(options.abbreviations);\r\n\r\n    if (options.newline_boundaries) {\r\n        text = text.replace(addNewLineBoundaries, newline_placeholder);\r\n    }\r\n\r\n    if (options.html_boundaries) {\r\n        var html_boundaries_regexp = \"(<br\\\\s*\\\\/?>|<\\\\/(\" + options.html_boundaries_tags.join(\"|\") + \")>)\";\r\n        var re = new RegExp(html_boundaries_regexp, \"g\");\r\n        text = text.replace(re, \"$1\" + newline_placeholder);\r\n    }\r\n\r\n    if (options.sanitize || options.allowed_tags) {\r\n        if (! options.allowed_tags) {\r\n            options.allowed_tags = [\"\"];\r\n        }\r\n\r\n        text = sanitizeHtml(text, { \"allowedTags\" : options.allowed_tags });\r\n    }\r\n\r\n\r\n    // Split the text into words\r\n    var words;\r\n    var tokens;\r\n\r\n    // Split the text into words\r\n    if (options.preserve_whitespace) {\r\n        // <br> tags are the odd man out, as whitespace is allowed inside the tag\r\n        tokens = text.split(/(<br\\s*\\/?>|\\S+|\\n+)/);\r\n\r\n        // every other token is a word\r\n        words = tokens.filter(function (token, ii) {\r\n          return ii % 2;\r\n        });\r\n    }\r\n    else {\r\n        // - see http://blog.tompawlak.org/split-string-into-tokens-javascript\r\n        words = text.trim().match(splitIntoWords);\r\n    }\r\n\r\n\r\n    var wordCount = 0;\r\n    var index = 0;\r\n    var temp  = [];\r\n    var sentences = [];\r\n    var current   = [];\r\n\r\n    // If given text is only whitespace (or nothing of \\S+)\r\n    if (!words || !words.length) {\r\n        return [];\r\n    }\r\n\r\n    for (var i=0, L=words.length; i < L; i++) {\r\n        wordCount++;\r\n\r\n        // Add the word to current sentence\r\n        current.push(words[i]);\r\n\r\n        // Sub-sentences, reset counter\r\n        if (~words[i].indexOf(\",\")) {\r\n            wordCount = 0;\r\n        }\r\n\r\n        if (Match.isBoundaryChar(words[i]) || stringHelper.endsWithChar(words[i], \"?!\") || words[i] === newline_placeholder_t) {\r\n            if ((options.newline_boundaries || options.html_boundaries) && words[i] === newline_placeholder_t) {\r\n                current.pop();\r\n            }\r\n\r\n            sentences.push(current);\r\n\r\n            wordCount = 0;\r\n            current   = [];\r\n\r\n            continue;\r\n        }\r\n\r\n\r\n        if (stringHelper.endsWithChar(words[i], \"\\\"\") || stringHelper.endsWithChar(words[i], \"”\")) {\r\n            words[i] = words[i].slice(0, -1);\r\n        }\r\n\r\n        // A dot might indicate the end sentences\r\n        // Exception: The next sentence starts with a word (non abbreviation)\r\n        //            that has a capital letter.\r\n        if (stringHelper.endsWithChar(words[i], \".\")) {\r\n            // Check if there is a next word\r\n            // This probably needs to be improved with machine learning\r\n            if (i+1 < L) {\r\n                // Single character abbr.\r\n                if (words[i].length === 2 && isNaN(words[i].charAt(0))) {\r\n                    continue;\r\n                }\r\n\r\n                // Common abbr. that often do not end sentences\r\n                if (Match.isCommonAbbreviation(words[i])) {\r\n                    continue;\r\n                }\r\n\r\n                // Next word starts with capital word, but current sentence is\r\n                // quite short\r\n                if (Match.isSentenceStarter(words[i+1])) {\r\n                    if (Match.isTimeAbbreviation(words[i], words[i+1])) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Dealing with names at the start of sentences\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 6))) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNumber(words[i+1])) {\r\n                        if (Match.isCustomAbbreviation(words[i])) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Skip ellipsis\r\n                    if (stringHelper.endsWith(words[i], \"..\")) {\r\n                        continue;\r\n                    }\r\n\r\n                    //// Skip abbreviations\r\n                    // Short words + dot or a dot after each letter\r\n                    if (Match.isDottedAbbreviation(words[i])) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Match.isNameAbbreviation(wordCount, words.slice(i, 5))) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            sentences.push(current);\r\n            current   = [];\r\n            wordCount = 0;\r\n\r\n            continue;\r\n        }\r\n\r\n        // Check if the word has a dot in it\r\n        if ((index = words[i].indexOf(\".\")) > -1) {\r\n            if (Match.isNumber(words[i], index)) {\r\n                continue;\r\n            }\r\n\r\n            // Custom dotted abbreviations (like K.L.M or I.C.T)\r\n            if (Match.isDottedAbbreviation(words[i])) {\r\n                continue;\r\n            }\r\n\r\n            // Skip urls / emails and the like\r\n            if (Match.isURL(words[i]) || Match.isPhoneNr(words[i])) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (temp = Match.isConcatenated(words[i])) {\r\n            current.pop();\r\n            current.push(temp[0]);\r\n            sentences.push(current);\r\n\r\n            current = [];\r\n            wordCount = 0;\r\n            current.push(temp[1]);\r\n        }\r\n    }\r\n\r\n    if (current.length) {\r\n        sentences.push(current);\r\n    }\r\n\r\n\r\n    // Clear \"empty\" sentences\r\n    sentences = sentences.filter(function(s) {\r\n        return s.length > 0;\r\n    });\r\n\r\n    var result = sentences.slice(1).reduce(function (out, sentence) {\r\n      var lastSentence = out[out.length - 1];\r\n\r\n      // Single words, could be \"enumeration lists\"\r\n      if (lastSentence.length === 1 && /^.{1,2}[.]$/.test(lastSentence[0])) {\r\n          // Check if there is a next sentence\r\n          // It should not be another list item\r\n          if (!/[.]/.test(sentence[0])) {\r\n              out.pop()\r\n              out.push(lastSentence.concat(sentence));\r\n              return out;\r\n          }\r\n      }\r\n\r\n      out.push(sentence);\r\n\r\n      return out;\r\n    }, [ sentences[0] ]);\r\n\r\n    // join tokens back together\r\n    return result.map(function (sentence, ii) {\r\n      if (options.preserve_whitespace && !options.newline_boundaries && !options.html_boundaries) {\r\n        // tokens looks like so: [leading-space token, non-space token, space\r\n        // token, non-space token, space token... ]. In other words, the first\r\n        // item is the leading space (or the empty string), and the rest of\r\n        // the tokens are [non-space, space] token pairs.\r\n        var tokenCount = sentence.length * 2;\r\n\r\n        if (ii === 0) {\r\n          tokenCount += 1;\r\n        }\r\n\r\n        return tokens.splice(0, tokenCount).join(\"\");\r\n      }\r\n\r\n      return sentence.join(\" \");\r\n    });\r\n};\r\n","\r\nmodule.exports = function sanitizeHtml(text, opts) {\r\n  // Strip HTML from Text using browser HTML parser\r\n  if ((typeof text == 'string' || text instanceof String) && typeof document !== \"undefined\") {\r\n    var $div = document.createElement(\"DIV\");\r\n    $div.innerHTML = text;\r\n    text = ($div.textContent || '').trim();\r\n  }\r\n  //DOM Object\r\n  else if (typeof text === 'object' && text.textContent) {\r\n    text = (text.textContent || '').trim();\r\n  }\r\n\r\n  return text;\r\n};\r\n","import sbd from 'sbd';\nimport { aiAgentContext } from '../aiagentcontext.js';\nexport class PromptHelper {\n    constructor(editor) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.editor = editor;\n        const config = editor.config.get('aiAgent');\n        this.contextSize = config.contextSize;\n        this.responseOutputFormat = (_b = (_a = config.promptSettings) === null || _a === void 0 ? void 0 : _a.outputFormat) !== null && _b !== void 0 ? _b : [];\n        this.responseContextData = (_d = (_c = config.promptSettings) === null || _c === void 0 ? void 0 : _c.contextData) !== null && _d !== void 0 ? _d : [];\n        this.responseFilters = (_f = (_e = config.promptSettings) === null || _e === void 0 ? void 0 : _e.filters) !== null && _f !== void 0 ? _f : [];\n        this.debugMode = (_g = config.debugMode) !== null && _g !== void 0 ? _g : false;\n    }\n    /**\n     * Constructs the system prompt that guides the AI in generating responses.\n     *\n     * This method assembles a comprehensive set of instructions and context\n     * that the AI will utilize to formulate responses based on user input\n     * and the provided content, ensuring adherence to specified rules and formats.\n     *\n     * @param isInlineResponse - A boolean indicating whether the response should be inline.\n     * @returns A string containing the formatted system prompt for the AI.\n    */\n    getSystemPrompt(isInlineResponse = false) {\n        const corpus = [];\n        corpus.push(`You will be provided with a partially written article with \"\"\"@@@cursor@@@\"\"\" somewhere \n\t\t\tunder a CONTEXT section, user input under a TASK section, and sometimes there will be articles \n\t\t\t(delimited with marked-up language) separated by Starting Markdown Content \\${ number } and \n\t\t\tEnding Markdown Content \\${ index } with certain instructions to follow while generating a response \n\t\t\tunder an INSTRUCTION section`);\n        corpus.push(`If there is an article with \"\"\"Stating Markdown Content\"\"\", your task is to \n\t\t\tuse that provided information solely to respond to the user request in the TASK section.`);\n        corpus.push('Follow these step-by-step instructions to respond to user inputs:');\n        corpus.push(`Step 1 - Summarize information under the CONTEXT section, set a tone for the article, and \n\t\t\tlater use that summarized information to generate a response`);\n        corpus.push(`Step 2: If there is an article with \"\"\"Stating Markdown Content\"\"\", \n\t\t\tbreak it into derived sections and eliminate unnecessary information \n\t\t\tthat does not relate to the context and user prompt.`);\n        corpus.push('Final Step - use all summarized information to respond to user input under the TASK section');\n        corpus.push('While generating the response, adhere to the following rules:');\n        corpus.push(`1. Provide only the new text content that should replace \"@@@cursor@@@\" based on the context above, \n\t\t\tensuring that the response must primarily based on the request.`);\n        corpus.push(`2. Avoid including any part of the context in the output at any cost, \n\t\t\texcept for necessary glimpses that enhance the response.`);\n        corpus.push(`3. Ensure response adheres to the specified tone or style, such as \n\t\t\tformal, informal, or technical, as appropriate for the context.`);\n        corpus.push('4. Do not use any markdown formatting in your response. (e.g., **, ##, ###, ---, ===, ____).');\n        corpus.push(`5. Use a relaxed, formal or informal tone based on the summary of context with lots of personal touches. \n\t\t\tFeel free to include spontaneous thoughts, offhand comments, or quirky observations.`);\n        corpus.push(`6. Vary sentence lengths and styles—include fragments, casual interjections, \n\t\t\tand minor grammar slips, but avoid spelling mistakes.`);\n        corpus.push('7. Add in personal anecdotes or emotional reactions to make it sound like a genuine conversation.');\n        corpus.push('8. Avoid overly polished language or structured sentences, aim for a natural and solely human-like tone.');\n        if (isInlineResponse) {\n            corpus.push(`9: Determine from the context, task, and the position of the @@@cursor@@@ whether the request \n\t\t\t\tinvolves list items, table cells, or inline content.\n\t\t\t\t- List items: Format each item as <li> within an <ol> or <ul> as appropriate.\n\t\t\t\t- Table cells: Present each item in plain text, wrapping it within <p> tags.\n\t\t\t\t- Inline content: Wrap entire response in a single <p> tag, ensuring it fits seamlessly within the existing paragraph or \n\t\t\t\tsentence structure where the @@@cursor@@@ is located.\n\t\t\t\tStrictly adherence to these rules is mandatory to avoid errors, based on where the @@@cursor@@@ is placed within content.`);\n        }\n        corpus.push('Above are the rules apply every time, but below will only be applied if markdown content is present');\n        corpus.push('1. Extract each content as plain text without any special formatting, emphasis, or markdown');\n        corpus.push('2. The response should synthesize information from both the editor content ' +\n            'and the fetched sources, maintaining a balance between them.');\n        corpus.push('3. Highlight key points from the fetched sources while ensuring that ' +\n            'the context from the editor is acknowledged and integrated where relevant.');\n        corpus.push('4. Clearly differentiate between the information derived from the editor ' +\n            'content and that from the fetched sources to avoid confusion.');\n        corpus.push('When generating content, adhere to the following HTML-specific rules:');\n        corpus.push('1. Generate an HTML snippet, not a full HTML document.');\n        corpus.push('2. You are an HTML generator. When providing HTML code, ensure it follows standard HTML norms and best practices.');\n        corpus.push('4. Block-level elements (e.g., <p>, <div>, <section>) must not contain other block-level elements.');\n        corpus.push('5. Ensure valid nesting of elements.');\n        corpus.push('6. Use the following allowed HTML tags:');\n        corpus.push(`${this.getAllowedHtmlTags().join(', ')}`);\n        corpus.push('7. Do not include any HTML, HEAD, or BODY tags.');\n        corpus.push('8. Ensure all HTML tags are properly closed and nested.');\n        corpus.push('9. Do not include any HTML, HEAD, or BODY tags.');\n        corpus.push('10. Avoid using inline styles or class attributes unless specifically requested.');\n        corpus.push('11. Provide clean, valid HTML that adheres to best practices and is ready for use in web development.');\n        corpus.push('12. Beginning word of response must be a valid html tag');\n        if (this.getAllowedHtmlTags().includes('img')) {\n            corpus.push('13. For image elements, follow these strict formatting rules:');\n            corpus.push('    a. Every <img> tag MUST include both src and alt attributes');\n            corpus.push('    b. Format the src URL exactly as: https://placehold.co/600x400?text=[alt_text]');\n            corpus.push('    c. The [alt_text] in the src URL must:');\n            corpus.push('       - Be identical to the alt attribute value');\n            corpus.push('       - Replace spaces with + characters');\n            corpus.push('       - Exclude any special characters');\n            corpus.push('    d. Example:');\n            corpus.push('       <img src=\"https://placehold.co/600x400?text=Beautiful+Sunset\" alt=\"Beautiful Sunset\">');\n        }\n        // Join all instructions into a single formatted string.\n        const systemPrompt = corpus.join('\\n');\n        // Log the system prompt if debug mode is enabled\n        if (this.debugMode) {\n            console.group('AiAgent System Prompt Debug');\n            console.log('System Prompt:');\n            console.log(systemPrompt);\n            console.groupEnd();\n        }\n        return systemPrompt;\n    }\n    /**\n     * Formats the final prompt to be sent to the GPT model, including context and instructions.\n     *\n     * @param request - The user's request string.\n     * @param context - The trimmed context string.\n     * @param markDownContents - An array of MarkdownContent objects for additional context.\n     * @param isEditorEmpty - A boolean indicating if the editor is empty.\n     * @returns The formatted prompt string.\n     */\n    formatFinalPrompt(request, context, markDownContents, isEditorEmpty) {\n        const editor = this.editor;\n        const contentLanguageCode = editor.locale.contentLanguage;\n        const corpus = [];\n        // Context and Task\n        corpus.push('CONTEXT:');\n        corpus.push(`\\n\"\"\"\\n${context}\\n\"\"\"\\n`);\n        corpus.push('\\n\\nTASK:\\n\\n');\n        corpus.push(`\"\"\"\\n${request}\\n\"\"\"\\n`);\n        // Markdown Content\n        if (markDownContents.length) {\n            corpus.push('Refer to following markdown content as a source of information, but generate new text that fits the given context & task.');\n            markDownContents.forEach((markdown, index) => {\n                corpus.push(`\\n\\n------------ Stating Markdown Content ${index + 1} ------------\\n\\n`);\n                corpus.push(markdown.content);\n                corpus.push(`\\n\\n------------ Ending Markdown Content ${index + 1} ------------\\n\\n`);\n            });\n        }\n        // Instructions\n        corpus.push('\\n\\nINSTRUCTIONS:\\n\\n');\n        corpus.push(`The response must follow the language code - ${contentLanguageCode}.`);\n        // Response Output Format\n        if (this.responseOutputFormat.length) {\n            corpus.push(...this.responseOutputFormat);\n        }\n        // Markdown Content Usage\n        if (markDownContents.length) {\n            corpus.push('Use information from provided markdown content to generate new text, but do not copy it verbatim.');\n            corpus.push('Ensure the new text flows naturally with the existing context and integrates smoothly.');\n            corpus.push('Do not use any markdown formatting in your response. ' +\n                'specially for title and list item like \"\"\"**Performance**\"\"\" is not acceptable where as \"\"\"performance\"\"\" is.');\n            corpus.push('consider whole markdown of single source as content and then generate % content requested');\n        }\n        // Response Filters\n        if (this.responseFilters.length) {\n            corpus.push(...this.responseFilters);\n        }\n        else {\n            const defaultFilterInstructions = [\n                'The response should directly follow the context, avoiding any awkward transitions or noticeable gaps.'\n            ];\n            corpus.push(...defaultFilterInstructions);\n        }\n        // Context-Specific Instructions\n        if (!isEditorEmpty) {\n            const defaultContextInstructions = [\n                'Ensure the inserted content maintains a seamless connection with the surrounding text,',\n                'making the transition smooth and natural.',\n                'Do not modify the original text except to replace the \"@@@cursor@@@\" placeholder with the generated content.'\n            ];\n            corpus.push(...defaultContextInstructions);\n        }\n        if (this.responseContextData.length) {\n            corpus.push(...this.responseContextData);\n        }\n        // Debugging Information\n        if (this.debugMode) {\n            console.group('AiAgent Prompt Debug');\n            console.log('User Prompt:', request);\n            console.log('Generated GPT Prompt:');\n            console.log(corpus.join('\\n'));\n            console.groupEnd();\n        }\n        // Join all instructions into a single formatted string.\n        return corpus.join('\\n');\n    }\n    /**\n     * Trims the context around the user's prompt to create a suitable context for the AI model.\n     * This method identifies the position of the user's prompt within the provided text and extracts\n     * the surrounding context, placing a cursor placeholder where the prompt is located.\n     *\n     * @param prompt - The user's prompt string to locate within the context.\n     * @param promptContainerText - The text container in which the prompt is located (optional).\n     * @returns The trimmed context string with a cursor placeholder indicating the prompt's position.\n    */\n    trimContext(prompt, promptContainerText = '') {\n        var _a, _b, _c, _d;\n        let contentBeforePrompt = '';\n        let contentAfterPrompt = '';\n        const splitText = promptContainerText !== null && promptContainerText !== void 0 ? promptContainerText : prompt;\n        const editor = this.editor;\n        const view = (_c = (_b = (_a = editor === null || editor === void 0 ? void 0 : editor.editing) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.domRoots) === null || _c === void 0 ? void 0 : _c.get('main');\n        const context = (_d = view === null || view === void 0 ? void 0 : view.innerText) !== null && _d !== void 0 ? _d : '';\n        const matchIndex = context.indexOf(splitText);\n        const nextEnterIndex = context.indexOf('\\n', matchIndex);\n        const firstNewlineIndex = nextEnterIndex !== -1 ? nextEnterIndex : matchIndex + splitText.length;\n        const beforeNewline = context.substring(0, firstNewlineIndex);\n        const afterNewline = context.substring(firstNewlineIndex + 1);\n        const contextParts = [beforeNewline, afterNewline];\n        const allocatedEditorContextToken = Math.floor(this.contextSize * 0.3);\n        if (contextParts.length > 1) {\n            if (contextParts[0].length < contextParts[1].length) {\n                contentBeforePrompt = this.extractEditorContent(contextParts[0], allocatedEditorContextToken / 2, true);\n                contentAfterPrompt = this.extractEditorContent(contextParts[1], allocatedEditorContextToken - contentBeforePrompt.length / 4);\n            }\n            else {\n                contentAfterPrompt = this.extractEditorContent(contextParts[1], allocatedEditorContextToken / 2);\n                contentBeforePrompt = this.extractEditorContent(contextParts[0], allocatedEditorContextToken - contentAfterPrompt.length / 4, true);\n            }\n        }\n        // Combine the trimmed context with the cursor placeholder\n        const escapedPrompt = prompt.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // Escapes special characters\n        contentBeforePrompt = contentBeforePrompt.trim().replace(new RegExp(escapedPrompt.slice(1)), '@@@cursor@@@');\n        const trimmedContext = `${contentBeforePrompt}\\n${contentAfterPrompt}`;\n        return trimmedContext.trim();\n    }\n    /**\n     * Allocates tokens to the fetched content based on the available limit and the user's prompt.\n     *\n     * @param prompt - The user's prompt string.\n     * @param fetchedContent - An array of MarkdownContent objects containing fetched content.\n     * @returns An array of MarkdownContent objects with calculated tokenToRequest values.\n     */\n    allocateTokensToFetchedContent(prompt, fetchedContent) {\n        var _a, _b, _c, _d, _e, _f;\n        const editorContent = (_f = (_e = (_d = (_c = (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.editing) === null || _b === void 0 ? void 0 : _b.view) === null || _c === void 0 ? void 0 : _c.domRoots) === null || _d === void 0 ? void 0 : _d.get('main')) === null || _e === void 0 ? void 0 : _e.innerText) !== null && _f !== void 0 ? _f : '';\n        const editorToken = Math.min(Math.floor(this.contextSize * 0.3), this.countTokens(editorContent));\n        let availableLimit = this.contextSize - editorToken;\n        fetchedContent = fetchedContent\n            .map(content => ({\n            ...content,\n            availableToken: this.countTokens(content.content)\n        }))\n            .sort((a, b) => { var _a, _b; return ((_a = a.availableToken) !== null && _a !== void 0 ? _a : 0) - ((_b = b.availableToken) !== null && _b !== void 0 ? _b : 0); });\n        let maxTokenFromEachURL = availableLimit / fetchedContent.length;\n        return fetchedContent.map((content, index) => {\n            if (content.availableToken &&\n                content.availableToken <= maxTokenFromEachURL) {\n                content.tokenToRequest = content.availableToken;\n                availableLimit -= content.availableToken;\n            }\n            else if (content.availableToken) {\n                content.tokenToRequest = maxTokenFromEachURL;\n                availableLimit -= maxTokenFromEachURL;\n            }\n            maxTokenFromEachURL =\n                availableLimit / (fetchedContent.length - (index + 1));\n            if (content.tokenToRequest) {\n                content.content = this.trimLLMContentByTokens(content.content, content.tokenToRequest);\n            }\n            return content;\n        });\n    }\n    /**\n     * Generates Markdown content for an array of URLs by fetching their content.\n     *\n     * @param urls - An array of URLs to fetch content from.\n     * @returns A promise that resolves to an array of MarkdownContent objects.\n     */\n    async generateMarkDownForUrls(urls) {\n        const editor = this.editor;\n        const t = editor.t;\n        let errorMsg;\n        const markDownContents = await Promise.all(urls.map(async (url) => {\n            const content = await this.fetchUrlContent(url);\n            return { content, url };\n        }));\n        const emptyContent = markDownContents.filter((content) => !(content === null || content === void 0 ? void 0 : content.content));\n        if (emptyContent.length) {\n            const urlStr = emptyContent === null || emptyContent === void 0 ? void 0 : emptyContent.map(content => content === null || content === void 0 ? void 0 : content.url).join(',');\n            errorMsg = t('Failed to fetch content of : %0', urlStr);\n            if (errorMsg) {\n                aiAgentContext.showError(errorMsg);\n            }\n            throw new Error('Unable to fetch content for few urls');\n        }\n        return markDownContents.filter((content) => content !== null);\n    }\n    /**\n     * Fetches the content of a given URL and returns it as a string.\n     *\n     * @param url - The URL to fetch content from.\n     * @returns A promise that resolves to the fetched content as a string.\n     * @throws Will throw an error if the URL is invalid or if the fetch fails.\n     */\n    async fetchUrlContent(url) {\n        const urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n        const trimmedUrl = url.trim();\n        if (!urlRegex.test(trimmedUrl)) {\n            throw new Error('Invalid URL');\n        }\n        try {\n            // Use a regular expression to remove hidden characters\n            const cleanedUrl = trimmedUrl.replace(/[^\\x20-\\x7E]/g, '');\n            const requestURL = `https://r.jina.ai/${cleanedUrl.trim()}`;\n            const response = await fetch(requestURL.trim(), {\n                headers: {\n                    'X-With-Generated-Alt': 'true'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const content = await response.text();\n            // Updated error matching\n            if (content.includes('Warning: Target URL returned error')) {\n                throw new Error(`Target URL (${trimmedUrl}) returned an error`);\n            }\n            if (content.trim().length === 0) {\n                throw new Error('Empty content received');\n            }\n            return content.replace(/\\(https?:\\/\\/[^\\s]+\\)/g, '').replace(/^\\s*$/gm, '').trim();\n        }\n        catch (error) {\n            console.error(`Failed to fetch content: ${url}`, error);\n            return '';\n        }\n    }\n    /**\n     * Counts the number of tokens in the provided content string.\n     *\n     * @param content - The content string to count tokens in.\n     * @returns The number of tokens in the content.\n     */\n    countTokens(content) {\n        if (!content || typeof content !== 'string') {\n            return 0;\n        }\n        // Normalize the content by trimming and reducing multiple whitespaces.\n        const normalizedContent = content\n            .trim()\n            .replace(/\\s+/g, ' ');\n        // Approximate tokens by breaking words, contractions, and common punctuation marks.\n        const tokens = normalizedContent.match(/\\b\\w+('\\w+)?\\b|[.,!?;:\"(){}[\\]]/g) || [];\n        // Heuristic: Long words (over 10 characters) are likely to be split into multiple tokens.\n        // GPT often breaks down long words into smaller subword chunks.\n        let approxTokenCount = 0;\n        tokens.forEach(token => {\n            // Break long words into chunks to approximate GPT subword tokenization.\n            if (token.length > 10) {\n                approxTokenCount += Math.ceil(token.length / 4); // Approximation: 4 characters per token.\n            }\n            else {\n                approxTokenCount += 1;\n            }\n        });\n        return approxTokenCount;\n    }\n    /**\n     * Trims the LLM content by tokens while ensuring that sentences or other structures (e.g., bullet points, paragraphs)\n     * are not clipped mid-way.\n     *\n     * @param content - The LLM-generated content string to trim.\n     * @param maxTokens - The maximum number of tokens allowed.\n     * @returns The trimmed content string.\n     */\n    trimLLMContentByTokens(content, maxTokens) {\n        const elements = content.split('\\n');\n        let accumulatedTokens = 0;\n        let trimmedContent = '';\n        for (const element of elements) {\n            const elementTokenCount = this.countTokens(element);\n            if (accumulatedTokens + elementTokenCount > maxTokens) {\n                break; // Stop if adding this element would exceed the token limit.\n            }\n            accumulatedTokens += elementTokenCount;\n            trimmedContent += element + '\\n'; // Add the whole structural element.\n        }\n        return trimmedContent;\n    }\n    /**\n     * Retrieves the allowed HTML tags based on the CKEditor schema.\n     *\n     * @returns An array of allowed HTML tags.\n     */\n    getAllowedHtmlTags() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const definitions = schema.getDefinitions();\n        const schemaNodes = Object.keys(definitions).sort();\n        // Map of CKEditor nodes to HTML tags\n        const nodeToHtmlMap = {\n            blockQuote: 'blockquote',\n            caption: 'figcaption',\n            codeBlock: 'pre',\n            heading1: 'h1',\n            heading2: 'h2',\n            heading3: 'h3',\n            imageBlock: 'img',\n            imageInline: 'img',\n            paragraph: 'p',\n            table: 'table',\n            tableCell: 'td',\n            tableRow: 'tr',\n            $listItem: 'li',\n            horizontalLine: 'hr'\n        };\n        // Map text attributes to HTML tags\n        const textAttributeToHtmlMap = {\n            bold: 'strong',\n            italic: 'em',\n            code: 'code',\n            strikethrough: 's',\n            subscript: 'sub',\n            superscript: 'sup',\n            underline: 'u',\n            linkHref: 'a'\n        };\n        // Collect allowed tags\n        const allowedTags = new Set();\n        // Add tags from node mappings\n        schemaNodes.forEach(node => {\n            if (node in nodeToHtmlMap) {\n                allowedTags.add(nodeToHtmlMap[node]);\n            }\n        });\n        // Add tags from text attributes\n        const textDefinition = definitions.$text;\n        if (textDefinition && textDefinition.allowAttributes) {\n            textDefinition.allowAttributes.forEach((attr) => {\n                if (attr in textAttributeToHtmlMap) {\n                    allowedTags.add(textAttributeToHtmlMap[attr]);\n                }\n            });\n        }\n        // If listItem is present, add ul and ol\n        if (allowedTags.has('li')) {\n            allowedTags.add('ul');\n            allowedTags.add('ol');\n        }\n        // Sort and return the unique allowed tags\n        return Array.from(allowedTags).sort();\n    }\n    /**\n     * Extracts a portion of content based on the specified context size and direction.\n     *\n     * @param contentAfterPrompt - The content string to extract from.\n     * @param contextSize - The maximum size of the context to extract.\n     * @param reverse - A boolean indicating whether to extract in reverse order (default is false).\n     * @returns The extracted content string.\n     */\n    extractEditorContent(contentAfterPrompt, contextSize, reverse = false) {\n        let trimmedContent = '';\n        let charCount = 0;\n        // Tokenize the content into sentences using the sbd library\n        const sentences = sbd.sentences(contentAfterPrompt, {\n            preserve_whitespace: true,\n            html_boundaries: true,\n            allowed_tags: ['blockquote', 'figcaption', 'pre', 'h2', 'h1', 'h3', 'img', 'p', 'table', 'td', 'tr', 'li', 'hr', 'br']\n        });\n        // Iterate over the sentences based on the direction\n        const iterator = reverse ? sentences.reverse() : sentences;\n        for (const sentence of iterator) {\n            const sentenceLength = sentence.length;\n            // Check if adding this sentence would exceed the context size\n            if ((charCount + sentenceLength) / 4 <= contextSize) {\n                trimmedContent = reverse ?\n                    sentence + trimmedContent :\n                    trimmedContent + sentence;\n                charCount += sentenceLength;\n            }\n            else {\n                break; // Stop if adding the next sentence would exceed the context size\n            }\n        }\n        // Trim to remove any trailing whitespace and return the final trimmed content\n        return trimmedContent.trim();\n    }\n}\n","export class HtmlParser {\n    constructor(editor) {\n        this.editor = editor;\n        this.model = editor.model;\n    }\n    /**\n     * Inserts simple HTML content into the editor.\n     *\n     * @param html - The HTML string to be inserted into the editor.\n     * @returns A promise that resolves when the HTML has been inserted.\n     */\n    async insertSimpleHtml(html) {\n        var _a;\n        console.log('Attempting to insert simple HTML:', html);\n        const viewFragment = this.editor.data.processor.toView(html);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = selection.getLastPosition();\n        const lastInsertedChild = modelFragment.getChild(modelFragment.childCount - 1);\n        const currentChildIndex = (_a = selection.getLastPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n        const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n        this.model.change(writer => {\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    writer.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    writer.createPositionAfter(lastUpdatedElementInRoot);\n            }\n            if (insertionPosition && root) {\n                // Insert element to current selection\n                writer.setSelection(insertionPosition);\n                this.model.insertContent(modelFragment, insertionPosition);\n                // Check if it required to add break to current context of list etc.\n                // More to will be added during testing any edge case\n                let isBreakElementReq = lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.getAttribute('listItemId');\n                if (lastInsertedChild === null || lastInsertedChild === void 0 ? void 0 : lastInsertedChild.is('element')) {\n                    isBreakElementReq = isBreakElementReq || lastInsertedChild.name === 'table';\n                }\n                if (isBreakElementReq && lastInsertedChild) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, writer.createPositionAfter(lastInsertedChild));\n                    writer.setSelection(paragraph, 'in');\n                }\n                else if (lastInsertedChild) {\n                    writer.setSelection(writer.createPositionAfter(lastInsertedChild));\n                }\n            }\n        });\n        // Maintain a delay to simulate asynchronous behavior\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    /**\n     * Inserts HTML content as text into the editor.\n     *\n     * @param content - The HTML element containing the text to be inserted.\n     * @param position - The position at which to insert the text (optional).\n     * @param stream - Indicates whether to insert text in a streaming manner (default is false).\n     * @param shouldAddBreakAtEnd - Indicates whether to add a paragraph break at the end of the inserted content (default is false).\n     * @returns A promise that resolves when the text has been inserted.\n     *\n     * This method processes the provided HTML element, converting it to a model fragment,\n     * and inserts it into the editor at the specified position. If streaming is enabled,\n     * elements are inserted one at a time, allowing for a more dynamic insertion experience.\n     * An optional paragraph break can be added at the end of the inserted content.\n    */\n    async insertAsText(content, position, stream = false, shouldAddBreakAtEnd = false) {\n        const viewFragment = this.editor.data.processor.toView(content.outerHTML);\n        const modelFragment = this.editor.data.toModel(viewFragment, '$root');\n        const childrenToInsert = Array.from(modelFragment.getChildren());\n        const root = this.model.document.getRoot();\n        for (const [index, element] of childrenToInsert.entries()) {\n            if (element.is('element')) {\n                const insertPosition = index === 0 ? position : undefined; // Determine position for insertion\n                if (stream) {\n                    await this.insertElementAsStream(element, insertPosition);\n                }\n                else {\n                    await this.batchInsertOfElement(element, insertPosition);\n                }\n            }\n        }\n        if (shouldAddBreakAtEnd) {\n            this.model.change(writer => {\n                const lastPosition = this.model.document.selection.getLastPosition();\n                const currentChildIndex = lastPosition === null || lastPosition === void 0 ? void 0 : lastPosition.path[0];\n                if (root && currentChildIndex != undefined) {\n                    const paragraph = writer.createElement('paragraph');\n                    writer.insert(paragraph, root, currentChildIndex + 1);\n                    writer.setSelection(paragraph, 'in');\n                }\n            });\n        }\n    }\n    /**\n     * Inserts a given element into the editor at the specified position.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted.\n     */\n    async batchInsertOfElement(element, position) {\n        var _a;\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        let insertionPosition = position;\n        if (!position) {\n            const currentChildIndex = (_a = selection.getFirstPosition()) === null || _a === void 0 ? void 0 : _a.path[0];\n            const lastUpdatedElementInRoot = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElementInRoot === null || lastUpdatedElementInRoot === void 0 ? void 0 : lastUpdatedElementInRoot.is('element')) {\n                insertionPosition = lastUpdatedElementInRoot.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElementInRoot, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElementInRoot);\n            }\n        }\n        // insert content at current identified position\n        this.model.change(writer => {\n            this.model.insertContent(element, insertionPosition);\n            writer.setSelection(element, 'end');\n        });\n    }\n    /**\n     * Inserts a given element into the editor at the specified position in a streaming manner.\n     *\n     * @param element - The element to be inserted into the editor.\n     * @param position - The position at which to insert the element.\n     * If not provided, the element will be inserted at the current selection position.\n     * @returns A promise that resolves when the element has been inserted and all text has been streamed in.\n     */\n    async insertElementAsStream(element, position) {\n        const selection = this.model.document.selection;\n        const root = this.model.document.getRoot();\n        const lastRecognizedPosition = selection.getLastPosition();\n        let insertionPosition = position;\n        let targetElement;\n        // Determine insertion position\n        if (!position) {\n            const currentChildIndex = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.path[0];\n            const lastUpdatedElement = root === null || root === void 0 ? void 0 : root.getChild(currentChildIndex !== null && currentChildIndex !== void 0 ? currentChildIndex : 0);\n            if (lastUpdatedElement === null || lastUpdatedElement === void 0 ? void 0 : lastUpdatedElement.is('element')) {\n                insertionPosition = lastUpdatedElement.isEmpty ?\n                    this.model.createPositionAt(lastUpdatedElement, 'end') :\n                    this.model.createPositionAfter(lastUpdatedElement);\n            }\n            this.model.change(writer => {\n                targetElement = writer.createElement(element.name);\n                // Set attributes in a more concise way\n                for (const [key, value] of element.getAttributes()) {\n                    targetElement._setAttribute(key, value);\n                }\n                this.model.insertContent(targetElement, insertionPosition);\n                if (insertionPosition) {\n                    writer.setSelection(targetElement, 'end');\n                }\n            });\n        }\n        else {\n            // current element from the offset\n            const currentElement = lastRecognizedPosition === null || lastRecognizedPosition === void 0 ? void 0 : lastRecognizedPosition.parent;\n            if (currentElement === null || currentElement === void 0 ? void 0 : currentElement.is('element')) {\n                targetElement = currentElement;\n            }\n        }\n        const textChildren = Array.from(element.getChildren()).filter(child => child.is('$text'));\n        for (const textNode of textChildren) {\n            if (!textNode.is('$text')) {\n                continue;\n            }\n            const textAttributes = Array.from(textNode.getAttributes());\n            const textContent = textNode._data;\n            for (const char of textContent) {\n                await new Promise(resolve => {\n                    this.model.change(writer => {\n                        const currentPosition = this.editor.model.document.selection.getLastPosition();\n                        const newPosition = currentPosition.getShiftedBy(1);\n                        const shouldAppendAtEnd = newPosition.offset === (currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.parent.maxOffset);\n                        writer.insertText(char, textAttributes, targetElement, shouldAppendAtEnd ? 'end' : currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.offset);\n                        writer.setSelection(this.editor.model.document.selection.getLastPosition());\n                    });\n                    setTimeout(resolve, 5); // Maintain the streaming effect\n                });\n            }\n        }\n        // Set selection\n        if (!position) {\n            this.model.change(writer => {\n                writer.setSelection(targetElement, 'end');\n            });\n        }\n    }\n    /**\n     * Validate given string as a HTML content\n     * @param content string containing html content\n     * @returns A boolean value as result of validation\n     */\n    isCompleteHtmlChunk(html) {\n        const openingTags = (html.match(/<[^/][^>]*>/g) || []).length;\n        const closingTags = (html.match(/<\\/[^>]+>/g) || []).length;\n        // Check if all opening tags have corresponding closing tags\n        if (openingTags !== closingTags) {\n            return false;\n        }\n        // Check for incomplete tags\n        if (html.includes('<') && !html.includes('>')) {\n            return false;\n        }\n        // Check if the HTML starts with an opening tag and ends with a closing tag\n        const trimmedHtml = html.trim();\n        if (!trimmedHtml.startsWith('<') || !trimmedHtml.endsWith('>')) {\n            return false;\n        }\n        return true;\n    }\n}\n","import { aiAgentContext } from './aiagentcontext.js';\nimport { PromptHelper } from './util/prompt.js';\nimport { HtmlParser } from './util/htmlparser.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport { env } from 'ckeditor5/src/utils.js';\nexport default class AiAgentService {\n    /**\n     * Initializes the AiAgentService with the provided editor and configuration settings.\n     *\n     * @param editor - The CKEditor instance to be used with the AI assist service.\n     */\n    constructor(editor) {\n        var _a, _b;\n        this.aiAgentFeatureLockId = Symbol('ai-agent-feature');\n        this.buffer = '';\n        this.openTags = [];\n        this.isInlineInsertion = false;\n        this.abortGeneration = false;\n        this.editor = editor;\n        this.promptHelper = new PromptHelper(editor);\n        this.htmlParser = new HtmlParser(editor);\n        const config = editor.config.get('aiAgent');\n        this.aiModel = config.model;\n        this.apiKey = config.apiKey;\n        this.endpointUrl = config.endpointUrl;\n        this.temperature = config.temperature;\n        this.timeOutDuration = (_a = config.timeOutDuration) !== null && _a !== void 0 ? _a : 45000;\n        this.maxTokens = config.maxTokens;\n        this.retryAttempts = config.retryAttempts;\n        this.stopSequences = config.stopSequences;\n        this.streamContent = (_b = config.streamContent) !== null && _b !== void 0 ? _b : true;\n    }\n    /**\n     * Handles the slash command input from the user, processes it, and interacts with the AI model.\n     *\n     * @returns A promise that resolves when the command has been processed.\n     */\n    async handleSlashCommand() {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        const root = model.document.getRoot();\n        let content;\n        let parentEquivalentHTML;\n        let parent;\n        const position = model.document.selection.getLastPosition();\n        if (position && root) {\n            parent = position.parent;\n            const inlineSlash = parent.name === 'inline-slash' ? parent : undefined;\n            const equivalentView = mapper.toViewElement(parent);\n            parentEquivalentHTML = equivalentView ? view.domConverter.mapViewToDom(equivalentView) : undefined;\n            if (inlineSlash) {\n                this.isInlineInsertion = true;\n                const startingPath = inlineSlash.getPath();\n                const endingPath = position === null || position === void 0 ? void 0 : position.path;\n                const startPosition = model.createPositionFromPath(root, startingPath); // Example path\n                const endPosition = model.createPositionFromPath(root, endingPath); // Example path\n                const range = model.createRange(startPosition, endPosition);\n                parentEquivalentHTML = (equivalentView === null || equivalentView === void 0 ? void 0 : equivalentView.parent) ?\n                    view.domConverter.mapViewToDom(equivalentView.parent) :\n                    undefined;\n                content = '';\n                for (const item of range.getItems()) {\n                    if (item.is('$textProxy')) {\n                        content += item.data.trim(); // Add text data\n                    }\n                }\n            }\n            else if (parentEquivalentHTML) {\n                content = parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText;\n            }\n        }\n        try {\n            const domSelection = window.getSelection();\n            const domRange = domSelection === null || domSelection === void 0 ? void 0 : domSelection.getRangeAt(0);\n            const rect = domRange.getBoundingClientRect();\n            aiAgentContext.showLoader(rect);\n            const gptPrompt = await this.generateGptPromptBasedOnUserPrompt(content !== null && content !== void 0 ? content : '', parentEquivalentHTML === null || parentEquivalentHTML === void 0 ? void 0 : parentEquivalentHTML.innerText);\n            if (parent && gptPrompt) {\n                await this.fetchAndProcessGptResponse(gptPrompt, parent);\n            }\n        }\n        catch (error) {\n            console.error('Error handling slash command:', error);\n            throw error;\n        }\n        finally {\n            this.isInlineInsertion = false;\n            aiAgentContext.hideLoader();\n        }\n    }\n    /**\n     * Fetches and processes the GPT response based on the provided prompt and parent element.\n     *\n     * @param prompt - The prompt to send to the GPT model.\n     * @param parent - The parent element in the editor where the response will be inserted.\n     * @param retries - The number of retry attempts for the API call (default is the configured retry attempts).\n     * @returns A promise that resolves when the response has been processed.\n     */\n    async fetchAndProcessGptResponse(prompt, parent, retries = this.retryAttempts) {\n        var _a, _b, _c;\n        console.log('Starting fetchAndProcessGptResponse');\n        const editor = this.editor;\n        const t = editor.t;\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.timeOutDuration);\n        let buffer = '';\n        let contentBuffer = '';\n        const blockID = `ai-${new Date().getTime()}`;\n        try {\n            const response = await fetch(this.endpointUrl, {\n                method: 'POST',\n                headers: {\n                    Authorization: `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.aiModel,\n                    messages: [\n                        { role: 'system', content: this.promptHelper.getSystemPrompt(this.isInlineInsertion) },\n                        { role: 'user', content: prompt }\n                    ],\n                    temperature: this.temperature,\n                    max_tokens: this.maxTokens,\n                    stop: this.stopSequences,\n                    stream: true\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error('Fetch failed');\n            }\n            aiAgentContext.hideLoader();\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder('utf-8');\n            this.clearParentContent(parent);\n            // this.editor.enableReadOnlyMode( this.aiAgentFeatureLockId );\n            let insertParent = true;\n            this.cancelGenerationButton(blockID, controller);\n            editor.model.change(writer => {\n                var _a;\n                const position = editor.model.document.selection.getLastPosition();\n                if (position) {\n                    const aiTag = writer.createElement('ai-tag', {\n                        id: blockID\n                    });\n                    const parent = position.parent;\n                    if (parent) {\n                        if (((_a = parent.parent) === null || _a === void 0 ? void 0 : _a.name) === 'tableCell') {\n                            insertParent = false;\n                        }\n                        else if (parent.getAttribute('listType') === 'bulleted') {\n                            insertParent = false;\n                        }\n                    }\n                    let parentContent = '';\n                    for (const child of parent.getChildren()) {\n                        if (child.is('$text')) {\n                            parentContent += child.data;\n                        }\n                    }\n                    const parentPosition = parentContent ? writer.createPositionAfter(parent) : writer.createPositionBefore(parent);\n                    writer.insert(aiTag, insertParent ? parentPosition : position);\n                    const newPosition = writer.createPositionAt(aiTag, 'end');\n                    writer.setSelection(newPosition);\n                }\n            });\n            console.log('Starting to process response');\n            for (;;) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    console.log('Finished reading response');\n                    break;\n                }\n                const chunk = decoder.decode(value, { stream: true });\n                buffer += chunk;\n                let newlineIndex;\n                while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                    const line = buffer.slice(0, newlineIndex).trim();\n                    buffer = buffer.slice(newlineIndex + 1);\n                    if (line.startsWith('data: ')) {\n                        const jsonStr = line.slice(5).trim();\n                        if (jsonStr === '[DONE]') {\n                            console.log('Received [DONE] signal');\n                            break;\n                        }\n                        try {\n                            const data = JSON.parse(jsonStr);\n                            const content = (_b = (_a = data.choices[0]) === null || _a === void 0 ? void 0 : _a.delta) === null || _b === void 0 ? void 0 : _b.content;\n                            if (content !== null && content !== undefined) {\n                                contentBuffer += content;\n                            }\n                            await this.updateContent(contentBuffer, blockID, insertParent);\n                        }\n                        catch (parseError) {\n                            console.warn('Error parsing JSON:', parseError);\n                        }\n                    }\n                }\n            }\n            this.processCompleted(blockID);\n        }\n        catch (error) {\n            if (this.abortGeneration) {\n                return;\n            }\n            console.error('Error in fetchAndProcessGptResponse:', error);\n            const errorIdentifier = ((error === null || error === void 0 ? void 0 : error.message) || '').trim() || ((error === null || error === void 0 ? void 0 : error.name) || '').trim();\n            const isRetryableError = [\n                'AbortError',\n                'ReadableStream not supported',\n                'AiAgent: Fetch failed'\n            ].includes(errorIdentifier);\n            if (retries > 0 && isRetryableError) {\n                console.warn(`Retrying... (${retries} attempts left)`);\n                return await this.fetchAndProcessGptResponse(prompt, parent, retries - 1);\n            }\n            let errorMessage;\n            switch ((error === null || error === void 0 ? void 0 : error.name) || ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.trim())) {\n                case 'ReadableStream not supported':\n                    errorMessage = t('Browser does not support readable streams');\n                    break;\n                case 'AiAgent: Fetch failed':\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n                    break;\n                default:\n                    errorMessage = t('We couldn\\'t connect to the AI. Please check your internet');\n            }\n            aiAgentContext.showError(errorMessage);\n        }\n        finally {\n            this.editor.disableReadOnlyMode(this.aiAgentFeatureLockId);\n        }\n    }\n    /**\n     * Creates and configures a cancel generation button with keyboard shortcut support.\n     *\n     * @param blockID - Unique identifier for the AI generation block\n     * @param controller - AbortController to cancel the ongoing AI generation\n     * @private\n     */\n    cancelGenerationButton(blockID, controller) {\n        const editor = this.editor;\n        const view = new ButtonView();\n        const keystroke = env.isMac ? '\\u2318 + \\u232B' : 'Ctrl + \\u232B';\n        view.set({\n            label: `${keystroke} Cancel Generation`,\n            labelStyle: 'font-weight: 100; font-size:0.85em; color: gray',\n            withText: true,\n            class: 'cancel-request'\n        });\n        view.on('execute', () => {\n            this.abortGeneration = true;\n            controller.abort();\n            this.processCompleted(blockID);\n        });\n        view.render();\n        editor.keystrokes.set('Ctrl+Backspace', (keyEvtData, cancel) => {\n            if (keyEvtData.ctrlKey || keyEvtData.metaKey) {\n                this.abortGeneration = true;\n                controller.abort();\n                this.processCompleted(blockID);\n            }\n            cancel();\n        });\n        if (editor.ui.view.element && view.element) {\n            const panelContent = editor.ui.view.element.querySelector('.ck-sticky-panel__content .ck-toolbar__items');\n            if (panelContent) {\n                panelContent.append(view.element);\n            }\n        }\n    }\n    /**\n     * Handles cleanup after AI generation is completed or cancelled.\n     * Removes the cancel button from the UI and cleans up the temporary AI tag from editor content.\n     *\n     * @param blockID - Unique identifier for the AI generation block to be cleaned up\n     * @private\n     */\n    processCompleted(blockID) {\n        const editor = this.editor;\n        if (editor.ui.view.element) {\n            const cancelButton = editor.ui.view.element.querySelector('.cancel-request');\n            if (cancelButton) {\n                cancelButton.remove();\n            }\n        }\n        const editorData = editor.getData();\n        let editorContent = editorData.replace(`<ai-tag id=\"${blockID}\">`, '');\n        editorContent = editorContent.replace('</ai-tag>', '');\n        editor.setData(editorContent);\n    }\n    /**\n     * Updates the content of an AI-generated block in the editor.\n     *\n     * @param newHtml - The new HTML content to insert\n     * @param blockID - The unique identifier of the AI block to update\n     * @param insertParent - Whether to insert at parent level or child level\n     * @returns Promise that resolves when the update is complete\n     * @private\n     */\n    async updateContent(newHtml, blockID, insertParent) {\n        const editor = this.editor;\n        editor.model.change(writer => {\n            const root = editor.model.document.getRoot();\n            let targetElement = null;\n            if (root) {\n                for (const child of root.getChildren()) {\n                    const childElement = child;\n                    if (insertParent) {\n                        if (childElement.is('element', 'ai-tag') && childElement.getAttribute('id') === blockID) {\n                            targetElement = childElement;\n                            break;\n                        }\n                    }\n                    else {\n                        for (const innerChild of childElement.getChildren()) {\n                            if (innerChild.is('element', 'ai-tag') && innerChild.getAttribute('id') === blockID) {\n                                targetElement = innerChild;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (targetElement) {\n                    const range = editor.model.createRangeIn(targetElement);\n                    writer.remove(range);\n                    const viewFragment = editor.data.processor.toView(newHtml);\n                    const modelFragment = editor.data.toModel(viewFragment);\n                    writer.insert(modelFragment, targetElement, 'end');\n                }\n            }\n        });\n        await new Promise(resolve => setTimeout(resolve));\n    }\n    /**\n     * Processes the provided content and inserts it into the specified parent element.\n     * Depending on the feature flag, it either uses a simple HTML insertion method\n     * or processes the content as HTML.\n     *\n     * @param content - The content to be processed and inserted.\n     * @param parent - The parent element in the editor where the content will be inserted.\n     */\n    async processContent(content) {\n        try {\n            console.log('--- Start of processContent ---');\n            console.log('Processing content:', content, this.isInlineInsertion);\n            if (this.isInlineInsertion) {\n                const position = this.editor.model.document.selection.getLastPosition();\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerHTML = content;\n                await this.htmlParser.insertAsText(tempParagraph || '', position !== null && position !== void 0 ? position : undefined, this.streamContent);\n            }\n            else {\n                if (this.streamContent) {\n                    // Existing complex content processing logic\n                    await this.proceedHtmlResponse(content);\n                }\n                else {\n                    // Use the simple HTML insertion method\n                    await this.htmlParser.insertSimpleHtml(content);\n                }\n            }\n            console.log('--- End of processContent ---');\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Processes the provided HTML string and inserts its content into the editor.\n     * It creates a temporary div to parse the HTML and handles different types of\n     * elements (lists, tables, headings, etc.) accordingly.\n     *\n     * @param html - The HTML string to be processed and inserted into the editor.\n     */\n    async proceedHtmlResponse(html) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n        for (const child of Array.from(tempDiv.childNodes)) {\n            const element = child;\n            if (element.nodeType === Node.ELEMENT_NODE) {\n                const elementName = element.tagName.toLowerCase();\n                const isStreamingNotAllow = [\n                    'table', 'blockquote', 'pre', 'img', 'form', 'figure'\n                ].includes(elementName);\n                if (isStreamingNotAllow) {\n                    await this.htmlParser.insertSimpleHtml(element.outerHTML);\n                }\n                else if (elementName === 'ul' || elementName === 'ol') {\n                    await this.htmlParser.insertAsText(element, undefined, true, true);\n                }\n                else {\n                    await this.htmlParser.insertAsText(element, undefined, true);\n                }\n            }\n            else if (element.nodeType === Node.TEXT_NODE && element.textContent) {\n                const tempParagraph = document.createElement('div');\n                tempParagraph.innerText = element.textContent;\n                await this.htmlParser.insertAsText(tempParagraph, undefined, true);\n            }\n        }\n    }\n    /**\n     * Clears the content of the specified parent element in the editor.\n     *\n     * @param parent - The parent element whose content will be cleared.\n     */\n    clearParentContent(parent) {\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot();\n        const position = model.document.selection.getLastPosition();\n        const inlineSlash = Array.from(parent.getChildren()).find((child) => child.name === 'inline-slash');\n        if (root && position) {\n            editor.model.change(writer => {\n                const startingPath = (inlineSlash === null || inlineSlash === void 0 ? void 0 : inlineSlash.getPath()) || parent.getPath();\n                const range = model.createRange(model.createPositionFromPath(root, startingPath), model.createPositionFromPath(root, position.path));\n                writer.remove(range);\n                writer.setSelection(model.createPositionFromPath(root, startingPath));\n            });\n        }\n    }\n    /**\n     * Generates a GPT prompt based on the user's input and the current context in the editor.\n     * This method processes the input prompt, extracts any URLs, and formats the final prompt\n     * to be sent to the GPT model. It also handles the case where the editor is empty.\n     *\n     * @param prompt - The user's input prompt, typically starting with a slash.\n     * @param promptContainerText - Optional text from the container that may provide additional context.\n     * @returns A promise that resolves to the generated GPT prompt string or null if an error occurs.\n    */\n    async generateGptPromptBasedOnUserPrompt(prompt, promptContainerText) {\n        try {\n            const context = this.promptHelper.trimContext(prompt, promptContainerText);\n            const request = prompt.slice(1); // Remove the leading slash\n            let markDownContents = [];\n            const urlRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s]*/g;\n            const urls = prompt.match(urlRegex);\n            if (Array.isArray(urls) && urls.length) {\n                const formattedUrl = urls.map(url => {\n                    return url.replace(/[,.]$/, '');\n                });\n                markDownContents = await this.promptHelper.generateMarkDownForUrls(formattedUrl);\n                markDownContents = this.promptHelper.allocateTokensToFetchedContent(prompt, markDownContents);\n            }\n            const isEditorEmpty = context === '\"@@@cursor@@@\"';\n            return this.promptHelper.formatFinalPrompt(request, context, markDownContents, isEditorEmpty);\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentCommand from './aiagentcommand.js';\nimport AiAgentService from './aiagentservice.js';\nexport default class AiAgentEditing extends Plugin {\n    static get pluginName() {\n        return 'AiAgentEditing';\n    }\n    /**\n     * Initializes the AI Agent editing plugin, setting up commands and key handling.\n     */\n    init() {\n        const editor = this.editor;\n        const aiAgentService = new AiAgentService(editor);\n        editor.commands.add('aiAgent', new AiAgentCommand(editor, aiAgentService));\n        this.setupEnterKeyHandling();\n    }\n    /**\n     * Sets up handling for the Enter key to trigger AI assist functionality.\n     * If the content starts with a slash, it cancels the default action and executes the AI assist command.\n     */\n    setupEnterKeyHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const view = editor.editing.view;\n        editor.keystrokes.set('enter', async (_, cancel) => {\n            var _a;\n            const position = model.document.selection.getFirstPosition();\n            if (position) {\n                const paragraph = position.parent;\n                const inlineSlash = Array.from(paragraph.getChildren()).find((child) => child.name === 'inline-slash');\n                const equivalentView = mapper.toViewElement(paragraph);\n                let content;\n                if (equivalentView) {\n                    content =\n                        (_a = view.domConverter.mapViewToDom(equivalentView)) === null || _a === void 0 ? void 0 : _a.innerText;\n                }\n                if ((typeof content === 'string' && content.startsWith('/')) || inlineSlash) {\n                    cancel();\n                    await editor.execute('aiAgent');\n                }\n            }\n        });\n    }\n}\n","import { Plugin } from 'ckeditor5/src/core.js';\nimport AiAgentUI from './aiagentui.js';\nimport AiAgentEditing from './aiagentediting.js';\nimport { TOKEN_LIMITS } from './const.js';\nimport '../theme/style.css';\nexport default class AiAgent extends Plugin {\n    constructor(editor) {\n        super(editor);\n        this.DEFAULT_GPT_MODEL = 'gpt-4o';\n        this.DEFAULT_AI_END_POINT = 'https://api.openai.com/v1/chat/completions';\n        const config = editor.config.get('aiAgent') || {};\n        // Set default values and merge with provided config\n        const defaultConfig = {\n            model: this.DEFAULT_GPT_MODEL,\n            apiKey: '',\n            endpointUrl: this.DEFAULT_AI_END_POINT,\n            temperature: undefined,\n            timeOutDuration: 45000,\n            maxTokens: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].max,\n            retryAttempts: 1,\n            contextSize: TOKEN_LIMITS[this.DEFAULT_GPT_MODEL].context * 0.75,\n            stopSequences: [],\n            promptSettings: {\n                outputFormat: [],\n                contextData: [],\n                filters: [] // Default filters\n            },\n            debugMode: false,\n            streamContent: true // Default streaming mode\n        };\n        const updatedConfig = { ...defaultConfig, ...config };\n        // Set the merged config back to the editor\n        editor.config.set('aiAgent', updatedConfig);\n        // Validate configuration\n        this.validateConfiguration(updatedConfig);\n    }\n    static get requires() {\n        return [AiAgentUI, AiAgentEditing];\n    }\n    static get pluginName() {\n        return 'AiAgent';\n    }\n    validateConfiguration(config) {\n        if (!config.apiKey) {\n            throw new Error('AiAgent: apiKey is required.');\n        }\n        if (config.temperature && (config.temperature < 0 || config.temperature > 2)) {\n            throw new Error('AiAgent: Temperature must be a number between 0 and 2.');\n        }\n        // Validate maxTokens based on the model's token limits\n        const { min, max } = TOKEN_LIMITS[config.model];\n        if (config.maxTokens < min || config.maxTokens > max) {\n            throw new Error(`AiAgent: maxTokens must be a number between ${min} and ${max}.`);\n        }\n    }\n    init() {\n        // Any additional initialization if needed\n    }\n}\n","import ckeditor from './../theme/icons/ckeditor.svg';\nimport './augmentation.js';\n\nexport { default as AiAgent } from './aiagent.js';\n\nexport const icons = {\n\tckeditor\n};\n"],"names":["AiAgentContext","constructor","getInstance","instance","uiComponent","component","this","_uiComponent","showError","message","console","log","showGptErrorToolTip","showLoader","rect","hideLoader","aiAgentContext","TOKEN_LIMITS","min","max","context","SUPPORTED_LANGUAGES","AiAgentUI","Plugin","super","arguments","PLACEHOLDER_TEXT_ID","GPT_RESPONSE_LOADER_ID","GPT_RESPONSE_ERROR_ID","pluginName","requires","Widget","init","initializeUIComponents","initializeUILanguage","attachListener","error","editor","t","model","schema","register","inheritAllFrom","isInline","isObject","allowWhere","allowAttributes","extend","allowIn","conversion","for","elementToElement","view","name","attributes","viewElement","writer","createElement","class","getAttribute","converterPriority","modelElement","createContainerElement","addPlaceholder","addLoader","addGptErrorToolTip","ui","componentFactory","add","locale","ButtonView","set","label","icon","tooltip","on","change","position","document","selection","getLastPosition","inlineSlashContainer","insertText","insert","newPosition","createPositionAt","setSelection","editing","focus","addCustomTagConversions","id","customTag","toWidget","contentLanguageCode","contentLanguage","includes","setTimeout","applyPlaceholderToCurrentLine","modelRoot","getRoot","modelRange","createRangeIn","itemsToRemove","item","getItems","is","isEmpty","push","remove","hidePlaceHolder","addEventListener","_a","block","getFirstPosition","parent","async","getRectDomOfGivenModelElement","showPlaceHolder","element","mapper","equivalentView","toViewElement","domElement","domConverter","mapViewToDom","getBoundingClientRect","placeholder","onclick","classList","textContent","body","appendChild","ele","getElementById","isReadOnlyMode","isReadOnly","style","left","top","loaderElement","tooltipElement","_b","_c","domRoots","get","editorRect","hideGptErrorToolTip","AiAgentCommand","Command","aiAgentService","refresh","isEnabled","execute","handleSlashCommand","abbreviations","stringHelper","word","c","length","indexOf","slice","end","englishAbbreviations","Match","setAbbreviations","abbr","isCapitalized","str","test","isNumber","isSentenceStarter","substring","isCommonAbbreviation","noSymbols","replace","isTimeAbbreviation","next","toLowerCase","isDottedAbbreviation","matches","match","isCustomAbbreviation","isNameAbbreviation","wordCount","words","filter","charAt","dotPos","isNaN","isPhoneNr","isURL","isConcatenated","i","isBoundaryChar","sanitizeHtml","text","opts","String","$div","innerHTML","trim","require$$1","require$$2","newline_placeholder","newline_placeholder_t","whiteSpaceCheck","RegExp","addNewLineBoundaries","splitIntoWords","tokenizer","sentences","user_options","tokens","options","newline_boundaries","html_boundaries","html_boundaries_tags","sanitize","allowed_tags","preserve_whitespace","k","html_boundaries_regexp","join","re","allowedTags","index","temp","current","split","token","ii","L","endsWithChar","pop","endsWith","s","reduce","out","sentence","lastSentence","concat","map","tokenCount","splice","PromptHelper","_d","_e","_f","_g","config","contextSize","responseOutputFormat","promptSettings","outputFormat","responseContextData","contextData","responseFilters","filters","debugMode","getSystemPrompt","isInlineResponse","corpus","getAllowedHtmlTags","systemPrompt","group","groupEnd","formatFinalPrompt","request","markDownContents","isEditorEmpty","forEach","markdown","content","defaultFilterInstructions","defaultContextInstructions","trimContext","prompt","promptContainerText","contentBeforePrompt","contentAfterPrompt","splitText","innerText","matchIndex","nextEnterIndex","firstNewlineIndex","contextParts","allocatedEditorContextToken","Math","floor","extractEditorContent","escapedPrompt","allocateTokensToFetchedContent","fetchedContent","editorContent","editorToken","countTokens","availableLimit","availableToken","sort","a","b","maxTokenFromEachURL","tokenToRequest","trimLLMContentByTokens","generateMarkDownForUrls","urls","errorMsg","Promise","all","url","fetchUrlContent","emptyContent","Error","trimmedUrl","requestURL","response","fetch","headers","ok","status","approxTokenCount","ceil","maxTokens","elements","accumulatedTokens","trimmedContent","elementTokenCount","definitions","getDefinitions","schemaNodes","Object","keys","nodeToHtmlMap","blockQuote","caption","codeBlock","heading1","heading2","heading3","imageBlock","imageInline","paragraph","table","tableCell","tableRow","$listItem","horizontalLine","textAttributeToHtmlMap","bold","italic","code","strikethrough","subscript","superscript","underline","linkHref","Set","node","textDefinition","$text","attr","has","Array","from","reverse","charCount","sbd","iterator","sentenceLength","HtmlParser","insertSimpleHtml","html","viewFragment","data","processor","toView","modelFragment","toModel","root","insertionPosition","lastInsertedChild","getChild","childCount","currentChildIndex","path","lastUpdatedElementInRoot","createPositionAfter","insertContent","isBreakElementReq","resolve","insertAsText","stream","shouldAddBreakAtEnd","outerHTML","childrenToInsert","getChildren","entries","insertPosition","undefined","insertElementAsStream","batchInsertOfElement","lastPosition","lastRecognizedPosition","targetElement","currentElement","lastUpdatedElement","key","value","getAttributes","_setAttribute","textChildren","child","textNode","textAttributes","_data","char","currentPosition","shouldAppendAtEnd","getShiftedBy","offset","maxOffset","isCompleteHtmlChunk","trimmedHtml","startsWith","AiAgentService","aiAgentFeatureLockId","Symbol","buffer","openTags","isInlineInsertion","abortGeneration","promptHelper","htmlParser","aiModel","apiKey","endpointUrl","temperature","timeOutDuration","retryAttempts","stopSequences","streamContent","parentEquivalentHTML","inlineSlash","startingPath","getPath","endingPath","startPosition","createPositionFromPath","endPosition","range","createRange","domSelection","window","getSelection","getRangeAt","gptPrompt","generateGptPromptBasedOnUserPrompt","fetchAndProcessGptResponse","retries","controller","AbortController","timeoutId","abort","contentBuffer","blockID","Date","getTime","method","Authorization","JSON","stringify","messages","role","max_tokens","stop","signal","clearTimeout","reader","getReader","decoder","TextDecoder","clearParentContent","insertParent","cancelGenerationButton","aiTag","parentContent","parentPosition","createPositionBefore","done","read","newlineIndex","decode","line","jsonStr","parse","choices","delta","updateContent","parseError","warn","processCompleted","errorIdentifier","isRetryableError","errorMessage","disableReadOnlyMode","keystroke","env","isMac","labelStyle","withText","render","keystrokes","keyEvtData","cancel","ctrlKey","metaKey","panelContent","querySelector","append","cancelButton","getData","setData","newHtml","childElement","innerChild","processContent","tempParagraph","proceedHtmlResponse","tempDiv","childNodes","nodeType","Node","ELEMENT_NODE","elementName","tagName","TEXT_NODE","find","urlRegex","isArray","formattedUrl","AiAgentEditing","commands","setupEnterKeyHandling","_","AiAgent","DEFAULT_GPT_MODEL","DEFAULT_AI_END_POINT","updatedConfig","validateConfiguration","icons","ckeditor"],"mappings":"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","x_google_ignoreList":[4,5,6,7]}